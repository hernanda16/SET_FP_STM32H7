
SET_STM32H7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e444  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800e6e4  0800e6e4  0000f6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e80c  0800e80c  0000f80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e814  0800e814  0000f814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800e818  0800e818  0000f818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000007c  24000000  0800e81c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000404  2400007c  0800e898  0001007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000480  0800e898  00010480  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0001007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f4a8  00000000  00000000  000100aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000324d  00000000  00000000  0002f552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001940  00000000  00000000  000327a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000013f9  00000000  00000000  000340e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c19  00000000  00000000  000354d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000212d6  00000000  00000000  0006f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ad16  00000000  00000000  000903c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  0020b0de  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000742c  00000000  00000000  0020b124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000065  00000000  00000000  00212550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400007c 	.word	0x2400007c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e6cc 	.word	0x0800e6cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000080 	.word	0x24000080
 80002dc:	0800e6cc 	.word	0x0800e6cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <si5351_Init>:
 * `Correction` is the difference of actual frequency and desired frequency @ 100 MHz.
 * It can be measured at lower frequencies and scaled linearly.
 * E.g. if you get 10_000_097 Hz instead of 10_000_000 Hz, `correction` is 97*10 = 970
 */
void si5351_Init(int32_t correction)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    si5351Correction = correction;
 8000678:	4a18      	ldr	r2, [pc, #96]	@ (80006dc <si5351_Init+0x6c>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6013      	str	r3, [r2, #0]

    // Disable all outputs by setting CLKx_DIS high
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, 0xFF);
 800067e:	21ff      	movs	r1, #255	@ 0xff
 8000680:	2003      	movs	r0, #3
 8000682:	f000 fa11 	bl	8000aa8 <si5351_write>

    // Power down all output drivers
    si5351_write(SI5351_REGISTER_16_CLK0_CONTROL, 0x80);
 8000686:	2180      	movs	r1, #128	@ 0x80
 8000688:	2010      	movs	r0, #16
 800068a:	f000 fa0d 	bl	8000aa8 <si5351_write>
    si5351_write(SI5351_REGISTER_17_CLK1_CONTROL, 0x80);
 800068e:	2180      	movs	r1, #128	@ 0x80
 8000690:	2011      	movs	r0, #17
 8000692:	f000 fa09 	bl	8000aa8 <si5351_write>
    si5351_write(SI5351_REGISTER_18_CLK2_CONTROL, 0x80);
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	2012      	movs	r0, #18
 800069a:	f000 fa05 	bl	8000aa8 <si5351_write>
    si5351_write(SI5351_REGISTER_19_CLK3_CONTROL, 0x80);
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	2013      	movs	r0, #19
 80006a2:	f000 fa01 	bl	8000aa8 <si5351_write>
    si5351_write(SI5351_REGISTER_20_CLK4_CONTROL, 0x80);
 80006a6:	2180      	movs	r1, #128	@ 0x80
 80006a8:	2014      	movs	r0, #20
 80006aa:	f000 f9fd 	bl	8000aa8 <si5351_write>
    si5351_write(SI5351_REGISTER_21_CLK5_CONTROL, 0x80);
 80006ae:	2180      	movs	r1, #128	@ 0x80
 80006b0:	2015      	movs	r0, #21
 80006b2:	f000 f9f9 	bl	8000aa8 <si5351_write>
    si5351_write(SI5351_REGISTER_22_CLK6_CONTROL, 0x80);
 80006b6:	2180      	movs	r1, #128	@ 0x80
 80006b8:	2016      	movs	r0, #22
 80006ba:	f000 f9f5 	bl	8000aa8 <si5351_write>
    si5351_write(SI5351_REGISTER_23_CLK7_CONTROL, 0x80);
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	2017      	movs	r0, #23
 80006c2:	f000 f9f1 	bl	8000aa8 <si5351_write>

    // Set the load capacitance for the XTAL
    si5351CrystalLoad_t crystalLoad = SI5351_CRYSTAL_LOAD_10PF;
 80006c6:	23c0      	movs	r3, #192	@ 0xc0
 80006c8:	73fb      	strb	r3, [r7, #15]
    si5351_write(SI5351_REGISTER_183_CRYSTAL_INTERNAL_LOAD_CAPACITANCE, crystalLoad);
 80006ca:	7bfb      	ldrb	r3, [r7, #15]
 80006cc:	4619      	mov	r1, r3
 80006ce:	20b7      	movs	r0, #183	@ 0xb7
 80006d0:	f000 f9ea 	bl	8000aa8 <si5351_write>
}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	24000098 	.word	0x24000098

080006e0 <si5351_SetupCLK0>:
void si5351_SetupCLK0(int32_t Fclk, si5351DriveStrength_t driveStrength)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08c      	sub	sp, #48	@ 0x30
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	6078      	str	r0, [r7, #4]
 80006e8:	460b      	mov	r3, r1
 80006ea:	70fb      	strb	r3, [r7, #3]
    si5351PLLConfig_t pll_conf;
    si5351OutputConfig_t out_conf;

    si5351_Calc(Fclk, &pll_conf, &out_conf);
 80006ec:	f107 0208 	add.w	r2, r7, #8
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	4619      	mov	r1, r3
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f822 	bl	8000740 <si5351_Calc>
    si5351_SetupPLL(SI5351_PLL_A, &pll_conf);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	2000      	movs	r0, #0
 8000704:	f000 f8e4 	bl	80008d0 <si5351_SetupPLL>
    si5351_SetupOutput(0, SI5351_PLL_A, driveStrength, &out_conf, 0);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	78fa      	ldrb	r2, [r7, #3]
 800070e:	2100      	movs	r1, #0
 8000710:	9100      	str	r1, [sp, #0]
 8000712:	2100      	movs	r1, #0
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f91a 	bl	800094e <si5351_SetupOutput>
}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	@ 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <si5351_EnableOutputs>:
// Enables or disables outputs depending on provided bitmask.
// Examples:
// si5351_EnableOutputs(1 << 0) enables CLK0 and disables CLK1 and CLK2
// si5351_EnableOutputs((1 << 2) | (1 << 0)) enables CLK0 and CLK2 and disables CLK1
void si5351_EnableOutputs(uint8_t enabled)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	4603      	mov	r3, r0
 800072a:	71fb      	strb	r3, [r7, #7]
    si5351_write(SI5351_REGISTER_3_OUTPUT_ENABLE_CONTROL, ~enabled);
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	43db      	mvns	r3, r3
 8000730:	4619      	mov	r1, r3
 8000732:	2003      	movs	r0, #3
 8000734:	f000 f9b8 	bl	8000aa8 <si5351_write>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <si5351_Calc>:
 */

// Calculates PLL, MS and RDiv settings for given Fclk in [8_000, 160_000_000] range.
// The actual frequency will differ less than 6 Hz from given Fclk, assuming `correction` is right.
void si5351_Calc(int32_t Fclk, si5351PLLConfig_t* pll_conf, si5351OutputConfig_t* out_conf)
{
 8000740:	b480      	push	{r7}
 8000742:	b08f      	sub	sp, #60	@ 0x3c
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
    if (Fclk < 8000)
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8000752:	da03      	bge.n	800075c <si5351_Calc+0x1c>
        Fclk = 8000;
 8000754:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	e005      	b.n	8000768 <si5351_Calc+0x28>
    else if (Fclk > 160000000)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4a54      	ldr	r2, [pc, #336]	@ (80008b0 <si5351_Calc+0x170>)
 8000760:	4293      	cmp	r3, r2
 8000762:	dd01      	ble.n	8000768 <si5351_Calc+0x28>
        Fclk = 160000000;
 8000764:	4b52      	ldr	r3, [pc, #328]	@ (80008b0 <si5351_Calc+0x170>)
 8000766:	60fb      	str	r3, [r7, #12]

    out_conf->allowIntegerMode = 1;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]

    if (Fclk < 1000000) {
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	4a50      	ldr	r2, [pc, #320]	@ (80008b4 <si5351_Calc+0x174>)
 8000772:	4293      	cmp	r3, r2
 8000774:	dc06      	bgt.n	8000784 <si5351_Calc+0x44>
        // For frequencies in [8_000, 500_000] range we can use si5351_Calc(Fclk*64, ...) and SI5351_R_DIV_64.
        // In practice it's worth doing for any frequency below 1 MHz, since it reduces the error.
        Fclk *= 64;
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	019b      	lsls	r3, r3, #6
 800077a:	60fb      	str	r3, [r7, #12]
        out_conf->rdiv = SI5351_R_DIV_64;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2206      	movs	r2, #6
 8000780:	741a      	strb	r2, [r3, #16]
 8000782:	e002      	b.n	800078a <si5351_Calc+0x4a>
    } else {
        out_conf->rdiv = SI5351_R_DIV_1;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2200      	movs	r2, #0
 8000788:	741a      	strb	r2, [r3, #16]
    }

    // Apply correction, _after_ determining rdiv.
    Fclk = Fclk - (int32_t)((((double)Fclk) / 100000000.0) * ((double)si5351Correction));
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000794:	ed9f 5b44 	vldr	d5, [pc, #272]	@ 80008a8 <si5351_Calc+0x168>
 8000798:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800079c:	4b46      	ldr	r3, [pc, #280]	@ (80008b8 <si5351_Calc+0x178>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	ee07 3a90 	vmov	s15, r3
 80007a4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80007a8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80007ac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80007b0:	ee17 2a90 	vmov	r2, s15
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	1a9b      	subs	r3, r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
    // b,c,y,z <= 2**20
    // c, z != 0
    // For any Fclk in [500K, 160MHz] this algorithm finds a solution
    // such as abs(Ffound - Fclk) <= 6 Hz

    const int32_t Fxtal = 25000000;
 80007ba:	4b40      	ldr	r3, [pc, #256]	@ (80008bc <si5351_Calc+0x17c>)
 80007bc:	61fb      	str	r3, [r7, #28]
    int32_t a, b, c, x, y, z, t;

    if (Fclk < 81000000) {
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	4a3f      	ldr	r2, [pc, #252]	@ (80008c0 <si5351_Calc+0x180>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	dc22      	bgt.n	800080c <si5351_Calc+0xcc>
        // Valid for Fclk in 0.5..112.5 MHz range
        // However an error is > 6 Hz above 81 MHz
        a = 36; // PLL runs @ 900 MHz
 80007c6:	2324      	movs	r3, #36	@ 0x24
 80007c8:	637b      	str	r3, [r7, #52]	@ 0x34
        b = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	@ 0x30
        c = 1;
 80007ce:	2301      	movs	r3, #1
 80007d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int32_t Fpll = 900000000;
 80007d2:	4b3c      	ldr	r3, [pc, #240]	@ (80008c4 <si5351_Calc+0x184>)
 80007d4:	613b      	str	r3, [r7, #16]
        x = Fpll / Fclk;
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb92 f3f3 	sdiv	r3, r2, r3
 80007de:	62bb      	str	r3, [r7, #40]	@ 0x28
        t = (Fclk >> 20) + 1;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	151b      	asrs	r3, r3, #20
 80007e4:	3301      	adds	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
        y = (Fpll % Fclk) / t;
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	fb93 f2f2 	sdiv	r2, r3, r2
 80007f0:	68f9      	ldr	r1, [r7, #12]
 80007f2:	fb01 f202 	mul.w	r2, r1, r2
 80007f6:	1a9a      	subs	r2, r3, r2
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80007fe:	627b      	str	r3, [r7, #36]	@ 0x24
        z = Fclk / t;
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	fb92 f3f3 	sdiv	r3, r2, r3
 8000808:	623b      	str	r3, [r7, #32]
 800080a:	e032      	b.n	8000872 <si5351_Calc+0x132>
    } else {
        // Valid for Fclk in 75..160 MHz range
        if (Fclk >= 150000000) {
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4a2e      	ldr	r2, [pc, #184]	@ (80008c8 <si5351_Calc+0x188>)
 8000810:	4293      	cmp	r3, r2
 8000812:	dd02      	ble.n	800081a <si5351_Calc+0xda>
            x = 4;
 8000814:	2304      	movs	r3, #4
 8000816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000818:	e008      	b.n	800082c <si5351_Calc+0xec>
        } else if (Fclk >= 100000000) {
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4a2b      	ldr	r2, [pc, #172]	@ (80008cc <si5351_Calc+0x18c>)
 800081e:	4293      	cmp	r3, r2
 8000820:	dd02      	ble.n	8000828 <si5351_Calc+0xe8>
            x = 6;
 8000822:	2306      	movs	r3, #6
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000826:	e001      	b.n	800082c <si5351_Calc+0xec>
        } else {
            x = 8;
 8000828:	2308      	movs	r3, #8
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        y = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
        z = 1;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]

        int32_t numerator = x * Fclk;
 8000834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000836:	68fa      	ldr	r2, [r7, #12]
 8000838:	fb02 f303 	mul.w	r3, r2, r3
 800083c:	61bb      	str	r3, [r7, #24]
        a = numerator / Fxtal;
 800083e:	69ba      	ldr	r2, [r7, #24]
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	fb92 f3f3 	sdiv	r3, r2, r3
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
        t = (Fxtal >> 20) + 1;
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	151b      	asrs	r3, r3, #20
 800084c:	3301      	adds	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
        b = (numerator % Fxtal) / t;
 8000850:	69bb      	ldr	r3, [r7, #24]
 8000852:	69fa      	ldr	r2, [r7, #28]
 8000854:	fb93 f2f2 	sdiv	r2, r3, r2
 8000858:	69f9      	ldr	r1, [r7, #28]
 800085a:	fb01 f202 	mul.w	r2, r1, r2
 800085e:	1a9a      	subs	r2, r3, r2
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fb92 f3f3 	sdiv	r3, r2, r3
 8000866:	633b      	str	r3, [r7, #48]	@ 0x30
        c = Fxtal / t;
 8000868:	69fa      	ldr	r2, [r7, #28]
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000870:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    pll_conf->mult = a;
 8000872:	68bb      	ldr	r3, [r7, #8]
 8000874:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000876:	601a      	str	r2, [r3, #0]
    pll_conf->num = b;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800087c:	605a      	str	r2, [r3, #4]
    pll_conf->denom = c;
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000882:	609a      	str	r2, [r3, #8]
    out_conf->div = x;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000888:	605a      	str	r2, [r3, #4]
    out_conf->num = y;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800088e:	609a      	str	r2, [r3, #8]
    out_conf->denom = z;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	60da      	str	r2, [r3, #12]
}
 8000896:	bf00      	nop
 8000898:	373c      	adds	r7, #60	@ 0x3c
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	f3af 8000 	nop.w
 80008a8:	00000000 	.word	0x00000000
 80008ac:	4197d784 	.word	0x4197d784
 80008b0:	09896800 	.word	0x09896800
 80008b4:	000f423f 	.word	0x000f423f
 80008b8:	24000098 	.word	0x24000098
 80008bc:	017d7840 	.word	0x017d7840
 80008c0:	04d3f63f 	.word	0x04d3f63f
 80008c4:	35a4e900 	.word	0x35a4e900
 80008c8:	08f0d17f 	.word	0x08f0d17f
 80008cc:	05f5e0ff 	.word	0x05f5e0ff

080008d0 <si5351_SetupPLL>:
    pll_conf->num = (Fpll % Fxtal) / 24;
    pll_conf->denom = Fxtal / 24; // denom can't exceed 0xFFFFF
}
// Sets the multiplier for given PLL
void si5351_SetupPLL(si5351PLL_t pll, si5351PLLConfig_t* conf)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b08c      	sub	sp, #48	@ 0x30
 80008d4:	af02      	add	r7, sp, #8
 80008d6:	4603      	mov	r3, r0
 80008d8:	6039      	str	r1, [r7, #0]
 80008da:	71fb      	strb	r3, [r7, #7]
    int32_t P1, P2, P3;
    int32_t mult = conf->mult;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
    int32_t num = conf->num;
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	623b      	str	r3, [r7, #32]
    int32_t denom = conf->denom;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	61fb      	str	r3, [r7, #28]

    P1 = 128 * mult + (128 * num) / denom - 512;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	01da      	lsls	r2, r3, #7
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	01d9      	lsls	r1, r3, #7
 80008f6:	69fb      	ldr	r3, [r7, #28]
 80008f8:	fb91 f3f3 	sdiv	r3, r1, r3
 80008fc:	4413      	add	r3, r2
 80008fe:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000902:	61bb      	str	r3, [r7, #24]
    // P2 = 128 * num - denom * ((128 * num)/denom);
    P2 = (128 * num) % denom;
 8000904:	6a3b      	ldr	r3, [r7, #32]
 8000906:	01db      	lsls	r3, r3, #7
 8000908:	69fa      	ldr	r2, [r7, #28]
 800090a:	fb93 f2f2 	sdiv	r2, r3, r2
 800090e:	69f9      	ldr	r1, [r7, #28]
 8000910:	fb01 f202 	mul.w	r2, r1, r2
 8000914:	1a9b      	subs	r3, r3, r2
 8000916:	617b      	str	r3, [r7, #20]
    P3 = denom;
 8000918:	69fb      	ldr	r3, [r7, #28]
 800091a:	613b      	str	r3, [r7, #16]

    // Get the appropriate base address for the PLL registers
    uint8_t baseaddr = (pll == SI5351_PLL_A ? 26 : 34);
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d101      	bne.n	8000926 <si5351_SetupPLL+0x56>
 8000922:	231a      	movs	r3, #26
 8000924:	e000      	b.n	8000928 <si5351_SetupPLL+0x58>
 8000926:	2322      	movs	r3, #34	@ 0x22
 8000928:	73fb      	strb	r3, [r7, #15]
    si5351_writeBulk(baseaddr, P1, P2, P3, 0, 0);
 800092a:	7bf8      	ldrb	r0, [r7, #15]
 800092c:	2300      	movs	r3, #0
 800092e:	9301      	str	r3, [sp, #4]
 8000930:	2300      	movs	r3, #0
 8000932:	9300      	str	r3, [sp, #0]
 8000934:	693b      	ldr	r3, [r7, #16]
 8000936:	697a      	ldr	r2, [r7, #20]
 8000938:	69b9      	ldr	r1, [r7, #24]
 800093a:	f000 f8dd 	bl	8000af8 <si5351_writeBulk>

    // Reset both PLLs
    si5351_write(SI5351_REGISTER_177_PLL_RESET, (1 << 7) | (1 << 5));
 800093e:	21a0      	movs	r1, #160	@ 0xa0
 8000940:	20b1      	movs	r0, #177	@ 0xb1
 8000942:	f000 f8b1 	bl	8000aa8 <si5351_write>
}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	@ 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <si5351_SetupOutput>:
// Configures PLL source, drive strength, multisynth divider, Rdivider and phaseOffset.
// Returns 0 on success, != 0 otherwise.
int si5351_SetupOutput(uint8_t output, si5351PLL_t pllSource, si5351DriveStrength_t driveStrength, si5351OutputConfig_t* conf, uint8_t phaseOffset)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b08c      	sub	sp, #48	@ 0x30
 8000952:	af02      	add	r7, sp, #8
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	460b      	mov	r3, r1
 800095c:	71bb      	strb	r3, [r7, #6]
 800095e:	4613      	mov	r3, r2
 8000960:	717b      	strb	r3, [r7, #5]
    int32_t div = conf->div;
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	613b      	str	r3, [r7, #16]
    int32_t num = conf->num;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689b      	ldr	r3, [r3, #8]
 800096c:	60fb      	str	r3, [r7, #12]
    int32_t denom = conf->denom;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	60bb      	str	r3, [r7, #8]
    uint8_t divBy4 = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int32_t P1, P2, P3;

    if (output > 2) {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b02      	cmp	r3, #2
 800097e:	d901      	bls.n	8000984 <si5351_SetupOutput+0x36>
        return 1;
 8000980:	2301      	movs	r3, #1
 8000982:	e08c      	b.n	8000a9e <si5351_SetupOutput+0x150>
    }

    if ((!conf->allowIntegerMode) && ((div < 8) || ((div == 8) && (num == 0)))) {
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d10a      	bne.n	80009a2 <si5351_SetupOutput+0x54>
 800098c:	693b      	ldr	r3, [r7, #16]
 800098e:	2b07      	cmp	r3, #7
 8000990:	dd05      	ble.n	800099e <si5351_SetupOutput+0x50>
 8000992:	693b      	ldr	r3, [r7, #16]
 8000994:	2b08      	cmp	r3, #8
 8000996:	d104      	bne.n	80009a2 <si5351_SetupOutput+0x54>
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <si5351_SetupOutput+0x54>
        // div in { 4, 6, 8 } is possible only in integer mode
        return 2;
 800099e:	2302      	movs	r3, #2
 80009a0:	e07d      	b.n	8000a9e <si5351_SetupOutput+0x150>
    }

    if (div == 4) {
 80009a2:	693b      	ldr	r3, [r7, #16]
 80009a4:	2b04      	cmp	r3, #4
 80009a6:	d109      	bne.n	80009bc <si5351_SetupOutput+0x6e>
        // special DIVBY4 case, see AN619 4.1.3
        P1 = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
        P2 = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
        P3 = 1;
 80009b0:	2301      	movs	r3, #1
 80009b2:	61bb      	str	r3, [r7, #24]
        divBy4 = 0x3;
 80009b4:	2303      	movs	r3, #3
 80009b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80009ba:	e016      	b.n	80009ea <si5351_SetupOutput+0x9c>
    } else {
        P1 = 128 * div + ((128 * num) / denom) - 512;
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	01da      	lsls	r2, r3, #7
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	01d9      	lsls	r1, r3, #7
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	fb91 f3f3 	sdiv	r3, r1, r3
 80009ca:	4413      	add	r3, r2
 80009cc:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80009d0:	623b      	str	r3, [r7, #32]
        // P2 = 128 * num - denom * (128 * num)/denom;
        P2 = (128 * num) % denom;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	01db      	lsls	r3, r3, #7
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	fb93 f2f2 	sdiv	r2, r3, r2
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	fb01 f202 	mul.w	r2, r1, r2
 80009e2:	1a9b      	subs	r3, r3, r2
 80009e4:	61fb      	str	r3, [r7, #28]
        P3 = denom;
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	61bb      	str	r3, [r7, #24]
    }

    // Get the register addresses for given channel
    uint8_t baseaddr = 0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	75fb      	strb	r3, [r7, #23]
    uint8_t phaseOffsetRegister = 0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	75bb      	strb	r3, [r7, #22]
    uint8_t clkControlRegister = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	757b      	strb	r3, [r7, #21]
    switch (output) {
 80009f6:	79fb      	ldrb	r3, [r7, #7]
 80009f8:	2b02      	cmp	r3, #2
 80009fa:	d014      	beq.n	8000a26 <si5351_SetupOutput+0xd8>
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	dc19      	bgt.n	8000a34 <si5351_SetupOutput+0xe6>
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <si5351_SetupOutput+0xbc>
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d007      	beq.n	8000a18 <si5351_SetupOutput+0xca>
 8000a08:	e014      	b.n	8000a34 <si5351_SetupOutput+0xe6>
    case 0:
        baseaddr = SI5351_REGISTER_42_MULTISYNTH0_PARAMETERS_1;
 8000a0a:	232a      	movs	r3, #42	@ 0x2a
 8000a0c:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_165_CLK0_INITIAL_PHASE_OFFSET;
 8000a0e:	23a5      	movs	r3, #165	@ 0xa5
 8000a10:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_16_CLK0_CONTROL;
 8000a12:	2310      	movs	r3, #16
 8000a14:	757b      	strb	r3, [r7, #21]
        break;
 8000a16:	e00d      	b.n	8000a34 <si5351_SetupOutput+0xe6>
    case 1:
        baseaddr = SI5351_REGISTER_50_MULTISYNTH1_PARAMETERS_1;
 8000a18:	2332      	movs	r3, #50	@ 0x32
 8000a1a:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_166_CLK1_INITIAL_PHASE_OFFSET;
 8000a1c:	23a6      	movs	r3, #166	@ 0xa6
 8000a1e:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_17_CLK1_CONTROL;
 8000a20:	2311      	movs	r3, #17
 8000a22:	757b      	strb	r3, [r7, #21]
        break;
 8000a24:	e006      	b.n	8000a34 <si5351_SetupOutput+0xe6>
    case 2:
        baseaddr = SI5351_REGISTER_58_MULTISYNTH2_PARAMETERS_1;
 8000a26:	233a      	movs	r3, #58	@ 0x3a
 8000a28:	75fb      	strb	r3, [r7, #23]
        phaseOffsetRegister = SI5351_REGISTER_167_CLK2_INITIAL_PHASE_OFFSET;
 8000a2a:	23a7      	movs	r3, #167	@ 0xa7
 8000a2c:	75bb      	strb	r3, [r7, #22]
        clkControlRegister = SI5351_REGISTER_18_CLK2_CONTROL;
 8000a2e:	2312      	movs	r3, #18
 8000a30:	757b      	strb	r3, [r7, #21]
        break;
 8000a32:	bf00      	nop
    }

    uint8_t clkControl = 0x0C | driveStrength; // clock not inverted, powered up
 8000a34:	797b      	ldrb	r3, [r7, #5]
 8000a36:	f043 030c 	orr.w	r3, r3, #12
 8000a3a:	753b      	strb	r3, [r7, #20]
    if (pllSource == SI5351_PLL_B) {
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d103      	bne.n	8000a4a <si5351_SetupOutput+0xfc>
        clkControl |= (1 << 5); // Uses PLLB
 8000a42:	7d3b      	ldrb	r3, [r7, #20]
 8000a44:	f043 0320 	orr.w	r3, r3, #32
 8000a48:	753b      	strb	r3, [r7, #20]
    }

    if ((conf->allowIntegerMode) && ((num == 0) || (div == 4))) {
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d009      	beq.n	8000a66 <si5351_SetupOutput+0x118>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d002      	beq.n	8000a5e <si5351_SetupOutput+0x110>
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d103      	bne.n	8000a66 <si5351_SetupOutput+0x118>
        // use integer mode
        clkControl |= (1 << 6);
 8000a5e:	7d3b      	ldrb	r3, [r7, #20]
 8000a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a64:	753b      	strb	r3, [r7, #20]
    }

    si5351_write(clkControlRegister, clkControl);
 8000a66:	7d7b      	ldrb	r3, [r7, #21]
 8000a68:	7d3a      	ldrb	r2, [r7, #20]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f000 f81b 	bl	8000aa8 <si5351_write>
    si5351_writeBulk(baseaddr, P1, P2, P3, divBy4, conf->rdiv);
 8000a72:	7df8      	ldrb	r0, [r7, #23]
 8000a74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000a78:	683a      	ldr	r2, [r7, #0]
 8000a7a:	7c12      	ldrb	r2, [r2, #16]
 8000a7c:	9201      	str	r2, [sp, #4]
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	69bb      	ldr	r3, [r7, #24]
 8000a82:	69fa      	ldr	r2, [r7, #28]
 8000a84:	6a39      	ldr	r1, [r7, #32]
 8000a86:	f000 f837 	bl	8000af8 <si5351_writeBulk>
    si5351_write(phaseOffsetRegister, (phaseOffset & 0x7F));
 8000a8a:	7dba      	ldrb	r2, [r7, #22]
 8000a8c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a94:	4619      	mov	r1, r3
 8000a96:	4610      	mov	r0, r2
 8000a98:	f000 f806 	bl	8000aa8 <si5351_write>

    return 0;
 8000a9c:	2300      	movs	r3, #0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3728      	adds	r7, #40	@ 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
	...

08000aa8 <si5351_write>:
// Writes an 8 bit value of a register over I2C.
void si5351_write(uint8_t reg, uint8_t value)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af04      	add	r7, sp, #16
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
    while (HAL_I2C_IsDeviceReady(&I2C_HANDLE, (uint16_t)(SI5351_ADDRESS << 1), 3, HAL_MAX_DELAY) != HAL_OK) { }
 8000ab8:	bf00      	nop
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295
 8000abe:	2203      	movs	r2, #3
 8000ac0:	21c0      	movs	r1, #192	@ 0xc0
 8000ac2:	480c      	ldr	r0, [pc, #48]	@ (8000af4 <si5351_write+0x4c>)
 8000ac4:	f006 fb6e 	bl	80071a4 <HAL_I2C_IsDeviceReady>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d1f5      	bne.n	8000aba <si5351_write+0x12>

    HAL_I2C_Mem_Write(&I2C_HANDLE, // i2c handle
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	2301      	movs	r3, #1
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	21c0      	movs	r1, #192	@ 0xc0
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <si5351_write+0x4c>)
 8000ae6:	f006 fa49 	bl	8006f7c <HAL_I2C_Mem_Write>
        (uint8_t)reg, // register address
        I2C_MEMADD_SIZE_8BIT, // si5351 uses 8bit register addresses
        (uint8_t*)(&value), // write returned data to this variable
        1, // how many bytes to expect returned
        HAL_MAX_DELAY); // timeout
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2400009c 	.word	0x2400009c

08000af8 <si5351_writeBulk>:

// Common code for _SetupPLL and _SetupOutput
void si5351_writeBulk(uint8_t baseaddr, int32_t P1, int32_t P2, int32_t P3, uint8_t divBy4, si5351RDiv_t rdiv)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]
    si5351_write(baseaddr, (P3 >> 8) & 0xFF);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	121b      	asrs	r3, r3, #8
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	7bfb      	ldrb	r3, [r7, #15]
 8000b10:	4611      	mov	r1, r2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ffc8 	bl	8000aa8 <si5351_write>
    si5351_write(baseaddr + 1, P3 & 0xFF);
 8000b18:	7bfb      	ldrb	r3, [r7, #15]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	b2d2      	uxtb	r2, r2
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ffbf 	bl	8000aa8 <si5351_write>
    si5351_write(baseaddr + 2, ((P1 >> 16) & 0x3) | ((divBy4 & 0x3) << 2) | ((rdiv & 0x7) << 4));
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
 8000b2c:	3302      	adds	r3, #2
 8000b2e:	b2d8      	uxtb	r0, r3
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	141b      	asrs	r3, r3, #16
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	f003 0303 	and.w	r3, r3, #3
 8000b3a:	b25a      	sxtb	r2, r3
 8000b3c:	7e3b      	ldrb	r3, [r7, #24]
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	b25b      	sxtb	r3, r3
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	b25b      	sxtb	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b25a      	sxtb	r2, r3
 8000b4c:	7f3b      	ldrb	r3, [r7, #28]
 8000b4e:	011b      	lsls	r3, r3, #4
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000b56:	b25b      	sxtb	r3, r3
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	4619      	mov	r1, r3
 8000b60:	f7ff ffa2 	bl	8000aa8 <si5351_write>
    si5351_write(baseaddr + 3, (P1 >> 8) & 0xFF);
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	3303      	adds	r3, #3
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	121b      	asrs	r3, r3, #8
 8000b6e:	b2db      	uxtb	r3, r3
 8000b70:	4619      	mov	r1, r3
 8000b72:	4610      	mov	r0, r2
 8000b74:	f7ff ff98 	bl	8000aa8 <si5351_write>
    si5351_write(baseaddr + 4, P1 & 0xFF);
 8000b78:	7bfb      	ldrb	r3, [r7, #15]
 8000b7a:	3304      	adds	r3, #4
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	4611      	mov	r1, r2
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff8f 	bl	8000aa8 <si5351_write>
    si5351_write(baseaddr + 5, ((P3 >> 12) & 0xF0) | ((P2 >> 16) & 0xF));
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	3305      	adds	r3, #5
 8000b8e:	b2d8      	uxtb	r0, r3
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	131b      	asrs	r3, r3, #12
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	f023 030f 	bic.w	r3, r3, #15
 8000b9a:	b25a      	sxtb	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	141b      	asrs	r3, r3, #16
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	f003 030f 	and.w	r3, r3, #15
 8000ba6:	b25b      	sxtb	r3, r3
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f7ff ff7a 	bl	8000aa8 <si5351_write>
    si5351_write(baseaddr + 6, (P2 >> 8) & 0xFF);
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
 8000bb6:	3306      	adds	r3, #6
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	121b      	asrs	r3, r3, #8
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4610      	mov	r0, r2
 8000bc4:	f7ff ff70 	bl	8000aa8 <si5351_write>
    si5351_write(baseaddr + 7, P2 & 0xFF);
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
 8000bca:	3307      	adds	r3, #7
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff67 	bl	8000aa8 <si5351_write>
}
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

//-----[ Prototypes For All User Internal Functions ]-----

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	4a13      	ldr	r2, [pc, #76]	@ (8000c44 <I2C_LCD_ExpanderWrite+0x60>)
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	4413      	add	r3, r2
 8000bfc:	785a      	ldrb	r2, [r3, #1]
 8000bfe:	79bb      	ldrb	r3, [r7, #6]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	490f      	ldr	r1, [pc, #60]	@ (8000c48 <I2C_LCD_ExpanderWrite+0x64>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	440b      	add	r3, r1
 8000c14:	3304      	adds	r3, #4
 8000c16:	6818      	ldr	r0, [r3, #0]
 8000c18:	79fa      	ldrb	r2, [r7, #7]
 8000c1a:	490b      	ldr	r1, [pc, #44]	@ (8000c48 <I2C_LCD_ExpanderWrite+0x64>)
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	4413      	add	r3, r2
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	440b      	add	r3, r1
 8000c26:	3308      	adds	r3, #8
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	b299      	uxth	r1, r3
 8000c2e:	f107 020f 	add.w	r2, r7, #15
 8000c32:	2364      	movs	r3, #100	@ 0x64
 8000c34:	9300      	str	r3, [sp, #0]
 8000c36:	2301      	movs	r3, #1
 8000c38:	f006 f888 	bl	8006d4c <HAL_I2C_Master_Transmit>
}
 8000c3c:	bf00      	nop
 8000c3e:	3710      	adds	r7, #16
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	240000f0 	.word	0x240000f0
 8000c48:	0800e73c 	.word	0x0800e73c

08000c4c <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	460a      	mov	r2, r1
 8000c56:	71fb      	strb	r3, [r7, #7]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8000c5c:	79bb      	ldrb	r3, [r7, #6]
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4611      	mov	r1, r2
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ffbb 	bl	8000be4 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8000c6e:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <I2C_LCD_EnPulse+0xac>)
 8000c70:	689b      	ldr	r3, [r3, #8]
 8000c72:	617b      	str	r3, [r7, #20]
 8000c74:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <I2C_LCD_EnPulse+0xb0>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a21      	ldr	r2, [pc, #132]	@ (8000d00 <I2C_LCD_EnPulse+0xb4>)
 8000c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7e:	0c9b      	lsrs	r3, r3, #18
 8000c80:	005a      	lsls	r2, r3, #1
 8000c82:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <I2C_LCD_EnPulse+0xb0>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	491e      	ldr	r1, [pc, #120]	@ (8000d00 <I2C_LCD_EnPulse+0xb4>)
 8000c88:	fba1 1303 	umull	r1, r3, r1, r3
 8000c8c:	0c9b      	lsrs	r3, r3, #18
 8000c8e:	085b      	lsrs	r3, r3, #1
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <I2C_LCD_EnPulse+0xac>)
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	1ad3      	subs	r3, r2, r3
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	d8f8      	bhi.n	8000c94 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	f023 0304 	bic.w	r3, r3, #4
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	4611      	mov	r1, r2
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff98 	bl	8000be4 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8000cb4:	4b10      	ldr	r3, [pc, #64]	@ (8000cf8 <I2C_LCD_EnPulse+0xac>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <I2C_LCD_EnPulse+0xb0>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <I2C_LCD_EnPulse+0xb4>)
 8000cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc4:	0c9b      	lsrs	r3, r3, #18
 8000cc6:	2232      	movs	r2, #50	@ 0x32
 8000cc8:	fb03 f202 	mul.w	r2, r3, r2
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <I2C_LCD_EnPulse+0xb0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	490b      	ldr	r1, [pc, #44]	@ (8000d00 <I2C_LCD_EnPulse+0xb4>)
 8000cd2:	fba1 1303 	umull	r1, r3, r1, r3
 8000cd6:	0c9b      	lsrs	r3, r3, #18
 8000cd8:	085b      	lsrs	r3, r3, #1
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <I2C_LCD_EnPulse+0xac>)
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d8f8      	bhi.n	8000cde <I2C_LCD_EnPulse+0x92>
}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010
 8000cfc:	2400001c 	.word	0x2400001c
 8000d00:	431bde83 	.word	0x431bde83

08000d04 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	460a      	mov	r2, r1
 8000d0e:	71fb      	strb	r3, [r7, #7]
 8000d10:	4613      	mov	r3, r2
 8000d12:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8000d14:	79ba      	ldrb	r2, [r7, #6]
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff ff62 	bl	8000be4 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8000d20:	79ba      	ldrb	r2, [r7, #6]
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff90 	bl	8000c4c <I2C_LCD_EnPulse>
}
 8000d2c:	bf00      	nop
 8000d2e:	3708      	adds	r7, #8
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
 8000d3e:	460b      	mov	r3, r1
 8000d40:	71bb      	strb	r3, [r7, #6]
 8000d42:	4613      	mov	r3, r2
 8000d44:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	f023 030f 	bic.w	r3, r3, #15
 8000d4c:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8000d4e:	79bb      	ldrb	r3, [r7, #6]
 8000d50:	011b      	lsls	r3, r3, #4
 8000d52:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8000d54:	7bfa      	ldrb	r2, [r7, #15]
 8000d56:	797b      	ldrb	r3, [r7, #5]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff ffcf 	bl	8000d04 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8000d66:	7bba      	ldrb	r2, [r7, #14]
 8000d68:	797b      	ldrb	r3, [r7, #5]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ffc6 	bl	8000d04 <I2C_LCD_Write4Bits>
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8000d90:	79b9      	ldrb	r1, [r7, #6]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	2200      	movs	r2, #0
 8000d96:	4618      	mov	r0, r3
 8000d98:	f7ff ffcc 	bl	8000d34 <I2C_LCD_Send>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8000db4:	79b9      	ldrb	r1, [r7, #6]
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	2201      	movs	r2, #1
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff ffba 	bl	8000d34 <I2C_LCD_Send>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <I2C_LCD_Init>:


//-----[ Prototypes For All User External Functions ]-----

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8000dd2:	bf00      	nop
 8000dd4:	f001 ffec 	bl	8002db0 <HAL_GetTick>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b31      	cmp	r3, #49	@ 0x31
 8000ddc:	d9fa      	bls.n	8000dd4 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2130      	movs	r1, #48	@ 0x30
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffcc 	bl	8000d80 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000de8:	2300      	movs	r3, #0
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dec:	e01f      	b.n	8000e2e <I2C_LCD_Init+0x66>
 8000dee:	4b4b      	ldr	r3, [pc, #300]	@ (8000f1c <I2C_LCD_Init+0x154>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	4b4a      	ldr	r3, [pc, #296]	@ (8000f20 <I2C_LCD_Init+0x158>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a4a      	ldr	r2, [pc, #296]	@ (8000f24 <I2C_LCD_Init+0x15c>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	0c9b      	lsrs	r3, r3, #18
 8000e00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e04:	fb03 f202 	mul.w	r2, r3, r2
 8000e08:	4b45      	ldr	r3, [pc, #276]	@ (8000f20 <I2C_LCD_Init+0x158>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4945      	ldr	r1, [pc, #276]	@ (8000f24 <I2C_LCD_Init+0x15c>)
 8000e0e:	fba1 1303 	umull	r1, r3, r1, r3
 8000e12:	0c9b      	lsrs	r3, r3, #18
 8000e14:	085b      	lsrs	r3, r3, #1
 8000e16:	1ad3      	subs	r3, r2, r3
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b40      	ldr	r3, [pc, #256]	@ (8000f1c <I2C_LCD_Init+0x154>)
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d8f8      	bhi.n	8000e1a <I2C_LCD_Init+0x52>
 8000e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d9dc      	bls.n	8000dee <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2130      	movs	r1, #48	@ 0x30
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ffa1 	bl	8000d80 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8000e3e:	2300      	movs	r3, #0
 8000e40:	623b      	str	r3, [r7, #32]
 8000e42:	e01f      	b.n	8000e84 <I2C_LCD_Init+0xbc>
 8000e44:	4b35      	ldr	r3, [pc, #212]	@ (8000f1c <I2C_LCD_Init+0x154>)
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b35      	ldr	r3, [pc, #212]	@ (8000f20 <I2C_LCD_Init+0x158>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a35      	ldr	r2, [pc, #212]	@ (8000f24 <I2C_LCD_Init+0x15c>)
 8000e50:	fba2 2303 	umull	r2, r3, r2, r3
 8000e54:	0c9b      	lsrs	r3, r3, #18
 8000e56:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e5a:	fb03 f202 	mul.w	r2, r3, r2
 8000e5e:	4b30      	ldr	r3, [pc, #192]	@ (8000f20 <I2C_LCD_Init+0x158>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4930      	ldr	r1, [pc, #192]	@ (8000f24 <I2C_LCD_Init+0x15c>)
 8000e64:	fba1 1303 	umull	r1, r3, r1, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	1ad3      	subs	r3, r2, r3
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	4b2a      	ldr	r3, [pc, #168]	@ (8000f1c <I2C_LCD_Init+0x154>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d8f8      	bhi.n	8000e70 <I2C_LCD_Init+0xa8>
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	3301      	adds	r3, #1
 8000e82:	623b      	str	r3, [r7, #32]
 8000e84:	6a3b      	ldr	r3, [r7, #32]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d9dc      	bls.n	8000e44 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2130      	movs	r1, #48	@ 0x30
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff76 	bl	8000d80 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8000e94:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <I2C_LCD_Init+0x154>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	61fb      	str	r3, [r7, #28]
 8000e9a:	4b21      	ldr	r3, [pc, #132]	@ (8000f20 <I2C_LCD_Init+0x158>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a21      	ldr	r2, [pc, #132]	@ (8000f24 <I2C_LCD_Init+0x15c>)
 8000ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea4:	0c9b      	lsrs	r3, r3, #18
 8000ea6:	2296      	movs	r2, #150	@ 0x96
 8000ea8:	fb03 f202 	mul.w	r2, r3, r2
 8000eac:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <I2C_LCD_Init+0x158>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	491c      	ldr	r1, [pc, #112]	@ (8000f24 <I2C_LCD_Init+0x15c>)
 8000eb2:	fba1 1303 	umull	r1, r3, r1, r3
 8000eb6:	0c9b      	lsrs	r3, r3, #18
 8000eb8:	085b      	lsrs	r3, r3, #1
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <I2C_LCD_Init+0x154>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d8f8      	bhi.n	8000ebe <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8000ecc:	79fb      	ldrb	r3, [r7, #7]
 8000ece:	2102      	movs	r1, #2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff55 	bl	8000d80 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2128      	movs	r1, #40	@ 0x28
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff ff50 	bl	8000d80 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	210c      	movs	r1, #12
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff4b 	bl	8000d80 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2106      	movs	r1, #6
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff46 	bl	8000d80 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8000f28 <I2C_LCD_Init+0x160>)
 8000ef8:	2104      	movs	r1, #4
 8000efa:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <I2C_LCD_Init+0x160>)
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	4413      	add	r3, r2
 8000f06:	2208      	movs	r2, #8
 8000f08:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f80d 	bl	8000f2c <I2C_LCD_Clear>
}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	@ 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	e000e010 	.word	0xe000e010
 8000f20:	2400001c 	.word	0x2400001c
 8000f24:	431bde83 	.word	0x431bde83
 8000f28:	240000f0 	.word	0x240000f0

08000f2c <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff20 	bl	8000d80 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	e01f      	b.n	8000f86 <I2C_LCD_Clear+0x5a>
 8000f46:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <I2C_LCD_Clear+0x6c>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	4b13      	ldr	r3, [pc, #76]	@ (8000f9c <I2C_LCD_Clear+0x70>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a13      	ldr	r2, [pc, #76]	@ (8000fa0 <I2C_LCD_Clear+0x74>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9b      	lsrs	r3, r3, #18
 8000f58:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f5c:	fb03 f202 	mul.w	r2, r3, r2
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <I2C_LCD_Clear+0x70>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	490e      	ldr	r1, [pc, #56]	@ (8000fa0 <I2C_LCD_Clear+0x74>)
 8000f66:	fba1 1303 	umull	r1, r3, r1, r3
 8000f6a:	0c9b      	lsrs	r3, r3, #18
 8000f6c:	085b      	lsrs	r3, r3, #1
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	60fb      	str	r3, [r7, #12]
 8000f72:	4b09      	ldr	r3, [pc, #36]	@ (8000f98 <I2C_LCD_Clear+0x6c>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d8f8      	bhi.n	8000f72 <I2C_LCD_Clear+0x46>
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d9dc      	bls.n	8000f46 <I2C_LCD_Clear+0x1a>
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	e000e010 	.word	0xe000e010
 8000f9c:	2400001c 	.word	0x2400001c
 8000fa0:	431bde83 	.word	0x431bde83

08000fa4 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b087      	sub	sp, #28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	71bb      	strb	r3, [r7, #6]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <I2C_LCD_SetCursor+0x7c>)
 8000fb8:	f107 0408 	add.w	r4, r7, #8
 8000fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	4917      	ldr	r1, [pc, #92]	@ (8001024 <I2C_LCD_SetCursor+0x80>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	440b      	add	r3, r1
 8000fd0:	330a      	adds	r3, #10
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	797a      	ldrb	r2, [r7, #5]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d90a      	bls.n	8000ff0 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	4911      	ldr	r1, [pc, #68]	@ (8001024 <I2C_LCD_SetCursor+0x80>)
 8000fde:	4613      	mov	r3, r2
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	4413      	add	r3, r2
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	440b      	add	r3, r1
 8000fe8:	330a      	adds	r3, #10
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	443b      	add	r3, r7
 8000ff8:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	79bb      	ldrb	r3, [r7, #6]
 8001000:	4413      	add	r3, r2
 8001002:	b2db      	uxtb	r3, r3
 8001004:	b25b      	sxtb	r3, r3
 8001006:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800100a:	b25b      	sxtb	r3, r3
 800100c:	b2da      	uxtb	r2, r3
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff feb4 	bl	8000d80 <I2C_LCD_Cmd>
}
 8001018:	bf00      	nop
 800101a:	371c      	adds	r7, #28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd90      	pop	{r4, r7, pc}
 8001020:	0800e6e4 	.word	0x0800e6e4
 8001024:	0800e73c 	.word	0x0800e73c

08001028 <I2C_LCD_WriteChar>:

void I2C_LCD_WriteChar(uint8_t I2C_LCD_InstanceIndex, char Ch)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	71bb      	strb	r3, [r7, #6]
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
 8001038:	79ba      	ldrb	r2, [r7, #6]
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4611      	mov	r1, r2
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff feb0 	bl	8000da4 <I2C_LCD_Data>
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <I2C_LCD_WriteString>:

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	6039      	str	r1, [r7, #0]
 8001056:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8001058:	e008      	b.n	800106c <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	1c5a      	adds	r2, r3, #1
 800105e:	603a      	str	r2, [r7, #0]
 8001060:	781a      	ldrb	r2, [r3, #0]
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4611      	mov	r1, r2
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe9c 	bl	8000da4 <I2C_LCD_Data>
    while (*Str)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1f2      	bne.n	800105a <I2C_LCD_WriteString+0xe>
    }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <I2C_LCD_Blink>:
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl &= ~LCD_CURSORON;
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
}

void I2C_LCD_Blink(uint8_t I2C_LCD_InstanceIndex)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
	I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl |= LCD_BLINKON;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4a0c      	ldr	r2, [pc, #48]	@ (80010c0 <I2C_LCD_Blink+0x40>)
 800108e:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f042 0201 	orr.w	r2, r2, #1
 8001098:	b2d1      	uxtb	r1, r2
 800109a:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <I2C_LCD_Blink+0x40>)
 800109c:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
	I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl);
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <I2C_LCD_Blink+0x40>)
 80010a4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff fe64 	bl	8000d80 <I2C_LCD_Cmd>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	240000f0 	.word	0x240000f0

080010c4 <Main_Menu>:
uint8_t value_1[4] = { 0 }; // 3 digit + null terminator
uint8_t value_2[4] = { 0 }; // 3 digit + null terminator
uint8_t value_3[4] = { 0 }; // 3 digit + null terminator

void Main_Menu(uint8_t I2C_LCD_InstanceIndex, int8_t* option)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
    static const uint8_t text_up[16] = { "   MAIN MENU!   " };
    static uint8_t text_down_left[8] = { " " };
    static uint8_t text_down_right[8] = { " " };

    if (*option == 0 || *option == 1) {
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	f993 3000 	ldrsb.w	r3, [r3]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d004      	beq.n	80010e4 <Main_Menu+0x20>
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	f993 3000 	ldrsb.w	r3, [r3]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d11a      	bne.n	800111a <Main_Menu+0x56>
        sprintf((char*)text_down_left, " SI5351 ");
 80010e4:	492b      	ldr	r1, [pc, #172]	@ (8001194 <Main_Menu+0xd0>)
 80010e6:	482c      	ldr	r0, [pc, #176]	@ (8001198 <Main_Menu+0xd4>)
 80010e8:	f00c fe50 	bl	800dd8c <siprintf>
        sprintf((char*)text_down_right, " LED PWM");
 80010ec:	492b      	ldr	r1, [pc, #172]	@ (800119c <Main_Menu+0xd8>)
 80010ee:	482c      	ldr	r0, [pc, #176]	@ (80011a0 <Main_Menu+0xdc>)
 80010f0:	f00c fe4c 	bl	800dd8c <siprintf>
        if (*option == 0) {
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	f993 3000 	ldrsb.w	r3, [r3]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d106      	bne.n	800110c <Main_Menu+0x48>
            text_down_left[0] = '>';
 80010fe:	4b26      	ldr	r3, [pc, #152]	@ (8001198 <Main_Menu+0xd4>)
 8001100:	223e      	movs	r2, #62	@ 0x3e
 8001102:	701a      	strb	r2, [r3, #0]
            text_down_right[0] = ' ';
 8001104:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <Main_Menu+0xdc>)
 8001106:	2220      	movs	r2, #32
 8001108:	701a      	strb	r2, [r3, #0]
    if (*option == 0 || *option == 1) {
 800110a:	e01e      	b.n	800114a <Main_Menu+0x86>
        } else {
            text_down_right[0] = '>';
 800110c:	4b24      	ldr	r3, [pc, #144]	@ (80011a0 <Main_Menu+0xdc>)
 800110e:	223e      	movs	r2, #62	@ 0x3e
 8001110:	701a      	strb	r2, [r3, #0]
            text_down_left[0] = ' ';
 8001112:	4b21      	ldr	r3, [pc, #132]	@ (8001198 <Main_Menu+0xd4>)
 8001114:	2220      	movs	r2, #32
 8001116:	701a      	strb	r2, [r3, #0]
    if (*option == 0 || *option == 1) {
 8001118:	e017      	b.n	800114a <Main_Menu+0x86>
        }
    } else {
        sprintf((char*)text_down_left, " ADC IN ");
 800111a:	4922      	ldr	r1, [pc, #136]	@ (80011a4 <Main_Menu+0xe0>)
 800111c:	481e      	ldr	r0, [pc, #120]	@ (8001198 <Main_Menu+0xd4>)
 800111e:	f00c fe35 	bl	800dd8c <siprintf>
        sprintf((char*)text_down_right, "        ");
 8001122:	4921      	ldr	r1, [pc, #132]	@ (80011a8 <Main_Menu+0xe4>)
 8001124:	481e      	ldr	r0, [pc, #120]	@ (80011a0 <Main_Menu+0xdc>)
 8001126:	f00c fe31 	bl	800dd8c <siprintf>
        if (*option == 2 || *option == 3) {
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f993 3000 	ldrsb.w	r3, [r3]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d004      	beq.n	800113e <Main_Menu+0x7a>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f993 3000 	ldrsb.w	r3, [r3]
 800113a:	2b03      	cmp	r3, #3
 800113c:	d105      	bne.n	800114a <Main_Menu+0x86>
            text_down_left[0] = '>';
 800113e:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <Main_Menu+0xd4>)
 8001140:	223e      	movs	r2, #62	@ 0x3e
 8001142:	701a      	strb	r2, [r3, #0]
            *option = 2;
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	2202      	movs	r2, #2
 8001148:	701a      	strb	r2, [r3, #0]
        }
    }

    I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 0);
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	2200      	movs	r2, #0
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff27 	bl	8000fa4 <I2C_LCD_SetCursor>
    I2C_LCD_WriteString(I2C_LCD_InstanceIndex, text_up);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4914      	ldr	r1, [pc, #80]	@ (80011ac <Main_Menu+0xe8>)
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff ff76 	bl	800104c <I2C_LCD_WriteString>

    I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 1);
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	2201      	movs	r2, #1
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff ff1c 	bl	8000fa4 <I2C_LCD_SetCursor>
    I2C_LCD_WriteString(I2C_LCD_InstanceIndex, text_down_left);
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	490a      	ldr	r1, [pc, #40]	@ (8001198 <Main_Menu+0xd4>)
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff6b 	bl	800104c <I2C_LCD_WriteString>
    I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 8, 1);
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	2201      	movs	r2, #1
 800117a:	2108      	movs	r1, #8
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff ff11 	bl	8000fa4 <I2C_LCD_SetCursor>
    I2C_LCD_WriteString(I2C_LCD_InstanceIndex, text_down_right);
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4906      	ldr	r1, [pc, #24]	@ (80011a0 <Main_Menu+0xdc>)
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff60 	bl	800104c <I2C_LCD_WriteString>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	0800e6f4 	.word	0x0800e6f4
 8001198:	24000004 	.word	0x24000004
 800119c:	0800e700 	.word	0x0800e700
 80011a0:	2400000c 	.word	0x2400000c
 80011a4:	0800e70c 	.word	0x0800e70c
 80011a8:	0800e718 	.word	0x0800e718
 80011ac:	0800e748 	.word	0x0800e748

080011b0 <Set_Si5351>:

void Set_Si5351(uint8_t I2C_LCD_InstanceIndex, int8_t counter, int freq_target, uint8_t flag)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	603a      	str	r2, [r7, #0]
 80011b8:	461a      	mov	r2, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
 80011be:	460b      	mov	r3, r1
 80011c0:	71bb      	strb	r3, [r7, #6]
 80011c2:	4613      	mov	r3, r2
 80011c4:	717b      	strb	r3, [r7, #5]
    static const uint8_t text[16] = { "   SET SI5351   " };
    static const uint8_t ok[3] = { "-YN" };
    static const uint8_t hz[2] = { "Hz" };

    // Menggunakan snprintf untuk format angka dengan leading zeros
    snprintf((char*)value_1, 4, "%03lu", freq_target / 1000000);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	4a72      	ldr	r2, [pc, #456]	@ (8001394 <Set_Si5351+0x1e4>)
 80011ca:	fb82 1203 	smull	r1, r2, r2, r3
 80011ce:	1492      	asrs	r2, r2, #18
 80011d0:	17db      	asrs	r3, r3, #31
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	4a70      	ldr	r2, [pc, #448]	@ (8001398 <Set_Si5351+0x1e8>)
 80011d6:	2104      	movs	r1, #4
 80011d8:	4870      	ldr	r0, [pc, #448]	@ (800139c <Set_Si5351+0x1ec>)
 80011da:	f00c fda3 	bl	800dd24 <sniprintf>
    snprintf((char*)value_2, 4, "%03lu", (freq_target % 1000000) / 1000);
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	4b6c      	ldr	r3, [pc, #432]	@ (8001394 <Set_Si5351+0x1e4>)
 80011e2:	fb83 1302 	smull	r1, r3, r3, r2
 80011e6:	1499      	asrs	r1, r3, #18
 80011e8:	17d3      	asrs	r3, r2, #31
 80011ea:	1acb      	subs	r3, r1, r3
 80011ec:	496c      	ldr	r1, [pc, #432]	@ (80013a0 <Set_Si5351+0x1f0>)
 80011ee:	fb01 f303 	mul.w	r3, r1, r3
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	4a6b      	ldr	r2, [pc, #428]	@ (80013a4 <Set_Si5351+0x1f4>)
 80011f6:	fb82 1203 	smull	r1, r2, r2, r3
 80011fa:	1192      	asrs	r2, r2, #6
 80011fc:	17db      	asrs	r3, r3, #31
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	4a65      	ldr	r2, [pc, #404]	@ (8001398 <Set_Si5351+0x1e8>)
 8001202:	2104      	movs	r1, #4
 8001204:	4868      	ldr	r0, [pc, #416]	@ (80013a8 <Set_Si5351+0x1f8>)
 8001206:	f00c fd8d 	bl	800dd24 <sniprintf>
    snprintf((char*)value_3, 4, "%03lu", freq_target % 1000);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	4a65      	ldr	r2, [pc, #404]	@ (80013a4 <Set_Si5351+0x1f4>)
 800120e:	fb82 1203 	smull	r1, r2, r2, r3
 8001212:	1191      	asrs	r1, r2, #6
 8001214:	17da      	asrs	r2, r3, #31
 8001216:	1a8a      	subs	r2, r1, r2
 8001218:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800121c:	fb01 f202 	mul.w	r2, r1, r2
 8001220:	1a9a      	subs	r2, r3, r2
 8001222:	4613      	mov	r3, r2
 8001224:	4a5c      	ldr	r2, [pc, #368]	@ (8001398 <Set_Si5351+0x1e8>)
 8001226:	2104      	movs	r1, #4
 8001228:	4860      	ldr	r0, [pc, #384]	@ (80013ac <Set_Si5351+0x1fc>)
 800122a:	f00c fd7b 	bl	800dd24 <sniprintf>

    I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 0);
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff feb5 	bl	8000fa4 <I2C_LCD_SetCursor>
    I2C_LCD_WriteString(I2C_LCD_InstanceIndex, text);
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	495c      	ldr	r1, [pc, #368]	@ (80013b0 <Set_Si5351+0x200>)
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff04 	bl	800104c <I2C_LCD_WriteString>

    if (lcd_fsm_state != SET_SI5351) {
 8001244:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <Set_Si5351+0x204>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d04f      	beq.n	80012ec <Set_Si5351+0x13c>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 1);
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	2201      	movs	r2, #1
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fea6 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_1);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	4950      	ldr	r1, [pc, #320]	@ (800139c <Set_Si5351+0x1ec>)
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff fef5 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 3, 1);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2201      	movs	r2, #1
 8001266:	2103      	movs	r1, #3
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fe9b 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	212e      	movs	r1, #46	@ 0x2e
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fed8 	bl	8001028 <I2C_LCD_WriteChar>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 4, 1);
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2201      	movs	r2, #1
 800127c:	2104      	movs	r1, #4
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fe90 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_2);
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	4948      	ldr	r1, [pc, #288]	@ (80013a8 <Set_Si5351+0x1f8>)
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fedf 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 7, 1);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2201      	movs	r2, #1
 8001292:	2107      	movs	r1, #7
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe85 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	212e      	movs	r1, #46	@ 0x2e
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fec2 	bl	8001028 <I2C_LCD_WriteChar>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 8, 1);
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	2201      	movs	r2, #1
 80012a8:	2108      	movs	r1, #8
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe7a 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_3);
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	493e      	ldr	r1, [pc, #248]	@ (80013ac <Set_Si5351+0x1fc>)
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fec9 	bl	800104c <I2C_LCD_WriteString>

        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 11, 1);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2201      	movs	r2, #1
 80012be:	210b      	movs	r1, #11
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fe6f 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, hz);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	493b      	ldr	r1, [pc, #236]	@ (80013b8 <Set_Si5351+0x208>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff febe 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 13, 1);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	2201      	movs	r2, #1
 80012d4:	210d      	movs	r1, #13
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff fe64 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, ok);
 80012dc:	79fb      	ldrb	r3, [r7, #7]
 80012de:	4937      	ldr	r1, [pc, #220]	@ (80013bc <Set_Si5351+0x20c>)
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff feb3 	bl	800104c <I2C_LCD_WriteString>
        lcd_fsm_state = SET_SI5351;
 80012e6:	4b33      	ldr	r3, [pc, #204]	@ (80013b4 <Set_Si5351+0x204>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	701a      	strb	r2, [r3, #0]
    }

    if (flag) {
 80012ec:	797b      	ldrb	r3, [r7, #5]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d041      	beq.n	8001376 <Set_Si5351+0x1c6>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 1);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2201      	movs	r2, #1
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fe53 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_1);
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	4926      	ldr	r1, [pc, #152]	@ (800139c <Set_Si5351+0x1ec>)
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fea2 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 3, 1);
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	2201      	movs	r2, #1
 800130c:	2103      	movs	r1, #3
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe48 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	212e      	movs	r1, #46	@ 0x2e
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fe85 	bl	8001028 <I2C_LCD_WriteChar>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 4, 1);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2201      	movs	r2, #1
 8001322:	2104      	movs	r1, #4
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe3d 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_2);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	491e      	ldr	r1, [pc, #120]	@ (80013a8 <Set_Si5351+0x1f8>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fe8c 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 7, 1);
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	2201      	movs	r2, #1
 8001338:	2107      	movs	r1, #7
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe32 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	212e      	movs	r1, #46	@ 0x2e
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe6f 	bl	8001028 <I2C_LCD_WriteChar>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 8, 1);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	2201      	movs	r2, #1
 800134e:	2108      	movs	r1, #8
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fe27 	bl	8000fa4 <I2C_LCD_SetCursor>

        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_3);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4914      	ldr	r1, [pc, #80]	@ (80013ac <Set_Si5351+0x1fc>)
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe76 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, counter, 1);
 8001360:	79b9      	ldrb	r1, [r7, #6]
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2201      	movs	r2, #1
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fe1c 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_Blink(I2C_LCD_InstanceIndex);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe86 	bl	8001080 <I2C_LCD_Blink>
    } else {
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, counter, 1);
        I2C_LCD_Blink(I2C_LCD_InstanceIndex);
    }
    return;
 8001374:	e00a      	b.n	800138c <Set_Si5351+0x1dc>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, counter, 1);
 8001376:	79b9      	ldrb	r1, [r7, #6]
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	2201      	movs	r2, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe11 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_Blink(I2C_LCD_InstanceIndex);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff fe7b 	bl	8001080 <I2C_LCD_Blink>
    return;
 800138a:	bf00      	nop
}
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	431bde83 	.word	0x431bde83
 8001398:	0800e724 	.word	0x0800e724
 800139c:	240000f4 	.word	0x240000f4
 80013a0:	000f4240 	.word	0x000f4240
 80013a4:	10624dd3 	.word	0x10624dd3
 80013a8:	240000f8 	.word	0x240000f8
 80013ac:	240000fc 	.word	0x240000fc
 80013b0:	0800e758 	.word	0x0800e758
 80013b4:	24000002 	.word	0x24000002
 80013b8:	0800e768 	.word	0x0800e768
 80013bc:	0800e76c 	.word	0x0800e76c

080013c0 <Run_Si5351>:

void Run_Si5351(uint8_t I2C_LCD_InstanceIndex)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
    static const uint8_t text_run[3] = { "F:" };
    static const uint8_t hz[3] = { "Hz" };
    static const uint8_t stop[16] = { "      STOP      " };

    if (lcd_fsm_state != RUN_SI5351) {
 80013ca:	4b34      	ldr	r3, [pc, #208]	@ (800149c <Run_Si5351+0xdc>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b0a      	cmp	r3, #10
 80013d0:	d05f      	beq.n	8001492 <Run_Si5351+0xd2>
        I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fda9 	bl	8000f2c <I2C_LCD_Clear>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 0);
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	2200      	movs	r2, #0
 80013de:	2100      	movs	r1, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fddf 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, text_run);
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	492d      	ldr	r1, [pc, #180]	@ (80014a0 <Run_Si5351+0xe0>)
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fe2e 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 2, 0);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2200      	movs	r2, #0
 80013f4:	2102      	movs	r1, #2
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fdd4 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_1);
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	4929      	ldr	r1, [pc, #164]	@ (80014a4 <Run_Si5351+0xe4>)
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fe23 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 5, 0);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	2200      	movs	r2, #0
 800140a:	2105      	movs	r1, #5
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff fdc9 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	212e      	movs	r1, #46	@ 0x2e
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe06 	bl	8001028 <I2C_LCD_WriteChar>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 6, 0);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	2200      	movs	r2, #0
 8001420:	2106      	movs	r1, #6
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fdbe 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_2);
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	491f      	ldr	r1, [pc, #124]	@ (80014a8 <Run_Si5351+0xe8>)
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fe0d 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 9, 0);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	2200      	movs	r2, #0
 8001436:	2109      	movs	r1, #9
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff fdb3 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	212e      	movs	r1, #46	@ 0x2e
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fdf0 	bl	8001028 <I2C_LCD_WriteChar>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 10, 0);
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	2200      	movs	r2, #0
 800144c:	210a      	movs	r1, #10
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff fda8 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value_3);
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	4915      	ldr	r1, [pc, #84]	@ (80014ac <Run_Si5351+0xec>)
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fdf7 	bl	800104c <I2C_LCD_WriteString>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 13, 0);
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2200      	movs	r2, #0
 8001462:	210d      	movs	r1, #13
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fd9d 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, hz);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	4910      	ldr	r1, [pc, #64]	@ (80014b0 <Run_Si5351+0xf0>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fdec 	bl	800104c <I2C_LCD_WriteString>
        lcd_fsm_state = RUN_SI5351;
 8001474:	4b09      	ldr	r3, [pc, #36]	@ (800149c <Run_Si5351+0xdc>)
 8001476:	220a      	movs	r2, #10
 8001478:	701a      	strb	r2, [r3, #0]

        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 1);
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2201      	movs	r2, #1
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fd8f 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, stop);
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	490a      	ldr	r1, [pc, #40]	@ (80014b4 <Run_Si5351+0xf4>)
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fdde 	bl	800104c <I2C_LCD_WriteString>
    }

    return;
 8001490:	bf00      	nop
 8001492:	bf00      	nop
}
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	24000002 	.word	0x24000002
 80014a0:	0800e770 	.word	0x0800e770
 80014a4:	240000f4 	.word	0x240000f4
 80014a8:	240000f8 	.word	0x240000f8
 80014ac:	240000fc 	.word	0x240000fc
 80014b0:	0800e774 	.word	0x0800e774
 80014b4:	0800e778 	.word	0x0800e778

080014b8 <Set_LED_Brightness>:

void Set_LED_Brightness(uint8_t I2C_LCD_InstanceIndex, int8_t pwm_counter)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	460a      	mov	r2, r1
 80014c2:	71fb      	strb	r3, [r7, #7]
 80014c4:	4613      	mov	r3, r2
 80014c6:	71bb      	strb	r3, [r7, #6]
    static const uint8_t text[16] = { "  SET LED PWM!  " };

    if (lcd_fsm_state != SET_LED_BRIGHTNESS) {
 80014c8:	4b30      	ldr	r3, [pc, #192]	@ (800158c <Set_LED_Brightness+0xd4>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d013      	beq.n	80014f8 <Set_LED_Brightness+0x40>
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 0);
 80014d0:	79fb      	ldrb	r3, [r7, #7]
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd64 	bl	8000fa4 <I2C_LCD_SetCursor>
        I2C_LCD_WriteString(I2C_LCD_InstanceIndex, text);
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	492c      	ldr	r1, [pc, #176]	@ (8001590 <Set_LED_Brightness+0xd8>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fdb3 	bl	800104c <I2C_LCD_WriteString>
        lcd_fsm_state = SET_LED_BRIGHTNESS;
 80014e6:	4b29      	ldr	r3, [pc, #164]	@ (800158c <Set_LED_Brightness+0xd4>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
        I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 1);
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	2201      	movs	r2, #1
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fd56 	bl	8000fa4 <I2C_LCD_SetCursor>
    }

    I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 1);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2201      	movs	r2, #1
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd50 	bl	8000fa4 <I2C_LCD_SetCursor>

    if (pwm_counter == 0) {
 8001504:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d10e      	bne.n	800152a <Set_LED_Brightness+0x72>
        // Display dots for 0%
        for (uint8_t i = 0; i < 16; i++) {
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e007      	b.n	8001522 <Set_LED_Brightness+0x6a>
            I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	212e      	movs	r1, #46	@ 0x2e
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd86 	bl	8001028 <I2C_LCD_WriteChar>
        for (uint8_t i = 0; i < 16; i++) {
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	3301      	adds	r3, #1
 8001520:	73fb      	strb	r3, [r7, #15]
 8001522:	7bfb      	ldrb	r3, [r7, #15]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d9f4      	bls.n	8001512 <Set_LED_Brightness+0x5a>
                I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
            }
        }
    }

    return;
 8001528:	e02c      	b.n	8001584 <Set_LED_Brightness+0xcc>
    } else if (pwm_counter == 16) {
 800152a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800152e:	2b10      	cmp	r3, #16
 8001530:	d10e      	bne.n	8001550 <Set_LED_Brightness+0x98>
        for (uint8_t i = 0; i < 16; i++) {
 8001532:	2300      	movs	r3, #0
 8001534:	73bb      	strb	r3, [r7, #14]
 8001536:	e007      	b.n	8001548 <Set_LED_Brightness+0x90>
            I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '#');
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2123      	movs	r1, #35	@ 0x23
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fd73 	bl	8001028 <I2C_LCD_WriteChar>
        for (uint8_t i = 0; i < 16; i++) {
 8001542:	7bbb      	ldrb	r3, [r7, #14]
 8001544:	3301      	adds	r3, #1
 8001546:	73bb      	strb	r3, [r7, #14]
 8001548:	7bbb      	ldrb	r3, [r7, #14]
 800154a:	2b0f      	cmp	r3, #15
 800154c:	d9f4      	bls.n	8001538 <Set_LED_Brightness+0x80>
    return;
 800154e:	e019      	b.n	8001584 <Set_LED_Brightness+0xcc>
        for (uint8_t i = 0; i < 16; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	737b      	strb	r3, [r7, #13]
 8001554:	e012      	b.n	800157c <Set_LED_Brightness+0xc4>
            if (i < pwm_counter) {
 8001556:	7b7a      	ldrb	r2, [r7, #13]
 8001558:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800155c:	429a      	cmp	r2, r3
 800155e:	da05      	bge.n	800156c <Set_LED_Brightness+0xb4>
                I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '#');
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	2123      	movs	r1, #35	@ 0x23
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fd5f 	bl	8001028 <I2C_LCD_WriteChar>
 800156a:	e004      	b.n	8001576 <Set_LED_Brightness+0xbe>
                I2C_LCD_WriteChar(I2C_LCD_InstanceIndex, '.');
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	212e      	movs	r1, #46	@ 0x2e
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd59 	bl	8001028 <I2C_LCD_WriteChar>
        for (uint8_t i = 0; i < 16; i++) {
 8001576:	7b7b      	ldrb	r3, [r7, #13]
 8001578:	3301      	adds	r3, #1
 800157a:	737b      	strb	r3, [r7, #13]
 800157c:	7b7b      	ldrb	r3, [r7, #13]
 800157e:	2b0f      	cmp	r3, #15
 8001580:	d9e9      	bls.n	8001556 <Set_LED_Brightness+0x9e>
    return;
 8001582:	bf00      	nop
}
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	24000002 	.word	0x24000002
 8001590:	0800e788 	.word	0x0800e788

08001594 <Get_ADC>:

void Get_ADC(uint8_t I2C_LCD_InstanceIndex, uint16_t data)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	460a      	mov	r2, r1
 800159e:	71fb      	strb	r3, [r7, #7]
 80015a0:	4613      	mov	r3, r2
 80015a2:	80bb      	strh	r3, [r7, #4]
    // if (lcd_fsm_state != GET_ADC) {
    //     I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 0);
    //     I2C_LCD_WriteString(I2C_LCD_InstanceIndex, text);
    //     lcd_fsm_state = GET_ADC;
    // }
    I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 0, 1);
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2201      	movs	r2, #1
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fcfa 	bl	8000fa4 <I2C_LCD_SetCursor>
    I2C_LCD_WriteString(I2C_LCD_InstanceIndex, "ADC: ");
 80015b0:	79fb      	ldrb	r3, [r7, #7]
 80015b2:	490c      	ldr	r1, [pc, #48]	@ (80015e4 <Get_ADC+0x50>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fd49 	bl	800104c <I2C_LCD_WriteString>
    I2C_LCD_SetCursor(I2C_LCD_InstanceIndex, 5, 1);
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	2201      	movs	r2, #1
 80015be:	2105      	movs	r1, #5
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fcef 	bl	8000fa4 <I2C_LCD_SetCursor>
    sprintf((char*)value, "%04d", data);
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4907      	ldr	r1, [pc, #28]	@ (80015e8 <Get_ADC+0x54>)
 80015cc:	4807      	ldr	r0, [pc, #28]	@ (80015ec <Get_ADC+0x58>)
 80015ce:	f00c fbdd 	bl	800dd8c <siprintf>
    I2C_LCD_WriteString(I2C_LCD_InstanceIndex, value);
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	4905      	ldr	r1, [pc, #20]	@ (80015ec <Get_ADC+0x58>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fd38 	bl	800104c <I2C_LCD_WriteString>
    return;
 80015dc:	bf00      	nop
}
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	0800e72c 	.word	0x0800e72c
 80015e8:	0800e734 	.word	0x0800e734
 80015ec:	24000014 	.word	0x24000014

080015f0 <LCD_Routine>:

void LCD_Routine(uint8_t I2C_LCD_InstanceIndex, int8_t counter, int8_t* option, int freq_target, uint8_t flag, int8_t pwm_value, uint16_t data)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60ba      	str	r2, [r7, #8]
 80015f8:	607b      	str	r3, [r7, #4]
 80015fa:	4603      	mov	r3, r0
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	460b      	mov	r3, r1
 8001600:	73bb      	strb	r3, [r7, #14]
    switch (fsm_state) {
 8001602:	4b25      	ldr	r3, [pc, #148]	@ (8001698 <LCD_Routine+0xa8>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	2b0a      	cmp	r3, #10
 8001608:	dc1c      	bgt.n	8001644 <LCD_Routine+0x54>
 800160a:	2b00      	cmp	r3, #0
 800160c:	db3e      	blt.n	800168c <LCD_Routine+0x9c>
 800160e:	2b0a      	cmp	r3, #10
 8001610:	d83c      	bhi.n	800168c <LCD_Routine+0x9c>
 8001612:	a201      	add	r2, pc, #4	@ (adr r2, 8001618 <LCD_Routine+0x28>)
 8001614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001618:	08001655 	.word	0x08001655
 800161c:	0800166f 	.word	0x0800166f
 8001620:	0800167f 	.word	0x0800167f
 8001624:	0800168d 	.word	0x0800168d
 8001628:	0800168d 	.word	0x0800168d
 800162c:	0800168d 	.word	0x0800168d
 8001630:	0800168d 	.word	0x0800168d
 8001634:	0800168d 	.word	0x0800168d
 8001638:	0800168d 	.word	0x0800168d
 800163c:	0800168d 	.word	0x0800168d
 8001640:	08001665 	.word	0x08001665
 8001644:	2b63      	cmp	r3, #99	@ 0x63
 8001646:	d121      	bne.n	800168c <LCD_Routine+0x9c>
    case MAIN_MENU:
        Main_Menu(I2C_LCD_InstanceIndex, option);
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	68b9      	ldr	r1, [r7, #8]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fd39 	bl	80010c4 <Main_Menu>
        break;
 8001652:	e01c      	b.n	800168e <LCD_Routine+0x9e>

    case SET_SI5351:
        Set_Si5351(I2C_LCD_InstanceIndex, counter, freq_target, flag);
 8001654:	7e3b      	ldrb	r3, [r7, #24]
 8001656:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800165a:	7bf8      	ldrb	r0, [r7, #15]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	f7ff fda7 	bl	80011b0 <Set_Si5351>
        break;
 8001662:	e014      	b.n	800168e <LCD_Routine+0x9e>

    case RUN_SI5351:
        Run_Si5351(I2C_LCD_InstanceIndex);
 8001664:	7bfb      	ldrb	r3, [r7, #15]
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff feaa 	bl	80013c0 <Run_Si5351>
        break;
 800166c:	e00f      	b.n	800168e <LCD_Routine+0x9e>

    case SET_LED_BRIGHTNESS:
        Set_LED_Brightness(I2C_LCD_InstanceIndex, pwm_value);
 800166e:	f997 201c 	ldrsb.w	r2, [r7, #28]
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff1e 	bl	80014b8 <Set_LED_Brightness>
        break;
 800167c:	e007      	b.n	800168e <LCD_Routine+0x9e>

    case GET_ADC:
        Get_ADC(I2C_LCD_InstanceIndex, data);
 800167e:	8c3a      	ldrh	r2, [r7, #32]
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	4611      	mov	r1, r2
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff85 	bl	8001594 <Get_ADC>
        break;
 800168a:	e000      	b.n	800168e <LCD_Routine+0x9e>

    default:
        break;
 800168c:	bf00      	nop
    }
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	24000000 	.word	0x24000000

0800169c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	80fb      	strh	r3, [r7, #6]
    static uint32_t last_interrupt_time = 0;
    uint32_t interrupt_time = HAL_GetTick();
 80016a6:	f001 fb83 	bl	8002db0 <HAL_GetTick>
 80016aa:	60f8      	str	r0, [r7, #12]

    if (interrupt_time - last_interrupt_time > 200) {
 80016ac:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <HAL_GPIO_EXTI_Callback+0x50>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2bc8      	cmp	r3, #200	@ 0xc8
 80016b6:	d912      	bls.n	80016de <HAL_GPIO_EXTI_Callback+0x42>
        value_k1 = !value_k1;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	4b09      	ldr	r3, [pc, #36]	@ (80016f0 <HAL_GPIO_EXTI_Callback+0x54>)
 80016ca:	701a      	strb	r2, [r3, #0]
        last_value = 0;
 80016cc:	4b09      	ldr	r3, [pc, #36]	@ (80016f4 <HAL_GPIO_EXTI_Callback+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
        encoder_value = __HAL_TIM_SET_COUNTER(&htim2, 0);
 80016d2:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_GPIO_EXTI_Callback+0x5c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	6253      	str	r3, [r2, #36]	@ 0x24
 80016da:	4a08      	ldr	r2, [pc, #32]	@ (80016fc <HAL_GPIO_EXTI_Callback+0x60>)
 80016dc:	6013      	str	r3, [r2, #0]
    }

    last_interrupt_time = interrupt_time;
 80016de:	4a03      	ldr	r2, [pc, #12]	@ (80016ec <HAL_GPIO_EXTI_Callback+0x50>)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	24000328 	.word	0x24000328
 80016f0:	2400030c 	.word	0x2400030c
 80016f4:	24000314 	.word	0x24000314
 80016f8:	24000228 	.word	0x24000228
 80016fc:	24000308 	.word	0x24000308

08001700 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
    encoder_value = __HAL_TIM_GET_COUNTER(htim);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <HAL_TIM_IC_CaptureCallback+0x20>)
 8001710:	6013      	str	r3, [r2, #0]
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	24000308 	.word	0x24000308

08001724 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
    adc_data_dma = adc_data_raw;
 800172c:	4b05      	ldr	r3, [pc, #20]	@ (8001744 <HAL_ADC_ConvCpltCallback+0x20>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29a      	uxth	r2, r3
 8001732:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <HAL_ADC_ConvCpltCallback+0x24>)
 8001734:	801a      	strh	r2, [r3, #0]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	24000320 	.word	0x24000320
 8001748:	24000324 	.word	0x24000324
 800174c:	00000000 	.word	0x00000000

08001750 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b093      	sub	sp, #76	@ 0x4c
 8001754:	af04      	add	r7, sp, #16

    /* USER CODE BEGIN 1 */
    uint8_t MSG[50] = { '\0' };
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	222e      	movs	r2, #46	@ 0x2e
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f00c fb32 	bl	800ddcc <memset>
    /* USER CODE END 1 */

    /* MPU Configuration--------------------------------------------------------*/
    MPU_Config();
 8001768:	f000 fe92 	bl	8002490 <MPU_Config>

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800176c:	f001 fa9a 	bl	8002ca4 <HAL_Init>

    /* USER CODE BEGIN Init */
    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8001770:	f000 fa56 	bl	8001c20 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001774:	f000 fcf0 	bl	8002158 <MX_GPIO_Init>
    MX_DMA_Init();
 8001778:	f000 fcce 	bl	8002118 <MX_DMA_Init>
    MX_UART4_Init();
 800177c:	f000 fc80 	bl	8002080 <MX_UART4_Init>
    MX_I2C1_Init();
 8001780:	f000 fb3e 	bl	8001e00 <MX_I2C1_Init>
    MX_TIM2_Init();
 8001784:	f000 fc28 	bl	8001fd8 <MX_TIM2_Init>
    MX_TIM1_Init();
 8001788:	f000 fb7a 	bl	8001e80 <MX_TIM1_Init>
    MX_ADC1_Init();
 800178c:	f000 fabc 	bl	8001d08 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */
    I2C_LCD_Init(MyI2C_LCD);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fb19 	bl	8000dc8 <I2C_LCD_Init>
    HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8001796:	213c      	movs	r1, #60	@ 0x3c
 8001798:	48a1      	ldr	r0, [pc, #644]	@ (8001a20 <main+0x2d0>)
 800179a:	f00a f899 	bl	800b8d0 <HAL_TIM_Encoder_Start_IT>
    si5351_Init(0);
 800179e:	2000      	movs	r0, #0
 80017a0:	f7fe ff66 	bl	8000670 <si5351_Init>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80017a4:	2100      	movs	r1, #0
 80017a6:	489f      	ldr	r0, [pc, #636]	@ (8001a24 <main+0x2d4>)
 80017a8:	f009 fede 	bl	800b568 <HAL_TIM_PWM_Start>
    HAL_ADC_Start_DMA(&hadc1, &adc_data_raw, 1);
 80017ac:	2201      	movs	r2, #1
 80017ae:	499e      	ldr	r1, [pc, #632]	@ (8001a28 <main+0x2d8>)
 80017b0:	489e      	ldr	r0, [pc, #632]	@ (8001a2c <main+0x2dc>)
 80017b2:	f001 fef5 	bl	80035a0 <HAL_ADC_Start_DMA>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        //-- Finite State Machine
        switch (fsm_state) {
 80017b6:	4b9e      	ldr	r3, [pc, #632]	@ (8001a30 <main+0x2e0>)
 80017b8:	881b      	ldrh	r3, [r3, #0]
 80017ba:	2b0a      	cmp	r3, #10
 80017bc:	dc1e      	bgt.n	80017fc <main+0xac>
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f2c0 81c8 	blt.w	8001b54 <main+0x404>
 80017c4:	2b0a      	cmp	r3, #10
 80017c6:	f200 81c5 	bhi.w	8001b54 <main+0x404>
 80017ca:	a201      	add	r2, pc, #4	@ (adr r2, 80017d0 <main+0x80>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	08001865 	.word	0x08001865
 80017d4:	08001aef 	.word	0x08001aef
 80017d8:	08001b39 	.word	0x08001b39
 80017dc:	08001b55 	.word	0x08001b55
 80017e0:	08001b55 	.word	0x08001b55
 80017e4:	08001b55 	.word	0x08001b55
 80017e8:	08001b55 	.word	0x08001b55
 80017ec:	08001b55 	.word	0x08001b55
 80017f0:	08001b55 	.word	0x08001b55
 80017f4:	08001b55 	.word	0x08001b55
 80017f8:	08001acd 	.word	0x08001acd
 80017fc:	2b63      	cmp	r3, #99	@ 0x63
 80017fe:	f040 81a9 	bne.w	8001b54 <main+0x404>
        case MAIN_MENU:
            Option_Get_Value();
 8001802:	f000 fe09 	bl	8002418 <Option_Get_Value>
            if (Is_Value_K1_Changed()) {
 8001806:	f000 fd3d 	bl	8002284 <Is_Value_K1_Changed>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 81af 	beq.w	8001b70 <main+0x420>
                if (option == 0) {
 8001812:	4b88      	ldr	r3, [pc, #544]	@ (8001a34 <main+0x2e4>)
 8001814:	f993 3000 	ldrsb.w	r3, [r3]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d103      	bne.n	8001824 <main+0xd4>
                    fsm_state = SET_SI5351;
 800181c:	4b84      	ldr	r3, [pc, #528]	@ (8001a30 <main+0x2e0>)
 800181e:	2200      	movs	r2, #0
 8001820:	801a      	strh	r2, [r3, #0]
                    HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
                } else {
                    fsm_state = MAIN_MENU;
                }
            }
            break;
 8001822:	e1a5      	b.n	8001b70 <main+0x420>
                } else if (option == 1) {
 8001824:	4b83      	ldr	r3, [pc, #524]	@ (8001a34 <main+0x2e4>)
 8001826:	f993 3000 	ldrsb.w	r3, [r3]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d108      	bne.n	8001840 <main+0xf0>
                    fsm_state = SET_LED_BRIGHTNESS;
 800182e:	4b80      	ldr	r3, [pc, #512]	@ (8001a30 <main+0x2e0>)
 8001830:	2201      	movs	r2, #1
 8001832:	801a      	strh	r2, [r3, #0]
                    HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	2102      	movs	r1, #2
 8001838:	487f      	ldr	r0, [pc, #508]	@ (8001a38 <main+0x2e8>)
 800183a:	f005 f9b7 	bl	8006bac <HAL_GPIO_WritePin>
            break;
 800183e:	e197      	b.n	8001b70 <main+0x420>
                } else if (option == 2) {
 8001840:	4b7c      	ldr	r3, [pc, #496]	@ (8001a34 <main+0x2e4>)
 8001842:	f993 3000 	ldrsb.w	r3, [r3]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d108      	bne.n	800185c <main+0x10c>
                    fsm_state = GET_ADC;
 800184a:	4b79      	ldr	r3, [pc, #484]	@ (8001a30 <main+0x2e0>)
 800184c:	2202      	movs	r2, #2
 800184e:	801a      	strh	r2, [r3, #0]
                    HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8001850:	2200      	movs	r2, #0
 8001852:	2102      	movs	r1, #2
 8001854:	4878      	ldr	r0, [pc, #480]	@ (8001a38 <main+0x2e8>)
 8001856:	f005 f9a9 	bl	8006bac <HAL_GPIO_WritePin>
            break;
 800185a:	e189      	b.n	8001b70 <main+0x420>
                    fsm_state = MAIN_MENU;
 800185c:	4b74      	ldr	r3, [pc, #464]	@ (8001a30 <main+0x2e0>)
 800185e:	2263      	movs	r2, #99	@ 0x63
 8001860:	801a      	strh	r2, [r3, #0]
            break;
 8001862:	e185      	b.n	8001b70 <main+0x420>

        case SET_SI5351: {
            static uint8_t change_value = 0;
            static uint8_t current_digit = 0;

            if (counter == 15 && Is_Value_K1_Changed()) {
 8001864:	4b75      	ldr	r3, [pc, #468]	@ (8001a3c <main+0x2ec>)
 8001866:	f993 3000 	ldrsb.w	r3, [r3]
 800186a:	2b0f      	cmp	r3, #15
 800186c:	d10d      	bne.n	800188a <main+0x13a>
 800186e:	f000 fd09 	bl	8002284 <Is_Value_K1_Changed>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <main+0x13a>
                fsm_state = MAIN_MENU;
 8001878:	4b6d      	ldr	r3, [pc, #436]	@ (8001a30 <main+0x2e0>)
 800187a:	2263      	movs	r2, #99	@ 0x63
 800187c:	801a      	strh	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 800187e:	2201      	movs	r2, #1
 8001880:	2102      	movs	r1, #2
 8001882:	486d      	ldr	r0, [pc, #436]	@ (8001a38 <main+0x2e8>)
 8001884:	f005 f992 	bl	8006bac <HAL_GPIO_WritePin>
 8001888:	e049      	b.n	800191e <main+0x1ce>
            } else if (counter == 14 && Is_Value_K1_Changed()) {
 800188a:	4b6c      	ldr	r3, [pc, #432]	@ (8001a3c <main+0x2ec>)
 800188c:	f993 3000 	ldrsb.w	r3, [r3]
 8001890:	2b0e      	cmp	r3, #14
 8001892:	d116      	bne.n	80018c2 <main+0x172>
 8001894:	f000 fcf6 	bl	8002284 <Is_Value_K1_Changed>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d011      	beq.n	80018c2 <main+0x172>
                si5351_SetupCLK0(freq_si5351, SI5351_DRIVE_STRENGTH_4MA);
 800189e:	4b68      	ldr	r3, [pc, #416]	@ (8001a40 <main+0x2f0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2101      	movs	r1, #1
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe ff1b 	bl	80006e0 <si5351_SetupCLK0>
                si5351_EnableOutputs(1 << 0);
 80018aa:	2001      	movs	r0, #1
 80018ac:	f7fe ff39 	bl	8000722 <si5351_EnableOutputs>
                fsm_state = RUN_SI5351;
 80018b0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a30 <main+0x2e0>)
 80018b2:	220a      	movs	r2, #10
 80018b4:	801a      	strh	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2102      	movs	r1, #2
 80018ba:	485f      	ldr	r0, [pc, #380]	@ (8001a38 <main+0x2e8>)
 80018bc:	f005 f976 	bl	8006bac <HAL_GPIO_WritePin>
 80018c0:	e02d      	b.n	800191e <main+0x1ce>
            } else if (counter < 11 && Is_Value_K1_Changed() && counter != 3 && counter != 7) {
 80018c2:	4b5e      	ldr	r3, [pc, #376]	@ (8001a3c <main+0x2ec>)
 80018c4:	f993 3000 	ldrsb.w	r3, [r3]
 80018c8:	2b0a      	cmp	r3, #10
 80018ca:	dc28      	bgt.n	800191e <main+0x1ce>
 80018cc:	f000 fcda 	bl	8002284 <Is_Value_K1_Changed>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d023      	beq.n	800191e <main+0x1ce>
 80018d6:	4b59      	ldr	r3, [pc, #356]	@ (8001a3c <main+0x2ec>)
 80018d8:	f993 3000 	ldrsb.w	r3, [r3]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d01e      	beq.n	800191e <main+0x1ce>
 80018e0:	4b56      	ldr	r3, [pc, #344]	@ (8001a3c <main+0x2ec>)
 80018e2:	f993 3000 	ldrsb.w	r3, [r3]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d019      	beq.n	800191e <main+0x1ce>
                change_value = !change_value;
 80018ea:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <main+0x2f4>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	461a      	mov	r2, r3
 80018fa:	4b52      	ldr	r3, [pc, #328]	@ (8001a44 <main+0x2f4>)
 80018fc:	701a      	strb	r2, [r3, #0]
                flag = !flag;
 80018fe:	4b52      	ldr	r3, [pc, #328]	@ (8001a48 <main+0x2f8>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	bf0c      	ite	eq
 8001906:	2301      	moveq	r3, #1
 8001908:	2300      	movne	r3, #0
 800190a:	b2db      	uxtb	r3, r3
 800190c:	461a      	mov	r2, r3
 800190e:	4b4e      	ldr	r3, [pc, #312]	@ (8001a48 <main+0x2f8>)
 8001910:	701a      	strb	r2, [r3, #0]
                current_digit = counter;
 8001912:	4b4a      	ldr	r3, [pc, #296]	@ (8001a3c <main+0x2ec>)
 8001914:	f993 3000 	ldrsb.w	r3, [r3]
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b4c      	ldr	r3, [pc, #304]	@ (8001a4c <main+0x2fc>)
 800191c:	701a      	strb	r2, [r3, #0]
            }

            if (change_value) {
 800191e:	4b49      	ldr	r3, [pc, #292]	@ (8001a44 <main+0x2f4>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80cf 	beq.w	8001ac6 <main+0x376>
                Frequency_Get_Value();
 8001928:	f000 fd00 	bl	800232c <Frequency_Get_Value>
                if (current_digit == 0) {
 800192c:	4b47      	ldr	r3, [pc, #284]	@ (8001a4c <main+0x2fc>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10c      	bne.n	800194e <main+0x1fe>
                    freq_si5351 += freq_counter_state * 100000000;
 8001934:	4b46      	ldr	r3, [pc, #280]	@ (8001a50 <main+0x300>)
 8001936:	f993 3000 	ldrsb.w	r3, [r3]
 800193a:	461a      	mov	r2, r3
 800193c:	4b45      	ldr	r3, [pc, #276]	@ (8001a54 <main+0x304>)
 800193e:	fb03 f202 	mul.w	r2, r3, r2
 8001942:	4b3f      	ldr	r3, [pc, #252]	@ (8001a40 <main+0x2f0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a3d      	ldr	r2, [pc, #244]	@ (8001a40 <main+0x2f0>)
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	e0aa      	b.n	8001aa4 <main+0x354>
                } else if (current_digit == 1) {
 800194e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a4c <main+0x2fc>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d10c      	bne.n	8001970 <main+0x220>
                    freq_si5351 += freq_counter_state * 10000000;
 8001956:	4b3e      	ldr	r3, [pc, #248]	@ (8001a50 <main+0x300>)
 8001958:	f993 3000 	ldrsb.w	r3, [r3]
 800195c:	461a      	mov	r2, r3
 800195e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a58 <main+0x308>)
 8001960:	fb03 f202 	mul.w	r2, r3, r2
 8001964:	4b36      	ldr	r3, [pc, #216]	@ (8001a40 <main+0x2f0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	4a35      	ldr	r2, [pc, #212]	@ (8001a40 <main+0x2f0>)
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e099      	b.n	8001aa4 <main+0x354>
                } else if (current_digit == 2) {
 8001970:	4b36      	ldr	r3, [pc, #216]	@ (8001a4c <main+0x2fc>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d10c      	bne.n	8001992 <main+0x242>
                    freq_si5351 += freq_counter_state * 1000000;
 8001978:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <main+0x300>)
 800197a:	f993 3000 	ldrsb.w	r3, [r3]
 800197e:	461a      	mov	r2, r3
 8001980:	4b36      	ldr	r3, [pc, #216]	@ (8001a5c <main+0x30c>)
 8001982:	fb03 f202 	mul.w	r2, r3, r2
 8001986:	4b2e      	ldr	r3, [pc, #184]	@ (8001a40 <main+0x2f0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4413      	add	r3, r2
 800198c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a40 <main+0x2f0>)
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e088      	b.n	8001aa4 <main+0x354>
                } else if (current_digit == 4) {
 8001992:	4b2e      	ldr	r3, [pc, #184]	@ (8001a4c <main+0x2fc>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b04      	cmp	r3, #4
 8001998:	d10c      	bne.n	80019b4 <main+0x264>
                    freq_si5351 += freq_counter_state * 100000;
 800199a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a50 <main+0x300>)
 800199c:	f993 3000 	ldrsb.w	r3, [r3]
 80019a0:	461a      	mov	r2, r3
 80019a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <main+0x310>)
 80019a4:	fb03 f202 	mul.w	r2, r3, r2
 80019a8:	4b25      	ldr	r3, [pc, #148]	@ (8001a40 <main+0x2f0>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4413      	add	r3, r2
 80019ae:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <main+0x2f0>)
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	e077      	b.n	8001aa4 <main+0x354>
                } else if (current_digit == 5) {
 80019b4:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <main+0x2fc>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b05      	cmp	r3, #5
 80019ba:	d10d      	bne.n	80019d8 <main+0x288>
                    freq_si5351 += freq_counter_state * 10000;
 80019bc:	4b24      	ldr	r3, [pc, #144]	@ (8001a50 <main+0x300>)
 80019be:	f993 3000 	ldrsb.w	r3, [r3]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80019c8:	fb03 f202 	mul.w	r2, r3, r2
 80019cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001a40 <main+0x2f0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a40 <main+0x2f0>)
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	e065      	b.n	8001aa4 <main+0x354>
                } else if (current_digit == 6) {
 80019d8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a4c <main+0x2fc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b06      	cmp	r3, #6
 80019de:	d10d      	bne.n	80019fc <main+0x2ac>
                    freq_si5351 += freq_counter_state * 1000;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <main+0x300>)
 80019e2:	f993 3000 	ldrsb.w	r3, [r3]
 80019e6:	461a      	mov	r2, r3
 80019e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019ec:	fb03 f202 	mul.w	r2, r3, r2
 80019f0:	4b13      	ldr	r3, [pc, #76]	@ (8001a40 <main+0x2f0>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4413      	add	r3, r2
 80019f6:	4a12      	ldr	r2, [pc, #72]	@ (8001a40 <main+0x2f0>)
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e053      	b.n	8001aa4 <main+0x354>
                } else if (current_digit == 8) {
 80019fc:	4b13      	ldr	r3, [pc, #76]	@ (8001a4c <main+0x2fc>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d12f      	bne.n	8001a64 <main+0x314>
                    freq_si5351 += freq_counter_state * 100;
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <main+0x300>)
 8001a06:	f993 3000 	ldrsb.w	r3, [r3]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2364      	movs	r3, #100	@ 0x64
 8001a0e:	fb03 f202 	mul.w	r2, r3, r2
 8001a12:	4b0b      	ldr	r3, [pc, #44]	@ (8001a40 <main+0x2f0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a09      	ldr	r2, [pc, #36]	@ (8001a40 <main+0x2f0>)
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e042      	b.n	8001aa4 <main+0x354>
 8001a1e:	bf00      	nop
 8001a20:	24000228 	.word	0x24000228
 8001a24:	240001dc 	.word	0x240001dc
 8001a28:	24000320 	.word	0x24000320
 8001a2c:	24000100 	.word	0x24000100
 8001a30:	24000000 	.word	0x24000000
 8001a34:	2400030e 	.word	0x2400030e
 8001a38:	58020000 	.word	0x58020000
 8001a3c:	2400030d 	.word	0x2400030d
 8001a40:	24000318 	.word	0x24000318
 8001a44:	2400032c 	.word	0x2400032c
 8001a48:	2400031c 	.word	0x2400031c
 8001a4c:	2400032d 	.word	0x2400032d
 8001a50:	2400031e 	.word	0x2400031e
 8001a54:	05f5e100 	.word	0x05f5e100
 8001a58:	00989680 	.word	0x00989680
 8001a5c:	000f4240 	.word	0x000f4240
 8001a60:	000186a0 	.word	0x000186a0
                } else if (current_digit == 9) {
 8001a64:	4b5e      	ldr	r3, [pc, #376]	@ (8001be0 <main+0x490>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b09      	cmp	r3, #9
 8001a6a:	d10e      	bne.n	8001a8a <main+0x33a>
                    freq_si5351 += freq_counter_state * 10;
 8001a6c:	4b5d      	ldr	r3, [pc, #372]	@ (8001be4 <main+0x494>)
 8001a6e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001be8 <main+0x498>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4413      	add	r3, r2
 8001a84:	4a58      	ldr	r2, [pc, #352]	@ (8001be8 <main+0x498>)
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e00c      	b.n	8001aa4 <main+0x354>
                } else if (current_digit == 10) {
 8001a8a:	4b55      	ldr	r3, [pc, #340]	@ (8001be0 <main+0x490>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	2b0a      	cmp	r3, #10
 8001a90:	d108      	bne.n	8001aa4 <main+0x354>
                    freq_si5351 += freq_counter_state * 1;
 8001a92:	4b54      	ldr	r3, [pc, #336]	@ (8001be4 <main+0x494>)
 8001a94:	f993 3000 	ldrsb.w	r3, [r3]
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4b53      	ldr	r3, [pc, #332]	@ (8001be8 <main+0x498>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	4a51      	ldr	r2, [pc, #324]	@ (8001be8 <main+0x498>)
 8001aa2:	6013      	str	r3, [r2, #0]
                }

                if (freq_si5351 < 0) {
 8001aa4:	4b50      	ldr	r3, [pc, #320]	@ (8001be8 <main+0x498>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	da03      	bge.n	8001ab4 <main+0x364>
                    freq_si5351 = 0;
 8001aac:	4b4e      	ldr	r3, [pc, #312]	@ (8001be8 <main+0x498>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
                    freq_si5351 = 160000000;
                }
            } else {
                Counter_Get_Value();
            }
            break;
 8001ab2:	e05f      	b.n	8001b74 <main+0x424>
                } else if (freq_si5351 > 160000000) {
 8001ab4:	4b4c      	ldr	r3, [pc, #304]	@ (8001be8 <main+0x498>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a4c      	ldr	r2, [pc, #304]	@ (8001bec <main+0x49c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	dd5a      	ble.n	8001b74 <main+0x424>
                    freq_si5351 = 160000000;
 8001abe:	4b4a      	ldr	r3, [pc, #296]	@ (8001be8 <main+0x498>)
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bec <main+0x49c>)
 8001ac2:	601a      	str	r2, [r3, #0]
            break;
 8001ac4:	e056      	b.n	8001b74 <main+0x424>
                Counter_Get_Value();
 8001ac6:	f000 fbf5 	bl	80022b4 <Counter_Get_Value>
            break;
 8001aca:	e053      	b.n	8001b74 <main+0x424>
        }

        case RUN_SI5351:
            if (Is_Value_K1_Changed()) {
 8001acc:	f000 fbda 	bl	8002284 <Is_Value_K1_Changed>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d050      	beq.n	8001b78 <main+0x428>
                fsm_state = MAIN_MENU;
 8001ad6:	4b46      	ldr	r3, [pc, #280]	@ (8001bf0 <main+0x4a0>)
 8001ad8:	2263      	movs	r2, #99	@ 0x63
 8001ada:	801a      	strh	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 8001adc:	2201      	movs	r2, #1
 8001ade:	2102      	movs	r1, #2
 8001ae0:	4844      	ldr	r0, [pc, #272]	@ (8001bf4 <main+0x4a4>)
 8001ae2:	f005 f863 	bl	8006bac <HAL_GPIO_WritePin>
                si5351_EnableOutputs(0);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7fe fe1b 	bl	8000722 <si5351_EnableOutputs>
            }
            break;
 8001aec:	e044      	b.n	8001b78 <main+0x428>

        case SET_LED_BRIGHTNESS:
            PWM_Get_Value();
 8001aee:	f000 fc57 	bl	80023a0 <PWM_Get_Value>
            TIM1->CCR1 = (pwm_counter) / 16.00 * 100;
 8001af2:	4b41      	ldr	r3, [pc, #260]	@ (8001bf8 <main+0x4a8>)
 8001af4:	f993 3000 	ldrsb.w	r3, [r3]
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b00:	eeb3 5b00 	vmov.f64	d5, #48	@ 0x41800000  16.0
 8001b04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b08:	ed9f 6b33 	vldr	d6, [pc, #204]	@ 8001bd8 <main+0x488>
 8001b0c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001b10:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <main+0x4ac>)
 8001b12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001b16:	ee17 2a90 	vmov	r2, s15
 8001b1a:	635a      	str	r2, [r3, #52]	@ 0x34
            if (Is_Value_K1_Changed()) {
 8001b1c:	f000 fbb2 	bl	8002284 <Is_Value_K1_Changed>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d02a      	beq.n	8001b7c <main+0x42c>
                fsm_state = MAIN_MENU;
 8001b26:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <main+0x4a0>)
 8001b28:	2263      	movs	r2, #99	@ 0x63
 8001b2a:	801a      	strh	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4830      	ldr	r0, [pc, #192]	@ (8001bf4 <main+0x4a4>)
 8001b32:	f005 f83b 	bl	8006bac <HAL_GPIO_WritePin>
            }
            break;
 8001b36:	e021      	b.n	8001b7c <main+0x42c>

        case GET_ADC:
            if (Is_Value_K1_Changed()) {
 8001b38:	f000 fba4 	bl	8002284 <Is_Value_K1_Changed>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d01e      	beq.n	8001b80 <main+0x430>
                fsm_state = MAIN_MENU;
 8001b42:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf0 <main+0x4a0>)
 8001b44:	2263      	movs	r2, #99	@ 0x63
 8001b46:	801a      	strh	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4829      	ldr	r0, [pc, #164]	@ (8001bf4 <main+0x4a4>)
 8001b4e:	f005 f82d 	bl	8006bac <HAL_GPIO_WritePin>
            }
            break;
 8001b52:	e015      	b.n	8001b80 <main+0x430>

        default:
            if (Is_Value_K1_Changed()) {
 8001b54:	f000 fb96 	bl	8002284 <Is_Value_K1_Changed>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d012      	beq.n	8001b84 <main+0x434>
                fsm_state = MAIN_MENU;
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <main+0x4a0>)
 8001b60:	2263      	movs	r2, #99	@ 0x63
 8001b62:	801a      	strh	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_SET);
 8001b64:	2201      	movs	r2, #1
 8001b66:	2102      	movs	r1, #2
 8001b68:	4822      	ldr	r0, [pc, #136]	@ (8001bf4 <main+0x4a4>)
 8001b6a:	f005 f81f 	bl	8006bac <HAL_GPIO_WritePin>
            }
            break;
 8001b6e:	e009      	b.n	8001b84 <main+0x434>
            break;
 8001b70:	bf00      	nop
 8001b72:	e008      	b.n	8001b86 <main+0x436>
            break;
 8001b74:	bf00      	nop
 8001b76:	e006      	b.n	8001b86 <main+0x436>
            break;
 8001b78:	bf00      	nop
 8001b7a:	e004      	b.n	8001b86 <main+0x436>
            break;
 8001b7c:	bf00      	nop
 8001b7e:	e002      	b.n	8001b86 <main+0x436>
            break;
 8001b80:	bf00      	nop
 8001b82:	e000      	b.n	8001b86 <main+0x436>
            break;
 8001b84:	bf00      	nop
        }

        LCD_Routine(MyI2C_LCD, counter, &option, freq_si5351, flag, pwm_counter, adc_data_dma);
 8001b86:	4b1e      	ldr	r3, [pc, #120]	@ (8001c00 <main+0x4b0>)
 8001b88:	f993 0000 	ldrsb.w	r0, [r3]
 8001b8c:	4b16      	ldr	r3, [pc, #88]	@ (8001be8 <main+0x498>)
 8001b8e:	681c      	ldr	r4, [r3, #0]
 8001b90:	4b1c      	ldr	r3, [pc, #112]	@ (8001c04 <main+0x4b4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <main+0x4a8>)
 8001b96:	f992 2000 	ldrsb.w	r2, [r2]
 8001b9a:	491b      	ldr	r1, [pc, #108]	@ (8001c08 <main+0x4b8>)
 8001b9c:	8809      	ldrh	r1, [r1, #0]
 8001b9e:	9102      	str	r1, [sp, #8]
 8001ba0:	9201      	str	r2, [sp, #4]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	4a19      	ldr	r2, [pc, #100]	@ (8001c0c <main+0x4bc>)
 8001ba8:	4601      	mov	r1, r0
 8001baa:	2000      	movs	r0, #0
 8001bac:	f7ff fd20 	bl	80015f0 <LCD_Routine>

        // sprintf((char*)MSG, "%d", freq_si5351);
        // I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
        // I2C_LCD_WriteString(MyI2C_LCD, MSG);
        last_value = encoder_value;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <main+0x4c0>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <main+0x4c4>)
 8001bb6:	6013      	str	r3, [r2, #0]
        last_fsm_state = fsm_state;
 8001bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001bf0 <main+0x4a0>)
 8001bba:	881a      	ldrh	r2, [r3, #0]
 8001bbc:	4b16      	ldr	r3, [pc, #88]	@ (8001c18 <main+0x4c8>)
 8001bbe:	801a      	strh	r2, [r3, #0]
        state_debug = fsm_state;
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <main+0x4a0>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <main+0x4cc>)
 8001bc8:	701a      	strb	r2, [r3, #0]

        HAL_Delay(100);
 8001bca:	2064      	movs	r0, #100	@ 0x64
 8001bcc:	f001 f8fc 	bl	8002dc8 <HAL_Delay>
        switch (fsm_state) {
 8001bd0:	e5f1      	b.n	80017b6 <main+0x66>
 8001bd2:	bf00      	nop
 8001bd4:	f3af 8000 	nop.w
 8001bd8:	00000000 	.word	0x00000000
 8001bdc:	40590000 	.word	0x40590000
 8001be0:	2400032d 	.word	0x2400032d
 8001be4:	2400031e 	.word	0x2400031e
 8001be8:	24000318 	.word	0x24000318
 8001bec:	09896800 	.word	0x09896800
 8001bf0:	24000000 	.word	0x24000000
 8001bf4:	58020000 	.word	0x58020000
 8001bf8:	2400031f 	.word	0x2400031f
 8001bfc:	40010000 	.word	0x40010000
 8001c00:	2400030d 	.word	0x2400030d
 8001c04:	2400031c 	.word	0x2400031c
 8001c08:	24000324 	.word	0x24000324
 8001c0c:	2400030e 	.word	0x2400030e
 8001c10:	24000308 	.word	0x24000308
 8001c14:	24000314 	.word	0x24000314
 8001c18:	24000310 	.word	0x24000310
 8001c1c:	24000326 	.word	0x24000326

08001c20 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b09c      	sub	sp, #112	@ 0x70
 8001c24:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2a:	224c      	movs	r2, #76	@ 0x4c
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f00c f8cc 	bl	800ddcc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2220      	movs	r2, #32
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f00c f8c6 	bl	800ddcc <memset>

    /** Supply configuration update enable
     */
    HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001c40:	2002      	movs	r0, #2
 8001c42:	f005 febb 	bl	80079bc <HAL_PWREx_ConfigSupply>

    /** Configure the main internal regulator output voltage
     */
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8001cfc <SystemClock_Config+0xdc>)
 8001c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cfc <SystemClock_Config+0xdc>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001c56:	4b29      	ldr	r3, [pc, #164]	@ (8001cfc <SystemClock_Config+0xdc>)
 8001c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5a:	f003 0301 	and.w	r3, r3, #1
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4b27      	ldr	r3, [pc, #156]	@ (8001d00 <SystemClock_Config+0xe0>)
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001c68:	4a25      	ldr	r2, [pc, #148]	@ (8001d00 <SystemClock_Config+0xe0>)
 8001c6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b23      	ldr	r3, [pc, #140]	@ (8001d00 <SystemClock_Config+0xe0>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c78:	603b      	str	r3, [r7, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]

    while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) { }
 8001c7c:	bf00      	nop
 8001c7e:	4b20      	ldr	r3, [pc, #128]	@ (8001d00 <SystemClock_Config+0xe0>)
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c8a:	d1f8      	bne.n	8001c7e <SystemClock_Config+0x5e>

    /** Macro to configure the PLL clock source
     */
    __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d04 <SystemClock_Config+0xe4>)
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	f023 0303 	bic.w	r3, r3, #3
 8001c94:	4a1b      	ldr	r2, [pc, #108]	@ (8001d04 <SystemClock_Config+0xe4>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	6293      	str	r3, [r2, #40]	@ 0x28

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ca0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f005 febe 	bl	8007a30 <HAL_RCC_OscConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0x9e>
        Error_Handler();
 8001cba:	f000 fc15 	bl	80024e8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001cbe:	233f      	movs	r3, #63	@ 0x3f
 8001cc0:	607b      	str	r3, [r7, #4]
        | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2
        | RCC_CLOCKTYPE_D3PCLK1 | RCC_CLOCKTYPE_D1PCLK1;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001cd2:	2340      	movs	r3, #64	@ 0x40
 8001cd4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001cde:	1d3b      	adds	r3, r7, #4
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 fafe 	bl	80082e4 <HAL_RCC_ClockConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0xd2>
        Error_Handler();
 8001cee:	f000 fbfb 	bl	80024e8 <Error_Handler>
    }
}
 8001cf2:	bf00      	nop
 8001cf4:	3770      	adds	r7, #112	@ 0x70
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	58000400 	.word	0x58000400
 8001d00:	58024800 	.word	0x58024800
 8001d04:	58024400 	.word	0x58024400

08001d08 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_MultiModeTypeDef multimode = { 0 };
 8001d0e:	f107 031c 	add.w	r3, r7, #28
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
 8001d28:	615a      	str	r2, [r3, #20]
 8001d2a:	619a      	str	r2, [r3, #24]

    /* USER CODE END ADC1_Init 1 */

    /** Common config
     */
    hadc1.Instance = ADC1;
 8001d2c:	4b31      	ldr	r3, [pc, #196]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d2e:	4a32      	ldr	r2, [pc, #200]	@ (8001df8 <MX_ADC1_Init+0xf0>)
 8001d30:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8001d32:	4b30      	ldr	r3, [pc, #192]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d34:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d38:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d40:	4b2c      	ldr	r3, [pc, #176]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d46:	4b2b      	ldr	r3, [pc, #172]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d48:	2204      	movs	r2, #4
 8001d4a:	611a      	str	r2, [r3, #16]
    hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d4c:	4b29      	ldr	r3, [pc, #164]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	751a      	strb	r2, [r3, #20]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001d52:	4b28      	ldr	r3, [pc, #160]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	755a      	strb	r2, [r3, #21]
    hadc1.Init.NbrOfConversion = 1;
 8001d58:	4b26      	ldr	r3, [pc, #152]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	619a      	str	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d5e:	4b25      	ldr	r3, [pc, #148]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	771a      	strb	r2, [r3, #28]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d64:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d6a:	4b22      	ldr	r3, [pc, #136]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d70:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	635a      	str	r2, [r3, #52]	@ 0x34
    hadc1.Init.OversamplingMode = DISABLE;
 8001d82:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    hadc1.Init.Oversampling.Ratio = 1;
 8001d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	63da      	str	r2, [r3, #60]	@ 0x3c
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001d90:	4818      	ldr	r0, [pc, #96]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001d92:	f001 fa63 	bl	800325c <HAL_ADC_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_ADC1_Init+0x98>
        Error_Handler();
 8001d9c:	f000 fba4 	bl	80024e8 <Error_Handler>
    }

    /** Configure the ADC multi-mode
     */
    multimode.Mode = ADC_MODE_INDEPENDENT;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4812      	ldr	r0, [pc, #72]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001dac:	f002 fa10 	bl	80041d0 <HAL_ADCEx_MultiModeConfigChannel>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_ADC1_Init+0xb2>
        Error_Handler();
 8001db6:	f000 fb97 	bl	80024e8 <Error_Handler>
    }

    /** Configure Regular Channel
     */
    sConfig.Channel = ADC_CHANNEL_7;
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <MX_ADC1_Init+0xf4>)
 8001dbc:	603b      	str	r3, [r7, #0]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dc6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001dca:	60fb      	str	r3, [r7, #12]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	613b      	str	r3, [r7, #16]
    sConfig.Offset = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
    sConfig.OffsetSignedSaturation = DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	767b      	strb	r3, [r7, #25]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <MX_ADC1_Init+0xec>)
 8001dde:	f001 fcb7 	bl	8003750 <HAL_ADC_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_ADC1_Init+0xe4>
        Error_Handler();
 8001de8:	f000 fb7e 	bl	80024e8 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	@ 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	24000100 	.word	0x24000100
 8001df8:	40022000 	.word	0x40022000
 8001dfc:	1d500080 	.word	0x1d500080

08001e00 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8001e04:	4b1b      	ldr	r3, [pc, #108]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e06:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <MX_I2C1_Init+0x78>)
 8001e08:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00506682;
 8001e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e7c <MX_I2C1_Init+0x7c>)
 8001e0e:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 8001e10:	4b18      	ldr	r3, [pc, #96]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e16:	4b17      	ldr	r3, [pc, #92]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	611a      	str	r2, [r3, #16]
    hi2c1.Init.OwnAddress2 = 0;
 8001e22:	4b14      	ldr	r3, [pc, #80]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e28:	4b12      	ldr	r3, [pc, #72]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001e3a:	480e      	ldr	r0, [pc, #56]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e3c:	f004 feea 	bl	8006c14 <HAL_I2C_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_I2C1_Init+0x4a>
        Error_Handler();
 8001e46:	f000 fb4f 	bl	80024e8 <Error_Handler>
    }

    /** Configure Analogue filter
     */
    if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	4809      	ldr	r0, [pc, #36]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e4e:	f005 fd1d 	bl	800788c <HAL_I2CEx_ConfigAnalogFilter>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <MX_I2C1_Init+0x5c>
        Error_Handler();
 8001e58:	f000 fb46 	bl	80024e8 <Error_Handler>
    }

    /** Configure Digital filter
     */
    if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4805      	ldr	r0, [pc, #20]	@ (8001e74 <MX_I2C1_Init+0x74>)
 8001e60:	f005 fd5f 	bl	8007922 <HAL_I2CEx_ConfigDigitalFilter>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_I2C1_Init+0x6e>
        Error_Handler();
 8001e6a:	f000 fb3d 	bl	80024e8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2400009c 	.word	0x2400009c
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	00506682 	.word	0x00506682

08001e80 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b09a      	sub	sp, #104	@ 0x68
 8001e84:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001e86:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	605a      	str	r2, [r3, #4]
 8001e90:	609a      	str	r2, [r3, #8]
 8001e92:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001e94:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001ea0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
 8001eb0:	615a      	str	r2, [r3, #20]
 8001eb2:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	222c      	movs	r2, #44	@ 0x2c
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f00b ff86 	bl	800ddcc <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001ec0:	4b43      	ldr	r3, [pc, #268]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001ec2:	4a44      	ldr	r2, [pc, #272]	@ (8001fd4 <MX_TIM1_Init+0x154>)
 8001ec4:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 48;
 8001ec6:	4b42      	ldr	r3, [pc, #264]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001ec8:	2230      	movs	r2, #48	@ 0x30
 8001eca:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ecc:	4b40      	ldr	r3, [pc, #256]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 100;
 8001ed2:	4b3f      	ldr	r3, [pc, #252]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001ed4:	2264      	movs	r2, #100	@ 0x64
 8001ed6:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001ede:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8001eea:	4839      	ldr	r0, [pc, #228]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001eec:	f009 fa84 	bl	800b3f8 <HAL_TIM_Base_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_TIM1_Init+0x7a>
        Error_Handler();
 8001ef6:	f000 faf7 	bl	80024e8 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efe:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001f00:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001f04:	4619      	mov	r1, r3
 8001f06:	4832      	ldr	r0, [pc, #200]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001f08:	f009 ffac 	bl	800be64 <HAL_TIM_ConfigClockSource>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x96>
        Error_Handler();
 8001f12:	f000 fae9 	bl	80024e8 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001f16:	482e      	ldr	r0, [pc, #184]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001f18:	f009 fac5 	bl	800b4a6 <HAL_TIM_PWM_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM1_Init+0xa6>
        Error_Handler();
 8001f22:	f000 fae1 	bl	80024e8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	653b      	str	r3, [r7, #80]	@ 0x50
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8001f32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f36:	4619      	mov	r1, r3
 8001f38:	4825      	ldr	r0, [pc, #148]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001f3a:	f00a fced 	bl	800c918 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM1_Init+0xc8>
        Error_Handler();
 8001f44:	f000 fad0 	bl	80024e8 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f48:	2360      	movs	r3, #96	@ 0x60
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.Pulse = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f54:	2300      	movs	r3, #0
 8001f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	643b      	str	r3, [r7, #64]	@ 0x40
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	647b      	str	r3, [r7, #68]	@ 0x44
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f60:	2300      	movs	r3, #0
 8001f62:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001f64:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f68:	2200      	movs	r2, #0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4818      	ldr	r0, [pc, #96]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001f6e:	f009 fe65 	bl	800bc3c <HAL_TIM_PWM_ConfigChannel>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_TIM1_Init+0xfc>
        Error_Handler();
 8001f78:	f000 fab6 	bl	80024e8 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f84:	2300      	movs	r3, #0
 8001f86:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f94:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f9e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    sBreakDeadTimeConfig.Break2Filter = 0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8001fac:	1d3b      	adds	r3, r7, #4
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4807      	ldr	r0, [pc, #28]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001fb2:	f00a fd3f 	bl	800ca34 <HAL_TIMEx_ConfigBreakDeadTime>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM1_Init+0x140>
        Error_Handler();
 8001fbc:	f000 fa94 	bl	80024e8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 8001fc0:	4803      	ldr	r0, [pc, #12]	@ (8001fd0 <MX_TIM1_Init+0x150>)
 8001fc2:	f000 fc51 	bl	8002868 <HAL_TIM_MspPostInit>
}
 8001fc6:	bf00      	nop
 8001fc8:	3768      	adds	r7, #104	@ 0x68
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	240001dc 	.word	0x240001dc
 8001fd4:	40010000 	.word	0x40010000

08001fd8 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	@ 0x30
 8001fdc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2224      	movs	r2, #36	@ 0x24
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f00b fef0 	bl	800ddcc <memset>
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_TIM2_Init+0xa4>)
 8001ff8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ffc:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 0;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <MX_TIM2_Init+0xa4>)
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <MX_TIM2_Init+0xa4>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 4294967295;
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_TIM2_Init+0xa4>)
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_TIM2_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002018:	4b18      	ldr	r3, [pc, #96]	@ (800207c <MX_TIM2_Init+0xa4>)
 800201a:	2200      	movs	r2, #0
 800201c:	619a      	str	r2, [r3, #24]
    sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800201e:	2303      	movs	r3, #3
 8002020:	60fb      	str	r3, [r7, #12]
    sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002026:	2301      	movs	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800202a:	2300      	movs	r3, #0
 800202c:	61bb      	str	r3, [r7, #24]
    sConfig.IC1Filter = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002032:	2300      	movs	r3, #0
 8002034:	623b      	str	r3, [r7, #32]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002036:	2301      	movs	r3, #1
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfig.IC2Filter = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 8002042:	f107 030c 	add.w	r3, r7, #12
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <MX_TIM2_Init+0xa4>)
 800204a:	f009 fb9b 	bl	800b784 <HAL_TIM_Encoder_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM2_Init+0x80>
        Error_Handler();
 8002054:	f000 fa48 	bl	80024e8 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	60bb      	str	r3, [r7, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	@ (800207c <MX_TIM2_Init+0xa4>)
 8002066:	f00a fc57 	bl	800c918 <HAL_TIMEx_MasterConfigSynchronization>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM2_Init+0x9c>
        Error_Handler();
 8002070:	f000 fa3a 	bl	80024e8 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 8002074:	bf00      	nop
 8002076:	3730      	adds	r7, #48	@ 0x30
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	24000228 	.word	0x24000228

08002080 <MX_UART4_Init>:
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
    /* USER CODE END UART4_Init 0 */

    /* USER CODE BEGIN UART4_Init 1 */

    /* USER CODE END UART4_Init 1 */
    huart4.Instance = UART4;
 8002084:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <MX_UART4_Init+0x90>)
 8002086:	4a23      	ldr	r2, [pc, #140]	@ (8002114 <MX_UART4_Init+0x94>)
 8002088:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 9600;
 800208a:	4b21      	ldr	r3, [pc, #132]	@ (8002110 <MX_UART4_Init+0x90>)
 800208c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002090:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002092:	4b1f      	ldr	r3, [pc, #124]	@ (8002110 <MX_UART4_Init+0x90>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8002098:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_UART4_Init+0x90>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 800209e:	4b1c      	ldr	r3, [pc, #112]	@ (8002110 <MX_UART4_Init+0x90>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <MX_UART4_Init+0x90>)
 80020a6:	220c      	movs	r2, #12
 80020a8:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <MX_UART4_Init+0x90>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <MX_UART4_Init+0x90>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020b6:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <MX_UART4_Init+0x90>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
    huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80020bc:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <MX_UART4_Init+0x90>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020c2:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <MX_UART4_Init+0x90>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart4) != HAL_OK) {
 80020c8:	4811      	ldr	r0, [pc, #68]	@ (8002110 <MX_UART4_Init+0x90>)
 80020ca:	f00a fd4f 	bl	800cb6c <HAL_UART_Init>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <MX_UART4_Init+0x58>
        Error_Handler();
 80020d4:	f000 fa08 	bl	80024e8 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80020d8:	2100      	movs	r1, #0
 80020da:	480d      	ldr	r0, [pc, #52]	@ (8002110 <MX_UART4_Init+0x90>)
 80020dc:	f00b fd57 	bl	800db8e <HAL_UARTEx_SetTxFifoThreshold>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_UART4_Init+0x6a>
        Error_Handler();
 80020e6:	f000 f9ff 	bl	80024e8 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK) {
 80020ea:	2100      	movs	r1, #0
 80020ec:	4808      	ldr	r0, [pc, #32]	@ (8002110 <MX_UART4_Init+0x90>)
 80020ee:	f00b fd8c 	bl	800dc0a <HAL_UARTEx_SetRxFifoThreshold>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_UART4_Init+0x7c>
        Error_Handler();
 80020f8:	f000 f9f6 	bl	80024e8 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK) {
 80020fc:	4804      	ldr	r0, [pc, #16]	@ (8002110 <MX_UART4_Init+0x90>)
 80020fe:	f00b fd0d 	bl	800db1c <HAL_UARTEx_DisableFifoMode>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_UART4_Init+0x8c>
        Error_Handler();
 8002108:	f000 f9ee 	bl	80024e8 <Error_Handler>
    }
    /* USER CODE BEGIN UART4_Init 2 */

    /* USER CODE END UART4_Init 2 */
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	24000274 	.word	0x24000274
 8002114:	40004c00 	.word	0x40004c00

08002118 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <MX_DMA_Init+0x3c>)
 8002120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002124:	4a0b      	ldr	r2, [pc, #44]	@ (8002154 <MX_DMA_Init+0x3c>)
 8002126:	f043 0301 	orr.w	r3, r3, #1
 800212a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <MX_DMA_Init+0x3c>)
 8002130:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	687b      	ldr	r3, [r7, #4]

    /* DMA interrupt init */
    /* DMA1_Stream0_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	200b      	movs	r0, #11
 8002142:	f002 f9fe 	bl	8004542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002146:	200b      	movs	r0, #11
 8002148:	f002 fa15 	bl	8004576 <HAL_NVIC_EnableIRQ>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	58024400 	.word	0x58024400

08002158 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b08a      	sub	sp, #40	@ 0x28
 800215c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800215e:	f107 0314 	add.w	r3, r7, #20
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800216e:	4b41      	ldr	r3, [pc, #260]	@ (8002274 <MX_GPIO_Init+0x11c>)
 8002170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002174:	4a3f      	ldr	r2, [pc, #252]	@ (8002274 <MX_GPIO_Init+0x11c>)
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800217e:	4b3d      	ldr	r3, [pc, #244]	@ (8002274 <MX_GPIO_Init+0x11c>)
 8002180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800218c:	4b39      	ldr	r3, [pc, #228]	@ (8002274 <MX_GPIO_Init+0x11c>)
 800218e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002192:	4a38      	ldr	r2, [pc, #224]	@ (8002274 <MX_GPIO_Init+0x11c>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800219c:	4b35      	ldr	r3, [pc, #212]	@ (8002274 <MX_GPIO_Init+0x11c>)
 800219e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	4b32      	ldr	r3, [pc, #200]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021b0:	4a30      	ldr	r2, [pc, #192]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021ba:	4b2e      	ldr	r3, [pc, #184]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ce:	4a29      	ldr	r2, [pc, #164]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021d8:	4b26      	ldr	r3, [pc, #152]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	4b23      	ldr	r3, [pc, #140]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021ec:	4a21      	ldr	r2, [pc, #132]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021ee:	f043 0302 	orr.w	r3, r3, #2
 80021f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <MX_GPIO_Init+0x11c>)
 80021f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	603b      	str	r3, [r7, #0]
 8002202:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2102      	movs	r1, #2
 8002208:	481b      	ldr	r0, [pc, #108]	@ (8002278 <MX_GPIO_Init+0x120>)
 800220a:	f004 fccf 	bl	8006bac <HAL_GPIO_WritePin>

    /*Configure GPIO pin : KEY1_Pin */
    GPIO_InitStruct.Pin = KEY1_Pin;
 800220e:	2308      	movs	r3, #8
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002212:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002218:	2301      	movs	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	4619      	mov	r1, r3
 8002222:	4816      	ldr	r0, [pc, #88]	@ (800227c <MX_GPIO_Init+0x124>)
 8002224:	f004 fb12 	bl	800684c <HAL_GPIO_Init>

    /*Configure GPIO pin : LED_D2_Pin */
    GPIO_InitStruct.Pin = LED_D2_Pin;
 8002228:	2302      	movs	r3, #2
 800222a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222c:	2301      	movs	r3, #1
 800222e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002230:	2302      	movs	r3, #2
 8002232:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_D2_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	480e      	ldr	r0, [pc, #56]	@ (8002278 <MX_GPIO_Init+0x120>)
 8002240:	f004 fb04 	bl	800684c <HAL_GPIO_Init>

    /*Configure GPIO pin : KEY2_Pin */
    GPIO_InitStruct.Pin = KEY2_Pin;
 8002244:	2320      	movs	r3, #32
 8002246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002248:	2300      	movs	r3, #0
 800224a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800224c:	2301      	movs	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	480a      	ldr	r0, [pc, #40]	@ (8002280 <MX_GPIO_Init+0x128>)
 8002258:	f004 faf8 	bl	800684c <HAL_GPIO_Init>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(KEY1_EXTI_IRQn, 2, 0);
 800225c:	2200      	movs	r2, #0
 800225e:	2102      	movs	r1, #2
 8002260:	2009      	movs	r0, #9
 8002262:	f002 f96e 	bl	8004542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(KEY1_EXTI_IRQn);
 8002266:	2009      	movs	r0, #9
 8002268:	f002 f985 	bl	8004576 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 800226c:	bf00      	nop
 800226e:	3728      	adds	r7, #40	@ 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	58024400 	.word	0x58024400
 8002278:	58020000 	.word	0x58020000
 800227c:	58021000 	.word	0x58021000
 8002280:	58020800 	.word	0x58020800

08002284 <Is_Value_K1_Changed>:

/* USER CODE BEGIN 4 */
uint8_t Is_Value_K1_Changed()
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
    static uint8_t last_value_k1 = 0;
    if (value_k1 != last_value_k1) {
 8002288:	4b08      	ldr	r3, [pc, #32]	@ (80022ac <Is_Value_K1_Changed+0x28>)
 800228a:	781a      	ldrb	r2, [r3, #0]
 800228c:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <Is_Value_K1_Changed+0x2c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d005      	beq.n	80022a0 <Is_Value_K1_Changed+0x1c>
        last_value_k1 = value_k1;
 8002294:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <Is_Value_K1_Changed+0x28>)
 8002296:	781a      	ldrb	r2, [r3, #0]
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <Is_Value_K1_Changed+0x2c>)
 800229a:	701a      	strb	r2, [r3, #0]
        return 1;
 800229c:	2301      	movs	r3, #1
 800229e:	e000      	b.n	80022a2 <Is_Value_K1_Changed+0x1e>
    }
    return 0;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	2400030c 	.word	0x2400030c
 80022b0:	2400032e 	.word	0x2400032e

080022b4 <Counter_Get_Value>:

void Counter_Get_Value()
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
    if (encoder_value > last_value) {
 80022b8:	4b19      	ldr	r3, [pc, #100]	@ (8002320 <Counter_Get_Value+0x6c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4b19      	ldr	r3, [pc, #100]	@ (8002324 <Counter_Get_Value+0x70>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d909      	bls.n	80022d8 <Counter_Get_Value+0x24>
        counter++;
 80022c4:	4b18      	ldr	r3, [pc, #96]	@ (8002328 <Counter_Get_Value+0x74>)
 80022c6:	f993 3000 	ldrsb.w	r3, [r3]
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b25a      	sxtb	r2, r3
 80022d2:	4b15      	ldr	r3, [pc, #84]	@ (8002328 <Counter_Get_Value+0x74>)
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	e00e      	b.n	80022f6 <Counter_Get_Value+0x42>
    } else if (encoder_value < last_value) {
 80022d8:	4b11      	ldr	r3, [pc, #68]	@ (8002320 <Counter_Get_Value+0x6c>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <Counter_Get_Value+0x70>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d208      	bcs.n	80022f6 <Counter_Get_Value+0x42>
        counter--;
 80022e4:	4b10      	ldr	r3, [pc, #64]	@ (8002328 <Counter_Get_Value+0x74>)
 80022e6:	f993 3000 	ldrsb.w	r3, [r3]
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	3b01      	subs	r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	b25a      	sxtb	r2, r3
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <Counter_Get_Value+0x74>)
 80022f4:	701a      	strb	r2, [r3, #0]
    }

    if (counter > 15)
 80022f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002328 <Counter_Get_Value+0x74>)
 80022f8:	f993 3000 	ldrsb.w	r3, [r3]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	dd02      	ble.n	8002306 <Counter_Get_Value+0x52>
        counter = 15;
 8002300:	4b09      	ldr	r3, [pc, #36]	@ (8002328 <Counter_Get_Value+0x74>)
 8002302:	220f      	movs	r2, #15
 8002304:	701a      	strb	r2, [r3, #0]
    if (counter < 0)
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <Counter_Get_Value+0x74>)
 8002308:	f993 3000 	ldrsb.w	r3, [r3]
 800230c:	2b00      	cmp	r3, #0
 800230e:	da02      	bge.n	8002316 <Counter_Get_Value+0x62>
        counter = 0;
 8002310:	4b05      	ldr	r3, [pc, #20]	@ (8002328 <Counter_Get_Value+0x74>)
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	24000308 	.word	0x24000308
 8002324:	24000314 	.word	0x24000314
 8002328:	2400030d 	.word	0x2400030d

0800232c <Frequency_Get_Value>:

void Frequency_Get_Value()
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
    if (encoder_value > last_value) {
 8002330:	4b17      	ldr	r3, [pc, #92]	@ (8002390 <Frequency_Get_Value+0x64>)
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b17      	ldr	r3, [pc, #92]	@ (8002394 <Frequency_Get_Value+0x68>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d909      	bls.n	8002350 <Frequency_Get_Value+0x24>
        freq_counter++;
 800233c:	4b16      	ldr	r3, [pc, #88]	@ (8002398 <Frequency_Get_Value+0x6c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <Frequency_Get_Value+0x6c>)
 8002346:	701a      	strb	r2, [r3, #0]
        freq_counter_state = 1;
 8002348:	4b14      	ldr	r3, [pc, #80]	@ (800239c <Frequency_Get_Value+0x70>)
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e012      	b.n	8002376 <Frequency_Get_Value+0x4a>
    } else if (encoder_value < last_value) {
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <Frequency_Get_Value+0x64>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0f      	ldr	r3, [pc, #60]	@ (8002394 <Frequency_Get_Value+0x68>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d209      	bcs.n	8002370 <Frequency_Get_Value+0x44>
        freq_counter--;
 800235c:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <Frequency_Get_Value+0x6c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	3b01      	subs	r3, #1
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <Frequency_Get_Value+0x6c>)
 8002366:	701a      	strb	r2, [r3, #0]
        freq_counter_state = -1;
 8002368:	4b0c      	ldr	r3, [pc, #48]	@ (800239c <Frequency_Get_Value+0x70>)
 800236a:	22ff      	movs	r2, #255	@ 0xff
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	e002      	b.n	8002376 <Frequency_Get_Value+0x4a>
    } else {
        freq_counter_state = 0;
 8002370:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <Frequency_Get_Value+0x70>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
    }

    if (freq_counter > 15)
 8002376:	4b08      	ldr	r3, [pc, #32]	@ (8002398 <Frequency_Get_Value+0x6c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	d902      	bls.n	8002384 <Frequency_Get_Value+0x58>
        freq_counter = 15;
 800237e:	4b06      	ldr	r3, [pc, #24]	@ (8002398 <Frequency_Get_Value+0x6c>)
 8002380:	220f      	movs	r2, #15
 8002382:	701a      	strb	r2, [r3, #0]
    if (freq_counter < 0)
        freq_counter = 0;
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	24000308 	.word	0x24000308
 8002394:	24000314 	.word	0x24000314
 8002398:	2400031d 	.word	0x2400031d
 800239c:	2400031e 	.word	0x2400031e

080023a0 <PWM_Get_Value>:

void PWM_Get_Value()
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
    if (encoder_value > last_value) {
 80023a4:	4b19      	ldr	r3, [pc, #100]	@ (800240c <PWM_Get_Value+0x6c>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b19      	ldr	r3, [pc, #100]	@ (8002410 <PWM_Get_Value+0x70>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d909      	bls.n	80023c4 <PWM_Get_Value+0x24>
        pwm_counter++;
 80023b0:	4b18      	ldr	r3, [pc, #96]	@ (8002414 <PWM_Get_Value+0x74>)
 80023b2:	f993 3000 	ldrsb.w	r3, [r3]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	3301      	adds	r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	b25a      	sxtb	r2, r3
 80023be:	4b15      	ldr	r3, [pc, #84]	@ (8002414 <PWM_Get_Value+0x74>)
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e00e      	b.n	80023e2 <PWM_Get_Value+0x42>
    } else if (encoder_value < last_value) {
 80023c4:	4b11      	ldr	r3, [pc, #68]	@ (800240c <PWM_Get_Value+0x6c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <PWM_Get_Value+0x70>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d208      	bcs.n	80023e2 <PWM_Get_Value+0x42>
        pwm_counter--;
 80023d0:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <PWM_Get_Value+0x74>)
 80023d2:	f993 3000 	ldrsb.w	r3, [r3]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	b25a      	sxtb	r2, r3
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <PWM_Get_Value+0x74>)
 80023e0:	701a      	strb	r2, [r3, #0]
    }

    if (pwm_counter > 16)
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <PWM_Get_Value+0x74>)
 80023e4:	f993 3000 	ldrsb.w	r3, [r3]
 80023e8:	2b10      	cmp	r3, #16
 80023ea:	dd02      	ble.n	80023f2 <PWM_Get_Value+0x52>
        pwm_counter = 16;
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <PWM_Get_Value+0x74>)
 80023ee:	2210      	movs	r2, #16
 80023f0:	701a      	strb	r2, [r3, #0]
    if (pwm_counter < 0)
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <PWM_Get_Value+0x74>)
 80023f4:	f993 3000 	ldrsb.w	r3, [r3]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	da02      	bge.n	8002402 <PWM_Get_Value+0x62>
        pwm_counter = 0;
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <PWM_Get_Value+0x74>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	24000308 	.word	0x24000308
 8002410:	24000314 	.word	0x24000314
 8002414:	2400031f 	.word	0x2400031f

08002418 <Option_Get_Value>:

void Option_Get_Value()
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
    if (encoder_value > last_value) {
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <Option_Get_Value+0x6c>)
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	4b19      	ldr	r3, [pc, #100]	@ (8002488 <Option_Get_Value+0x70>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d909      	bls.n	800243c <Option_Get_Value+0x24>
        option++;
 8002428:	4b18      	ldr	r3, [pc, #96]	@ (800248c <Option_Get_Value+0x74>)
 800242a:	f993 3000 	ldrsb.w	r3, [r3]
 800242e:	b2db      	uxtb	r3, r3
 8002430:	3301      	adds	r3, #1
 8002432:	b2db      	uxtb	r3, r3
 8002434:	b25a      	sxtb	r2, r3
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <Option_Get_Value+0x74>)
 8002438:	701a      	strb	r2, [r3, #0]
 800243a:	e00e      	b.n	800245a <Option_Get_Value+0x42>
    } else if (encoder_value < last_value) {
 800243c:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <Option_Get_Value+0x6c>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <Option_Get_Value+0x70>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d208      	bcs.n	800245a <Option_Get_Value+0x42>
        option--;
 8002448:	4b10      	ldr	r3, [pc, #64]	@ (800248c <Option_Get_Value+0x74>)
 800244a:	f993 3000 	ldrsb.w	r3, [r3]
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	b25a      	sxtb	r2, r3
 8002456:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <Option_Get_Value+0x74>)
 8002458:	701a      	strb	r2, [r3, #0]
    }
    if (option > 2)
 800245a:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <Option_Get_Value+0x74>)
 800245c:	f993 3000 	ldrsb.w	r3, [r3]
 8002460:	2b02      	cmp	r3, #2
 8002462:	dd02      	ble.n	800246a <Option_Get_Value+0x52>
        option = 2;
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <Option_Get_Value+0x74>)
 8002466:	2202      	movs	r2, #2
 8002468:	701a      	strb	r2, [r3, #0]
    if (option < 0)
 800246a:	4b08      	ldr	r3, [pc, #32]	@ (800248c <Option_Get_Value+0x74>)
 800246c:	f993 3000 	ldrsb.w	r3, [r3]
 8002470:	2b00      	cmp	r3, #0
 8002472:	da02      	bge.n	800247a <Option_Get_Value+0x62>
        option = 0;
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <Option_Get_Value+0x74>)
 8002476:	2200      	movs	r2, #0
 8002478:	701a      	strb	r2, [r3, #0]
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	24000308 	.word	0x24000308
 8002488:	24000314 	.word	0x24000314
 800248c:	2400030e 	.word	0x2400030e

08002490 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 8002496:	463b      	mov	r3, r7
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]

    /* Disables the MPU */
    HAL_MPU_Disable();
 80024a2:	f002 f883 	bl	80045ac <HAL_MPU_Disable>

    /** Initializes and configures the Region and the memory to be protected
     */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80024a6:	2301      	movs	r3, #1
 80024a8:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.BaseAddress = 0x0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80024b2:	231f      	movs	r3, #31
 80024b4:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.SubRegionDisable = 0x87;
 80024b6:	2387      	movs	r3, #135	@ 0x87
 80024b8:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80024be:	2300      	movs	r3, #0
 80024c0:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80024c2:	2301      	movs	r3, #1
 80024c4:	733b      	strb	r3, [r7, #12]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80024c6:	2301      	movs	r3, #1
 80024c8:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	73fb      	strb	r3, [r7, #15]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80024d2:	463b      	mov	r3, r7
 80024d4:	4618      	mov	r0, r3
 80024d6:	f002 f8a1 	bl	800461c <HAL_MPU_ConfigRegion>
    /* Enables the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80024da:	2004      	movs	r0, #4
 80024dc:	f002 f87e 	bl	80045dc <HAL_MPU_Enable>
}
 80024e0:	bf00      	nop
 80024e2:	3710      	adds	r7, #16
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ec:	b672      	cpsid	i
}
 80024ee:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <Error_Handler+0x8>

080024f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_MspInit+0x30>)
 80024fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002500:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <HAL_MspInit+0x30>)
 8002502:	f043 0302 	orr.w	r3, r3, #2
 8002506:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_MspInit+0x30>)
 800250c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	58024400 	.word	0x58024400

08002528 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b0ba      	sub	sp, #232	@ 0xe8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002540:	f107 0310 	add.w	r3, r7, #16
 8002544:	22c0      	movs	r2, #192	@ 0xc0
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f00b fc3f 	bl	800ddcc <memset>
  if(hadc->Instance==ADC1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a43      	ldr	r2, [pc, #268]	@ (8002660 <HAL_ADC_MspInit+0x138>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d17f      	bne.n	8002658 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002558:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 3;
 8002564:	2303      	movs	r3, #3
 8002566:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 10;
 8002568:	230a      	movs	r3, #10
 800256a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800256c:	2302      	movs	r3, #2
 800256e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8002570:	2302      	movs	r3, #2
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002574:	2302      	movs	r3, #2
 8002576:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002578:	23c0      	movs	r3, #192	@ 0xc0
 800257a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800257c:	2320      	movs	r3, #32
 800257e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8002580:	2300      	movs	r3, #0
 8002582:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002584:	2300      	movs	r3, #0
 8002586:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800258a:	f107 0310 	add.w	r3, r7, #16
 800258e:	4618      	mov	r0, r3
 8002590:	f006 fa34 	bl	80089fc <HAL_RCCEx_PeriphCLKConfig>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 800259a:	f7ff ffa5 	bl	80024e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800259e:	4b31      	ldr	r3, [pc, #196]	@ (8002664 <HAL_ADC_MspInit+0x13c>)
 80025a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025a4:	4a2f      	ldr	r2, [pc, #188]	@ (8002664 <HAL_ADC_MspInit+0x13c>)
 80025a6:	f043 0320 	orr.w	r3, r3, #32
 80025aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80025ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002664 <HAL_ADC_MspInit+0x13c>)
 80025b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80025b4:	f003 0320 	and.w	r3, r3, #32
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025bc:	4b29      	ldr	r3, [pc, #164]	@ (8002664 <HAL_ADC_MspInit+0x13c>)
 80025be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025c2:	4a28      	ldr	r2, [pc, #160]	@ (8002664 <HAL_ADC_MspInit+0x13c>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025cc:	4b25      	ldr	r3, [pc, #148]	@ (8002664 <HAL_ADC_MspInit+0x13c>)
 80025ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_INP7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025e0:	2303      	movs	r3, #3
 80025e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025f0:	4619      	mov	r1, r3
 80025f2:	481d      	ldr	r0, [pc, #116]	@ (8002668 <HAL_ADC_MspInit+0x140>)
 80025f4:	f004 f92a 	bl	800684c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80025f8:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <HAL_ADC_MspInit+0x144>)
 80025fa:	4a1d      	ldr	r2, [pc, #116]	@ (8002670 <HAL_ADC_MspInit+0x148>)
 80025fc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80025fe:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <HAL_ADC_MspInit+0x144>)
 8002600:	2209      	movs	r2, #9
 8002602:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002604:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_ADC_MspInit+0x144>)
 8002606:	2200      	movs	r2, #0
 8002608:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <HAL_ADC_MspInit+0x144>)
 800260c:	2200      	movs	r2, #0
 800260e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002610:	4b16      	ldr	r3, [pc, #88]	@ (800266c <HAL_ADC_MspInit+0x144>)
 8002612:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002616:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002618:	4b14      	ldr	r3, [pc, #80]	@ (800266c <HAL_ADC_MspInit+0x144>)
 800261a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800261e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_ADC_MspInit+0x144>)
 8002622:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002626:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002628:	4b10      	ldr	r3, [pc, #64]	@ (800266c <HAL_ADC_MspInit+0x144>)
 800262a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800262e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002630:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <HAL_ADC_MspInit+0x144>)
 8002632:	2200      	movs	r2, #0
 8002634:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <HAL_ADC_MspInit+0x144>)
 8002638:	2200      	movs	r2, #0
 800263a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800263c:	480b      	ldr	r0, [pc, #44]	@ (800266c <HAL_ADC_MspInit+0x144>)
 800263e:	f002 f82d 	bl	800469c <HAL_DMA_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <HAL_ADC_MspInit+0x124>
    {
      Error_Handler();
 8002648:	f7ff ff4e 	bl	80024e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a07      	ldr	r2, [pc, #28]	@ (800266c <HAL_ADC_MspInit+0x144>)
 8002650:	64da      	str	r2, [r3, #76]	@ 0x4c
 8002652:	4a06      	ldr	r2, [pc, #24]	@ (800266c <HAL_ADC_MspInit+0x144>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002658:	bf00      	nop
 800265a:	37e8      	adds	r7, #232	@ 0xe8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40022000 	.word	0x40022000
 8002664:	58024400 	.word	0x58024400
 8002668:	58020000 	.word	0x58020000
 800266c:	24000164 	.word	0x24000164
 8002670:	40020010 	.word	0x40020010

08002674 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b0ba      	sub	sp, #232	@ 0xe8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800268c:	f107 0310 	add.w	r3, r7, #16
 8002690:	22c0      	movs	r2, #192	@ 0xc0
 8002692:	2100      	movs	r1, #0
 8002694:	4618      	mov	r0, r3
 8002696:	f00b fb99 	bl	800ddcc <memset>
  if(hi2c->Instance==I2C1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a26      	ldr	r2, [pc, #152]	@ (8002738 <HAL_I2C_MspInit+0xc4>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d145      	bne.n	8002730 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80026a4:	f04f 0208 	mov.w	r2, #8
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4618      	mov	r0, r3
 80026bc:	f006 f99e 	bl	80089fc <HAL_RCCEx_PeriphCLKConfig>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80026c6:	f7ff ff0f 	bl	80024e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ca:	4b1c      	ldr	r3, [pc, #112]	@ (800273c <HAL_I2C_MspInit+0xc8>)
 80026cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026d0:	4a1a      	ldr	r2, [pc, #104]	@ (800273c <HAL_I2C_MspInit+0xc8>)
 80026d2:	f043 0302 	orr.w	r3, r3, #2
 80026d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026da:	4b18      	ldr	r3, [pc, #96]	@ (800273c <HAL_I2C_MspInit+0xc8>)
 80026dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	60fb      	str	r3, [r7, #12]
 80026e6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026e8:	23c0      	movs	r3, #192	@ 0xc0
 80026ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ee:	2312      	movs	r3, #18
 80026f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002700:	2304      	movs	r3, #4
 8002702:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002706:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800270a:	4619      	mov	r1, r3
 800270c:	480c      	ldr	r0, [pc, #48]	@ (8002740 <HAL_I2C_MspInit+0xcc>)
 800270e:	f004 f89d 	bl	800684c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002712:	4b0a      	ldr	r3, [pc, #40]	@ (800273c <HAL_I2C_MspInit+0xc8>)
 8002714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002718:	4a08      	ldr	r2, [pc, #32]	@ (800273c <HAL_I2C_MspInit+0xc8>)
 800271a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800271e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_I2C_MspInit+0xc8>)
 8002724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002730:	bf00      	nop
 8002732:	37e8      	adds	r7, #232	@ 0xe8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40005400 	.word	0x40005400
 800273c:	58024400 	.word	0x58024400
 8002740:	58020400 	.word	0x58020400

08002744 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0b      	ldr	r2, [pc, #44]	@ (8002780 <HAL_TIM_Base_MspInit+0x3c>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10e      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002756:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_TIM_Base_MspInit+0x40>)
 8002758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800275c:	4a09      	ldr	r2, [pc, #36]	@ (8002784 <HAL_TIM_Base_MspInit+0x40>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002766:	4b07      	ldr	r3, [pc, #28]	@ (8002784 <HAL_TIM_Base_MspInit+0x40>)
 8002768:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8002774:	bf00      	nop
 8002776:	3714      	adds	r7, #20
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	40010000 	.word	0x40010000
 8002784:	58024400 	.word	0x58024400

08002788 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	@ 0x28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	609a      	str	r2, [r3, #8]
 800279c:	60da      	str	r2, [r3, #12]
 800279e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027a8:	d154      	bne.n	8002854 <HAL_TIM_Encoder_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027aa:	4b2c      	ldr	r3, [pc, #176]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027b0:	4a2a      	ldr	r2, [pc, #168]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027ba:	4b28      	ldr	r3, [pc, #160]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c8:	4b24      	ldr	r3, [pc, #144]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ce:	4a23      	ldr	r2, [pc, #140]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027d8:	4b20      	ldr	r3, [pc, #128]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	4b1d      	ldr	r3, [pc, #116]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	4a1b      	ldr	r2, [pc, #108]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027ee:	f043 0302 	orr.w	r3, r3, #2
 80027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <HAL_TIM_Encoder_MspInit+0xd4>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3 (JTDO/TRACESWO)     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002804:	2320      	movs	r3, #32
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002814:	2301      	movs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	4810      	ldr	r0, [pc, #64]	@ (8002860 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002820:	f004 f814 	bl	800684c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002824:	2308      	movs	r3, #8
 8002826:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282c:	2300      	movs	r3, #0
 800282e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002830:	2300      	movs	r3, #0
 8002832:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002834:	2301      	movs	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	4809      	ldr	r0, [pc, #36]	@ (8002864 <HAL_TIM_Encoder_MspInit+0xdc>)
 8002840:	f004 f804 	bl	800684c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002844:	2200      	movs	r2, #0
 8002846:	2101      	movs	r1, #1
 8002848:	201c      	movs	r0, #28
 800284a:	f001 fe7a 	bl	8004542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800284e:	201c      	movs	r0, #28
 8002850:	f001 fe91 	bl	8004576 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	@ 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	58024400 	.word	0x58024400
 8002860:	58020000 	.word	0x58020000
 8002864:	58020400 	.word	0x58020400

08002868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a13      	ldr	r2, [pc, #76]	@ (80028d4 <HAL_TIM_MspPostInit+0x6c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d11f      	bne.n	80028ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800288a:	4b13      	ldr	r3, [pc, #76]	@ (80028d8 <HAL_TIM_MspPostInit+0x70>)
 800288c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002890:	4a11      	ldr	r2, [pc, #68]	@ (80028d8 <HAL_TIM_MspPostInit+0x70>)
 8002892:	f043 0310 	orr.w	r3, r3, #16
 8002896:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800289a:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <HAL_TIM_MspPostInit+0x70>)
 800289c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b6:	2300      	movs	r3, #0
 80028b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	4619      	mov	r1, r3
 80028c4:	4805      	ldr	r0, [pc, #20]	@ (80028dc <HAL_TIM_MspPostInit+0x74>)
 80028c6:	f003 ffc1 	bl	800684c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028ca:	bf00      	nop
 80028cc:	3720      	adds	r7, #32
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	40010000 	.word	0x40010000
 80028d8:	58024400 	.word	0x58024400
 80028dc:	58021000 	.word	0x58021000

080028e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b0ba      	sub	sp, #232	@ 0xe8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028f8:	f107 0310 	add.w	r3, r7, #16
 80028fc:	22c0      	movs	r2, #192	@ 0xc0
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f00b fa63 	bl	800ddcc <memset>
  if(huart->Instance==UART4)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a31      	ldr	r2, [pc, #196]	@ (80029d0 <HAL_UART_MspInit+0xf0>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d15b      	bne.n	80029c8 <HAL_UART_MspInit+0xe8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002910:	f04f 0202 	mov.w	r2, #2
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800291c:	2300      	movs	r3, #0
 800291e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002922:	f107 0310 	add.w	r3, r7, #16
 8002926:	4618      	mov	r0, r3
 8002928:	f006 f868 	bl	80089fc <HAL_RCCEx_PeriphCLKConfig>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002932:	f7ff fdd9 	bl	80024e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002936:	4b27      	ldr	r3, [pc, #156]	@ (80029d4 <HAL_UART_MspInit+0xf4>)
 8002938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800293c:	4a25      	ldr	r2, [pc, #148]	@ (80029d4 <HAL_UART_MspInit+0xf4>)
 800293e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002942:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002946:	4b23      	ldr	r3, [pc, #140]	@ (80029d4 <HAL_UART_MspInit+0xf4>)
 8002948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800294c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	4b1f      	ldr	r3, [pc, #124]	@ (80029d4 <HAL_UART_MspInit+0xf4>)
 8002956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295a:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_UART_MspInit+0xf4>)
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002964:	4b1b      	ldr	r3, [pc, #108]	@ (80029d4 <HAL_UART_MspInit+0xf4>)
 8002966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002972:	2301      	movs	r3, #1
 8002974:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800298a:	2308      	movs	r3, #8
 800298c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002990:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002994:	4619      	mov	r1, r3
 8002996:	4810      	ldr	r0, [pc, #64]	@ (80029d8 <HAL_UART_MspInit+0xf8>)
 8002998:	f003 ff58 	bl	800684c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800299c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80029a0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a4:	2302      	movs	r3, #2
 80029a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 80029b6:	2306      	movs	r3, #6
 80029b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4805      	ldr	r0, [pc, #20]	@ (80029d8 <HAL_UART_MspInit+0xf8>)
 80029c4:	f003 ff42 	bl	800684c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80029c8:	bf00      	nop
 80029ca:	37e8      	adds	r7, #232	@ 0xe8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40004c00 	.word	0x40004c00
 80029d4:	58024400 	.word	0x58024400
 80029d8:	58020000 	.word	0x58020000

080029dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <NMI_Handler+0x4>

080029e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <HardFault_Handler+0x4>

080029ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <MemManage_Handler+0x4>

080029f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f8:	bf00      	nop
 80029fa:	e7fd      	b.n	80029f8 <BusFault_Handler+0x4>

080029fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a00:	bf00      	nop
 8002a02:	e7fd      	b.n	8002a00 <UsageFault_Handler+0x4>

08002a04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr

08002a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a12:	b480      	push	{r7}
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a32:	f000 f9a9 	bl	8002d88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY1_Pin);
 8002a3e:	2008      	movs	r0, #8
 8002a40:	f004 f8cd 	bl	8006bde <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a44:	bf00      	nop
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002a4c:	4802      	ldr	r0, [pc, #8]	@ (8002a58 <DMA1_Stream0_IRQHandler+0x10>)
 8002a4e:	f002 fbeb 	bl	8005228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	24000164 	.word	0x24000164

08002a5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a60:	4802      	ldr	r0, [pc, #8]	@ (8002a6c <TIM2_IRQHandler+0x10>)
 8002a62:	f008 ffe3 	bl	800ba2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	24000228 	.word	0x24000228

08002a70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a78:	4a14      	ldr	r2, [pc, #80]	@ (8002acc <_sbrk+0x5c>)
 8002a7a:	4b15      	ldr	r3, [pc, #84]	@ (8002ad0 <_sbrk+0x60>)
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a84:	4b13      	ldr	r3, [pc, #76]	@ (8002ad4 <_sbrk+0x64>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d102      	bne.n	8002a92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <_sbrk+0x64>)
 8002a8e:	4a12      	ldr	r2, [pc, #72]	@ (8002ad8 <_sbrk+0x68>)
 8002a90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a92:	4b10      	ldr	r3, [pc, #64]	@ (8002ad4 <_sbrk+0x64>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d207      	bcs.n	8002ab0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa0:	f00b f99c 	bl	800dddc <__errno>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	220c      	movs	r2, #12
 8002aa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	e009      	b.n	8002ac4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <_sbrk+0x64>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ab6:	4b07      	ldr	r3, [pc, #28]	@ (8002ad4 <_sbrk+0x64>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4413      	add	r3, r2
 8002abe:	4a05      	ldr	r2, [pc, #20]	@ (8002ad4 <_sbrk+0x64>)
 8002ac0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3718      	adds	r7, #24
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	24080000 	.word	0x24080000
 8002ad0:	00000400 	.word	0x00000400
 8002ad4:	24000330 	.word	0x24000330
 8002ad8:	24000480 	.word	0x24000480

08002adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ae0:	4b43      	ldr	r3, [pc, #268]	@ (8002bf0 <SystemInit+0x114>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae6:	4a42      	ldr	r2, [pc, #264]	@ (8002bf0 <SystemInit+0x114>)
 8002ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002af0:	4b40      	ldr	r3, [pc, #256]	@ (8002bf4 <SystemInit+0x118>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 030f 	and.w	r3, r3, #15
 8002af8:	2b06      	cmp	r3, #6
 8002afa:	d807      	bhi.n	8002b0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002afc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bf4 <SystemInit+0x118>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 030f 	bic.w	r3, r3, #15
 8002b04:	4a3b      	ldr	r2, [pc, #236]	@ (8002bf4 <SystemInit+0x118>)
 8002b06:	f043 0307 	orr.w	r3, r3, #7
 8002b0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002b0c:	4b3a      	ldr	r3, [pc, #232]	@ (8002bf8 <SystemInit+0x11c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a39      	ldr	r2, [pc, #228]	@ (8002bf8 <SystemInit+0x11c>)
 8002b12:	f043 0301 	orr.w	r3, r3, #1
 8002b16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002b18:	4b37      	ldr	r3, [pc, #220]	@ (8002bf8 <SystemInit+0x11c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002b1e:	4b36      	ldr	r3, [pc, #216]	@ (8002bf8 <SystemInit+0x11c>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	4935      	ldr	r1, [pc, #212]	@ (8002bf8 <SystemInit+0x11c>)
 8002b24:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <SystemInit+0x120>)
 8002b26:	4013      	ands	r3, r2
 8002b28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002b2a:	4b32      	ldr	r3, [pc, #200]	@ (8002bf4 <SystemInit+0x118>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002b36:	4b2f      	ldr	r3, [pc, #188]	@ (8002bf4 <SystemInit+0x118>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 030f 	bic.w	r3, r3, #15
 8002b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf4 <SystemInit+0x118>)
 8002b40:	f043 0307 	orr.w	r3, r3, #7
 8002b44:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002b46:	4b2c      	ldr	r3, [pc, #176]	@ (8002bf8 <SystemInit+0x11c>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002bf8 <SystemInit+0x11c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002b52:	4b29      	ldr	r3, [pc, #164]	@ (8002bf8 <SystemInit+0x11c>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002b58:	4b27      	ldr	r3, [pc, #156]	@ (8002bf8 <SystemInit+0x11c>)
 8002b5a:	4a29      	ldr	r2, [pc, #164]	@ (8002c00 <SystemInit+0x124>)
 8002b5c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002b5e:	4b26      	ldr	r3, [pc, #152]	@ (8002bf8 <SystemInit+0x11c>)
 8002b60:	4a28      	ldr	r2, [pc, #160]	@ (8002c04 <SystemInit+0x128>)
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002b64:	4b24      	ldr	r3, [pc, #144]	@ (8002bf8 <SystemInit+0x11c>)
 8002b66:	4a28      	ldr	r2, [pc, #160]	@ (8002c08 <SystemInit+0x12c>)
 8002b68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002b6a:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <SystemInit+0x11c>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002b70:	4b21      	ldr	r3, [pc, #132]	@ (8002bf8 <SystemInit+0x11c>)
 8002b72:	4a25      	ldr	r2, [pc, #148]	@ (8002c08 <SystemInit+0x12c>)
 8002b74:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002b76:	4b20      	ldr	r3, [pc, #128]	@ (8002bf8 <SystemInit+0x11c>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf8 <SystemInit+0x11c>)
 8002b7e:	4a22      	ldr	r2, [pc, #136]	@ (8002c08 <SystemInit+0x12c>)
 8002b80:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002b82:	4b1d      	ldr	r3, [pc, #116]	@ (8002bf8 <SystemInit+0x11c>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b88:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf8 <SystemInit+0x11c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf8 <SystemInit+0x11c>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b94:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <SystemInit+0x11c>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c0c <SystemInit+0x130>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c10 <SystemInit+0x134>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ba6:	d202      	bcs.n	8002bae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <SystemInit+0x138>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002bae:	4b12      	ldr	r3, [pc, #72]	@ (8002bf8 <SystemInit+0x11c>)
 8002bb0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002bb4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d113      	bne.n	8002be4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf8 <SystemInit+0x11c>)
 8002bbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002bc2:	4a0d      	ldr	r2, [pc, #52]	@ (8002bf8 <SystemInit+0x11c>)
 8002bc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002bc8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002bcc:	4b12      	ldr	r3, [pc, #72]	@ (8002c18 <SystemInit+0x13c>)
 8002bce:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002bd2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002bd4:	4b08      	ldr	r3, [pc, #32]	@ (8002bf8 <SystemInit+0x11c>)
 8002bd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002bda:	4a07      	ldr	r2, [pc, #28]	@ (8002bf8 <SystemInit+0x11c>)
 8002bdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002be0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	e000ed00 	.word	0xe000ed00
 8002bf4:	52002000 	.word	0x52002000
 8002bf8:	58024400 	.word	0x58024400
 8002bfc:	eaf6ed7f 	.word	0xeaf6ed7f
 8002c00:	02020200 	.word	0x02020200
 8002c04:	01ff0000 	.word	0x01ff0000
 8002c08:	01010280 	.word	0x01010280
 8002c0c:	5c001000 	.word	0x5c001000
 8002c10:	ffff0000 	.word	0xffff0000
 8002c14:	51008108 	.word	0x51008108
 8002c18:	52004000 	.word	0x52004000

08002c1c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002c20:	4b09      	ldr	r3, [pc, #36]	@ (8002c48 <ExitRun0Mode+0x2c>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a08      	ldr	r2, [pc, #32]	@ (8002c48 <ExitRun0Mode+0x2c>)
 8002c26:	f043 0302 	orr.w	r3, r3, #2
 8002c2a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002c2c:	bf00      	nop
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <ExitRun0Mode+0x2c>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f9      	beq.n	8002c2e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	58024800 	.word	0x58024800

08002c4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002c4c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002c88 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002c50:	f7ff ffe4 	bl	8002c1c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c54:	f7ff ff42 	bl	8002adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c58:	480c      	ldr	r0, [pc, #48]	@ (8002c8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c5a:	490d      	ldr	r1, [pc, #52]	@ (8002c90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c60:	e002      	b.n	8002c68 <LoopCopyDataInit>

08002c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c66:	3304      	adds	r3, #4

08002c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c6c:	d3f9      	bcc.n	8002c62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c70:	4c0a      	ldr	r4, [pc, #40]	@ (8002c9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c74:	e001      	b.n	8002c7a <LoopFillZerobss>

08002c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c78:	3204      	adds	r2, #4

08002c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c7c:	d3fb      	bcc.n	8002c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c7e:	f00b f8b3 	bl	800dde8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c82:	f7fe fd65 	bl	8001750 <main>
  bx  lr
 8002c86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002c8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002c90:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002c94:	0800e81c 	.word	0x0800e81c
  ldr r2, =_sbss
 8002c98:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8002c9c:	24000480 	.word	0x24000480

08002ca0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ca0:	e7fe      	b.n	8002ca0 <ADC3_IRQHandler>
	...

08002ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002caa:	2003      	movs	r0, #3
 8002cac:	f001 fc3e 	bl	800452c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cb0:	f005 fcce 	bl	8008650 <HAL_RCC_GetSysClockFreq>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <HAL_Init+0x68>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	4913      	ldr	r1, [pc, #76]	@ (8002d10 <HAL_Init+0x6c>)
 8002cc2:	5ccb      	ldrb	r3, [r1, r3]
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ccc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cce:	4b0f      	ldr	r3, [pc, #60]	@ (8002d0c <HAL_Init+0x68>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	4a0e      	ldr	r2, [pc, #56]	@ (8002d10 <HAL_Init+0x6c>)
 8002cd8:	5cd3      	ldrb	r3, [r2, r3]
 8002cda:	f003 031f 	and.w	r3, r3, #31
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce4:	4a0b      	ldr	r2, [pc, #44]	@ (8002d14 <HAL_Init+0x70>)
 8002ce6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8002d18 <HAL_Init+0x74>)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cee:	200f      	movs	r0, #15
 8002cf0:	f000 f814 	bl	8002d1c <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e002      	b.n	8002d04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfe:	f7ff fbf9 	bl	80024f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	58024400 	.word	0x58024400
 8002d10:	0800e798 	.word	0x0800e798
 8002d14:	24000020 	.word	0x24000020
 8002d18:	2400001c 	.word	0x2400001c

08002d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d24:	4b15      	ldr	r3, [pc, #84]	@ (8002d7c <HAL_InitTick+0x60>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e021      	b.n	8002d74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d30:	4b13      	ldr	r3, [pc, #76]	@ (8002d80 <HAL_InitTick+0x64>)
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	4b11      	ldr	r3, [pc, #68]	@ (8002d7c <HAL_InitTick+0x60>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	f001 fc23 	bl	8004592 <HAL_SYSTICK_Config>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e00e      	b.n	8002d74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b0f      	cmp	r3, #15
 8002d5a:	d80a      	bhi.n	8002d72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	f001 fbed 	bl	8004542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d68:	4a06      	ldr	r2, [pc, #24]	@ (8002d84 <HAL_InitTick+0x68>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e000      	b.n	8002d74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3708      	adds	r7, #8
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	24000028 	.word	0x24000028
 8002d80:	2400001c 	.word	0x2400001c
 8002d84:	24000024 	.word	0x24000024

08002d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_IncTick+0x20>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b06      	ldr	r3, [pc, #24]	@ (8002dac <HAL_IncTick+0x24>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	4a04      	ldr	r2, [pc, #16]	@ (8002dac <HAL_IncTick+0x24>)
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	24000028 	.word	0x24000028
 8002dac:	24000334 	.word	0x24000334

08002db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b03      	ldr	r3, [pc, #12]	@ (8002dc4 <HAL_GetTick+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	24000334 	.word	0x24000334

08002dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff ffee 	bl	8002db0 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d005      	beq.n	8002dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de2:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <HAL_Delay+0x44>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002dee:	bf00      	nop
 8002df0:	f7ff ffde 	bl	8002db0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d8f7      	bhi.n	8002df0 <HAL_Delay+0x28>
  {
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	24000028 	.word	0x24000028

08002e10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <HAL_GetREVID+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	0c1b      	lsrs	r3, r3, #16
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	5c001000 	.word	0x5c001000

08002e28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	431a      	orrs	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	609a      	str	r2, [r3, #8]
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr

08002e4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b083      	sub	sp, #12
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	431a      	orrs	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b087      	sub	sp, #28
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <LL_ADC_SetChannelPreselection+0x24>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	2201      	movs	r2, #1
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	e015      	b.n	8002ee0 <LL_ADC_SetChannelPreselection+0x50>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8002eca:	2320      	movs	r3, #32
 8002ecc:	e003      	b.n	8002ed6 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	fab3 f383 	clz	r3, r3
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	f003 031f 	and.w	r3, r3, #31
 8002eda:	2201      	movs	r2, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	69d2      	ldr	r2, [r2, #28]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002eea:	bf00      	nop
 8002eec:	371c      	adds	r7, #28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b087      	sub	sp, #28
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3360      	adds	r3, #96	@ 0x60
 8002f08:	461a      	mov	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	430b      	orrs	r3, r1
 8002f24:	431a      	orrs	r2, r3
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f36:	b480      	push	{r7}
 8002f38:	b085      	sub	sp, #20
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b087      	sub	sp, #28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	3360      	adds	r3, #96	@ 0x60
 8002f78:	461a      	mov	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	601a      	str	r2, [r3, #0]
  }
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b087      	sub	sp, #28
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	3330      	adds	r3, #48	@ 0x30
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	0a1b      	lsrs	r3, r3, #8
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f003 030c 	and.w	r3, r3, #12
 8002fe0:	4413      	add	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 031f 	and.w	r3, r3, #31
 8002fee:	211f      	movs	r1, #31
 8002ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0e9b      	lsrs	r3, r3, #26
 8002ffc:	f003 011f 	and.w	r1, r3, #31
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 031f 	and.w	r3, r3, #31
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	431a      	orrs	r2, r3
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f023 0203 	bic.w	r2, r3, #3
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	60da      	str	r2, [r3, #12]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003042:	b480      	push	{r7}
 8003044:	b087      	sub	sp, #28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	3314      	adds	r3, #20
 8003052:	461a      	mov	r2, r3
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	0e5b      	lsrs	r3, r3, #25
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	4413      	add	r3, r2
 8003060:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	0d1b      	lsrs	r3, r3, #20
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2107      	movs	r1, #7
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	401a      	ands	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	0d1b      	lsrs	r3, r3, #20
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	431a      	orrs	r2, r3
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800308c:	bf00      	nop
 800308e:	371c      	adds	r7, #28
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b0:	43db      	mvns	r3, r3
 80030b2:	401a      	ands	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	f003 0318 	and.w	r3, r3, #24
 80030ba:	4908      	ldr	r1, [pc, #32]	@ (80030dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80030bc:	40d9      	lsrs	r1, r3
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	400b      	ands	r3, r1
 80030c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c6:	431a      	orrs	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	000fffff 	.word	0x000fffff

080030e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f003 031f 	and.w	r3, r3, #31
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	4b04      	ldr	r3, [pc, #16]	@ (800311c <LL_ADC_DisableDeepPowerDown+0x20>)
 800310a:	4013      	ands	r3, r2
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6093      	str	r3, [r2, #8]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	5fffffc0 	.word	0x5fffffc0

08003120 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003130:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003134:	d101      	bne.n	800313a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	4b05      	ldr	r3, [pc, #20]	@ (800316c <LL_ADC_EnableInternalRegulator+0x24>)
 8003156:	4013      	ands	r3, r2
 8003158:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	6fffffc0 	.word	0x6fffffc0

08003170 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003184:	d101      	bne.n	800318a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	4b05      	ldr	r3, [pc, #20]	@ (80031bc <LL_ADC_Enable+0x24>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	f043 0201 	orr.w	r2, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	7fffffc0 	.word	0x7fffffc0

080031c0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d101      	bne.n	80031d8 <LL_ADC_IsEnabled+0x18>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <LL_ADC_IsEnabled+0x1a>
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
	...

080031e8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	4b05      	ldr	r3, [pc, #20]	@ (800320c <LL_ADC_REG_StartConversion+0x24>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	f043 0204 	orr.w	r2, r3, #4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003200:	bf00      	nop
 8003202:	370c      	adds	r7, #12
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	7fffffc0 	.word	0x7fffffc0

08003210 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b04      	cmp	r3, #4
 8003222:	d101      	bne.n	8003228 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b08      	cmp	r3, #8
 8003248:	d101      	bne.n	800324e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800325c:	b590      	push	{r4, r7, lr}
 800325e:	b089      	sub	sp, #36	@ 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e18f      	b.n	8003596 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff f94f 	bl	8002528 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff3f 	bl	8003120 <LL_ADC_IsDeepPowerDownEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d004      	beq.n	80032b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff ff25 	bl	80030fc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff ff5a 	bl	8003170 <LL_ADC_IsInternalRegulatorEnabled>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d114      	bne.n	80032ec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ff3e 	bl	8003148 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032cc:	4b87      	ldr	r3, [pc, #540]	@ (80034ec <HAL_ADC_Init+0x290>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	099b      	lsrs	r3, r3, #6
 80032d2:	4a87      	ldr	r2, [pc, #540]	@ (80034f0 <HAL_ADC_Init+0x294>)
 80032d4:	fba2 2303 	umull	r2, r3, r2, r3
 80032d8:	099b      	lsrs	r3, r3, #6
 80032da:	3301      	adds	r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032de:	e002      	b.n	80032e6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1f9      	bne.n	80032e0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff3d 	bl	8003170 <LL_ADC_IsInternalRegulatorEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10d      	bne.n	8003318 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003300:	f043 0210 	orr.w	r2, r3, #16
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800330c:	f043 0201 	orr.w	r2, r3, #1
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff ff77 	bl	8003210 <LL_ADC_REG_IsConversionOngoing>
 8003322:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003328:	f003 0310 	and.w	r3, r3, #16
 800332c:	2b00      	cmp	r3, #0
 800332e:	f040 8129 	bne.w	8003584 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 8125 	bne.w	8003584 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003342:	f043 0202 	orr.w	r2, r3, #2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff ff36 	bl	80031c0 <LL_ADC_IsEnabled>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d136      	bne.n	80033c8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a65      	ldr	r2, [pc, #404]	@ (80034f4 <HAL_ADC_Init+0x298>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_ADC_Init+0x112>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a63      	ldr	r2, [pc, #396]	@ (80034f8 <HAL_ADC_Init+0x29c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d10e      	bne.n	800338c <HAL_ADC_Init+0x130>
 800336e:	4861      	ldr	r0, [pc, #388]	@ (80034f4 <HAL_ADC_Init+0x298>)
 8003370:	f7ff ff26 	bl	80031c0 <LL_ADC_IsEnabled>
 8003374:	4604      	mov	r4, r0
 8003376:	4860      	ldr	r0, [pc, #384]	@ (80034f8 <HAL_ADC_Init+0x29c>)
 8003378:	f7ff ff22 	bl	80031c0 <LL_ADC_IsEnabled>
 800337c:	4603      	mov	r3, r0
 800337e:	4323      	orrs	r3, r4
 8003380:	2b00      	cmp	r3, #0
 8003382:	bf0c      	ite	eq
 8003384:	2301      	moveq	r3, #1
 8003386:	2300      	movne	r3, #0
 8003388:	b2db      	uxtb	r3, r3
 800338a:	e008      	b.n	800339e <HAL_ADC_Init+0x142>
 800338c:	485b      	ldr	r0, [pc, #364]	@ (80034fc <HAL_ADC_Init+0x2a0>)
 800338e:	f7ff ff17 	bl	80031c0 <LL_ADC_IsEnabled>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d012      	beq.n	80033c8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a53      	ldr	r2, [pc, #332]	@ (80034f4 <HAL_ADC_Init+0x298>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_ADC_Init+0x15a>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a51      	ldr	r2, [pc, #324]	@ (80034f8 <HAL_ADC_Init+0x29c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <HAL_ADC_Init+0x15e>
 80033b6:	4a52      	ldr	r2, [pc, #328]	@ (8003500 <HAL_ADC_Init+0x2a4>)
 80033b8:	e000      	b.n	80033bc <HAL_ADC_Init+0x160>
 80033ba:	4a52      	ldr	r2, [pc, #328]	@ (8003504 <HAL_ADC_Init+0x2a8>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	4619      	mov	r1, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	f7ff fd30 	bl	8002e28 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80033c8:	f7ff fd22 	bl	8002e10 <HAL_GetREVID>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d914      	bls.n	8003400 <HAL_ADC_Init+0x1a4>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d110      	bne.n	8003400 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	7d5b      	ldrb	r3, [r3, #21]
 80033e2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033e8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80033ee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7f1b      	ldrb	r3, [r3, #28]
 80033f4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80033f6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033f8:	f043 030c 	orr.w	r3, r3, #12
 80033fc:	61bb      	str	r3, [r7, #24]
 80033fe:	e00d      	b.n	800341c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7d5b      	ldrb	r3, [r3, #21]
 8003404:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800340a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003410:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	7f1b      	ldrb	r3, [r3, #28]
 8003416:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7f1b      	ldrb	r3, [r3, #28]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d106      	bne.n	8003432 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	3b01      	subs	r3, #1
 800342a:	045b      	lsls	r3, r3, #17
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003436:	2b00      	cmp	r3, #0
 8003438:	d009      	beq.n	800344e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68da      	ldr	r2, [r3, #12]
 8003454:	4b2c      	ldr	r3, [pc, #176]	@ (8003508 <HAL_ADC_Init+0x2ac>)
 8003456:	4013      	ands	r3, r2
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	69b9      	ldr	r1, [r7, #24]
 800345e:	430b      	orrs	r3, r1
 8003460:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7ff fed2 	bl	8003210 <LL_ADC_REG_IsConversionOngoing>
 800346c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fedf 	bl	8003236 <LL_ADC_INJ_IsConversionOngoing>
 8003478:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d15f      	bne.n	8003540 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d15c      	bne.n	8003540 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	7d1b      	ldrb	r3, [r3, #20]
 800348a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	4b1c      	ldr	r3, [pc, #112]	@ (800350c <HAL_ADC_Init+0x2b0>)
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	69b9      	ldr	r1, [r7, #24]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d130      	bne.n	8003514 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691a      	ldr	r2, [r3, #16]
 80034be:	4b14      	ldr	r3, [pc, #80]	@ (8003510 <HAL_ADC_Init+0x2b4>)
 80034c0:	4013      	ands	r3, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034c6:	3a01      	subs	r2, #1
 80034c8:	0411      	lsls	r1, r2, #16
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80034d4:	4311      	orrs	r1, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034da:	430a      	orrs	r2, r1
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	611a      	str	r2, [r3, #16]
 80034e8:	e01c      	b.n	8003524 <HAL_ADC_Init+0x2c8>
 80034ea:	bf00      	nop
 80034ec:	2400001c 	.word	0x2400001c
 80034f0:	053e2d63 	.word	0x053e2d63
 80034f4:	40022000 	.word	0x40022000
 80034f8:	40022100 	.word	0x40022100
 80034fc:	58026000 	.word	0x58026000
 8003500:	40022300 	.word	0x40022300
 8003504:	58026300 	.word	0x58026300
 8003508:	fff0c003 	.word	0xfff0c003
 800350c:	ffffbffc 	.word	0xffffbffc
 8003510:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	691a      	ldr	r2, [r3, #16]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0201 	bic.w	r2, r2, #1
 8003522:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fd16 	bl	8003f6c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d10c      	bne.n	8003562 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354e:	f023 010f 	bic.w	r1, r3, #15
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	1e5a      	subs	r2, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003560:	e007      	b.n	8003572 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 020f 	bic.w	r2, r2, #15
 8003570:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003576:	f023 0303 	bic.w	r3, r3, #3
 800357a:	f043 0201 	orr.w	r2, r3, #1
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
 8003582:	e007      	b.n	8003594 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003588:	f043 0210 	orr.w	r2, r3, #16
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003594:	7ffb      	ldrb	r3, [r7, #31]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3724      	adds	r7, #36	@ 0x24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd90      	pop	{r4, r7, pc}
 800359e:	bf00      	nop

080035a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a55      	ldr	r2, [pc, #340]	@ (8003708 <HAL_ADC_Start_DMA+0x168>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_ADC_Start_DMA+0x20>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a54      	ldr	r2, [pc, #336]	@ (800370c <HAL_ADC_Start_DMA+0x16c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d101      	bne.n	80035c4 <HAL_ADC_Start_DMA+0x24>
 80035c0:	4b53      	ldr	r3, [pc, #332]	@ (8003710 <HAL_ADC_Start_DMA+0x170>)
 80035c2:	e000      	b.n	80035c6 <HAL_ADC_Start_DMA+0x26>
 80035c4:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <HAL_ADC_Start_DMA+0x174>)
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fd8a 	bl	80030e0 <LL_ADC_GetMultimode>
 80035cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fe1c 	bl	8003210 <LL_ADC_REG_IsConversionOngoing>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 808c 	bne.w	80036f8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d101      	bne.n	80035ee <HAL_ADC_Start_DMA+0x4e>
 80035ea:	2302      	movs	r3, #2
 80035ec:	e087      	b.n	80036fe <HAL_ADC_Start_DMA+0x15e>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	2b05      	cmp	r3, #5
 8003600:	d002      	beq.n	8003608 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b09      	cmp	r3, #9
 8003606:	d170      	bne.n	80036ea <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 fb91 	bl	8003d30 <ADC_Enable>
 800360e:	4603      	mov	r3, r0
 8003610:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d163      	bne.n	80036e0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800361c:	4b3e      	ldr	r3, [pc, #248]	@ (8003718 <HAL_ADC_Start_DMA+0x178>)
 800361e:	4013      	ands	r3, r2
 8003620:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a37      	ldr	r2, [pc, #220]	@ (800370c <HAL_ADC_Start_DMA+0x16c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d002      	beq.n	8003638 <HAL_ADC_Start_DMA+0x98>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	e000      	b.n	800363a <HAL_ADC_Start_DMA+0x9a>
 8003638:	4b33      	ldr	r3, [pc, #204]	@ (8003708 <HAL_ADC_Start_DMA+0x168>)
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	6812      	ldr	r2, [r2, #0]
 800363e:	4293      	cmp	r3, r2
 8003640:	d002      	beq.n	8003648 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d105      	bne.n	8003654 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d006      	beq.n	800366e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	f023 0206 	bic.w	r2, r3, #6
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	659a      	str	r2, [r3, #88]	@ 0x58
 800366c:	e002      	b.n	8003674 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2200      	movs	r2, #0
 8003672:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003678:	4a28      	ldr	r2, [pc, #160]	@ (800371c <HAL_ADC_Start_DMA+0x17c>)
 800367a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003680:	4a27      	ldr	r2, [pc, #156]	@ (8003720 <HAL_ADC_Start_DMA+0x180>)
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	4a26      	ldr	r2, [pc, #152]	@ (8003724 <HAL_ADC_Start_DMA+0x184>)
 800368a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	221c      	movs	r2, #28
 8003692:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f042 0210 	orr.w	r2, r2, #16
 80036aa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f7ff fcb0 	bl	800301c <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3340      	adds	r3, #64	@ 0x40
 80036c6:	4619      	mov	r1, r3
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f001 fb42 	bl	8004d54 <HAL_DMA_Start_IT>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fd85 	bl	80031e8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80036de:	e00d      	b.n	80036fc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80036e8:	e008      	b.n	80036fc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80036f6:	e001      	b.n	80036fc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
 80036fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40022000 	.word	0x40022000
 800370c:	40022100 	.word	0x40022100
 8003710:	40022300 	.word	0x40022300
 8003714:	58026300 	.word	0x58026300
 8003718:	fffff0fe 	.word	0xfffff0fe
 800371c:	08003e45 	.word	0x08003e45
 8003720:	08003f1d 	.word	0x08003f1d
 8003724:	08003f39 	.word	0x08003f39

08003728 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003750:	b590      	push	{r4, r7, lr}
 8003752:	b08d      	sub	sp, #52	@ 0x34
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	4a65      	ldr	r2, [pc, #404]	@ (8003900 <HAL_ADC_ConfigChannel+0x1b0>)
 800376a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_ADC_ConfigChannel+0x2a>
 8003776:	2302      	movs	r3, #2
 8003778:	e2c7      	b.n	8003d0a <HAL_ADC_ConfigChannel+0x5ba>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fd42 	bl	8003210 <LL_ADC_REG_IsConversionOngoing>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	f040 82ac 	bne.w	8003cec <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	db2c      	blt.n	80037f6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d108      	bne.n	80037ba <HAL_ADC_ConfigChannel+0x6a>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e9b      	lsrs	r3, r3, #26
 80037ae:	f003 031f 	and.w	r3, r3, #31
 80037b2:	2201      	movs	r2, #1
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	e016      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x98>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa93 f3a3 	rbit	r3, r3
 80037c6:	613b      	str	r3, [r7, #16]
  return result;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80037d2:	2320      	movs	r3, #32
 80037d4:	e003      	b.n	80037de <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	fab3 f383 	clz	r3, r3
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	2201      	movs	r2, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	6812      	ldr	r2, [r2, #0]
 80037ec:	69d1      	ldr	r1, [r2, #28]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	6812      	ldr	r2, [r2, #0]
 80037f2:	430b      	orrs	r3, r1
 80037f4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6818      	ldr	r0, [r3, #0]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	6859      	ldr	r1, [r3, #4]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	461a      	mov	r2, r3
 8003804:	f7ff fbde 	bl	8002fc4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7ff fcff 	bl	8003210 <LL_ADC_REG_IsConversionOngoing>
 8003812:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fd0c 	bl	8003236 <LL_ADC_INJ_IsConversionOngoing>
 800381e:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003822:	2b00      	cmp	r3, #0
 8003824:	f040 80b8 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 80b4 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	6819      	ldr	r1, [r3, #0]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	461a      	mov	r2, r3
 800383e:	f7ff fc00 	bl	8003042 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003842:	4b30      	ldr	r3, [pc, #192]	@ (8003904 <HAL_ADC_ConfigChannel+0x1b4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800384a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800384e:	d10b      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x118>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	089b      	lsrs	r3, r3, #2
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	e01d      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x154>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_ADC_ConfigChannel+0x13e>
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	089b      	lsrs	r3, r3, #2
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	e00a      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x154>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	2b04      	cmp	r3, #4
 80038ac:	d02c      	beq.n	8003908 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6919      	ldr	r1, [r3, #16]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	f7ff fb1b 	bl	8002ef6 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	6919      	ldr	r1, [r3, #16]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	7e5b      	ldrb	r3, [r3, #25]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d102      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x186>
 80038d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80038d4:	e000      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x188>
 80038d6:	2300      	movs	r3, #0
 80038d8:	461a      	mov	r2, r3
 80038da:	f7ff fb45 	bl	8002f68 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	6919      	ldr	r1, [r3, #16]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	7e1b      	ldrb	r3, [r3, #24]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d102      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x1a4>
 80038ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80038f2:	e000      	b.n	80038f6 <HAL_ADC_ConfigChannel+0x1a6>
 80038f4:	2300      	movs	r3, #0
 80038f6:	461a      	mov	r2, r3
 80038f8:	f7ff fb1d 	bl	8002f36 <LL_ADC_SetDataRightShift>
 80038fc:	e04c      	b.n	8003998 <HAL_ADC_ConfigChannel+0x248>
 80038fe:	bf00      	nop
 8003900:	47ff0000 	.word	0x47ff0000
 8003904:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800390e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	069b      	lsls	r3, r3, #26
 8003918:	429a      	cmp	r2, r3
 800391a:	d107      	bne.n	800392c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800392a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003932:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	069b      	lsls	r3, r3, #26
 800393c:	429a      	cmp	r2, r3
 800393e:	d107      	bne.n	8003950 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800394e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003956:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	069b      	lsls	r3, r3, #26
 8003960:	429a      	cmp	r2, r3
 8003962:	d107      	bne.n	8003974 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003972:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800397a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	069b      	lsls	r3, r3, #26
 8003984:	429a      	cmp	r2, r3
 8003986:	d107      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003996:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fc0f 	bl	80031c0 <LL_ADC_IsEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f040 81aa 	bne.w	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f7ff fb6e 	bl	8003098 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4a87      	ldr	r2, [pc, #540]	@ (8003be0 <HAL_ADC_ConfigChannel+0x490>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	f040 809a 	bne.w	8003afc <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4984      	ldr	r1, [pc, #528]	@ (8003be4 <HAL_ADC_ConfigChannel+0x494>)
 80039d2:	428b      	cmp	r3, r1
 80039d4:	d147      	bne.n	8003a66 <HAL_ADC_ConfigChannel+0x316>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4983      	ldr	r1, [pc, #524]	@ (8003be8 <HAL_ADC_ConfigChannel+0x498>)
 80039dc:	428b      	cmp	r3, r1
 80039de:	d040      	beq.n	8003a62 <HAL_ADC_ConfigChannel+0x312>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4981      	ldr	r1, [pc, #516]	@ (8003bec <HAL_ADC_ConfigChannel+0x49c>)
 80039e6:	428b      	cmp	r3, r1
 80039e8:	d039      	beq.n	8003a5e <HAL_ADC_ConfigChannel+0x30e>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4980      	ldr	r1, [pc, #512]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x4a0>)
 80039f0:	428b      	cmp	r3, r1
 80039f2:	d032      	beq.n	8003a5a <HAL_ADC_ConfigChannel+0x30a>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	497e      	ldr	r1, [pc, #504]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x4a4>)
 80039fa:	428b      	cmp	r3, r1
 80039fc:	d02b      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x306>
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	497d      	ldr	r1, [pc, #500]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x4a8>)
 8003a04:	428b      	cmp	r3, r1
 8003a06:	d024      	beq.n	8003a52 <HAL_ADC_ConfigChannel+0x302>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	497b      	ldr	r1, [pc, #492]	@ (8003bfc <HAL_ADC_ConfigChannel+0x4ac>)
 8003a0e:	428b      	cmp	r3, r1
 8003a10:	d01d      	beq.n	8003a4e <HAL_ADC_ConfigChannel+0x2fe>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	497a      	ldr	r1, [pc, #488]	@ (8003c00 <HAL_ADC_ConfigChannel+0x4b0>)
 8003a18:	428b      	cmp	r3, r1
 8003a1a:	d016      	beq.n	8003a4a <HAL_ADC_ConfigChannel+0x2fa>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4978      	ldr	r1, [pc, #480]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4b4>)
 8003a22:	428b      	cmp	r3, r1
 8003a24:	d00f      	beq.n	8003a46 <HAL_ADC_ConfigChannel+0x2f6>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4977      	ldr	r1, [pc, #476]	@ (8003c08 <HAL_ADC_ConfigChannel+0x4b8>)
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	d008      	beq.n	8003a42 <HAL_ADC_ConfigChannel+0x2f2>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4975      	ldr	r1, [pc, #468]	@ (8003c0c <HAL_ADC_ConfigChannel+0x4bc>)
 8003a36:	428b      	cmp	r3, r1
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x2ee>
 8003a3a:	4b75      	ldr	r3, [pc, #468]	@ (8003c10 <HAL_ADC_ConfigChannel+0x4c0>)
 8003a3c:	e05a      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	e058      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a42:	4b74      	ldr	r3, [pc, #464]	@ (8003c14 <HAL_ADC_ConfigChannel+0x4c4>)
 8003a44:	e056      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a46:	4b74      	ldr	r3, [pc, #464]	@ (8003c18 <HAL_ADC_ConfigChannel+0x4c8>)
 8003a48:	e054      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a4a:	4b6e      	ldr	r3, [pc, #440]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4b4>)
 8003a4c:	e052      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c00 <HAL_ADC_ConfigChannel+0x4b0>)
 8003a50:	e050      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a52:	4b72      	ldr	r3, [pc, #456]	@ (8003c1c <HAL_ADC_ConfigChannel+0x4cc>)
 8003a54:	e04e      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a56:	4b72      	ldr	r3, [pc, #456]	@ (8003c20 <HAL_ADC_ConfigChannel+0x4d0>)
 8003a58:	e04c      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a5a:	4b72      	ldr	r3, [pc, #456]	@ (8003c24 <HAL_ADC_ConfigChannel+0x4d4>)
 8003a5c:	e04a      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a5e:	4b72      	ldr	r3, [pc, #456]	@ (8003c28 <HAL_ADC_ConfigChannel+0x4d8>)
 8003a60:	e048      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e046      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4970      	ldr	r1, [pc, #448]	@ (8003c2c <HAL_ADC_ConfigChannel+0x4dc>)
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	d140      	bne.n	8003af2 <HAL_ADC_ConfigChannel+0x3a2>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	495c      	ldr	r1, [pc, #368]	@ (8003be8 <HAL_ADC_ConfigChannel+0x498>)
 8003a76:	428b      	cmp	r3, r1
 8003a78:	d039      	beq.n	8003aee <HAL_ADC_ConfigChannel+0x39e>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	495b      	ldr	r1, [pc, #364]	@ (8003bec <HAL_ADC_ConfigChannel+0x49c>)
 8003a80:	428b      	cmp	r3, r1
 8003a82:	d032      	beq.n	8003aea <HAL_ADC_ConfigChannel+0x39a>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4959      	ldr	r1, [pc, #356]	@ (8003bf0 <HAL_ADC_ConfigChannel+0x4a0>)
 8003a8a:	428b      	cmp	r3, r1
 8003a8c:	d02b      	beq.n	8003ae6 <HAL_ADC_ConfigChannel+0x396>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4958      	ldr	r1, [pc, #352]	@ (8003bf4 <HAL_ADC_ConfigChannel+0x4a4>)
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d024      	beq.n	8003ae2 <HAL_ADC_ConfigChannel+0x392>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4956      	ldr	r1, [pc, #344]	@ (8003bf8 <HAL_ADC_ConfigChannel+0x4a8>)
 8003a9e:	428b      	cmp	r3, r1
 8003aa0:	d01d      	beq.n	8003ade <HAL_ADC_ConfigChannel+0x38e>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4955      	ldr	r1, [pc, #340]	@ (8003bfc <HAL_ADC_ConfigChannel+0x4ac>)
 8003aa8:	428b      	cmp	r3, r1
 8003aaa:	d016      	beq.n	8003ada <HAL_ADC_ConfigChannel+0x38a>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4953      	ldr	r1, [pc, #332]	@ (8003c00 <HAL_ADC_ConfigChannel+0x4b0>)
 8003ab2:	428b      	cmp	r3, r1
 8003ab4:	d00f      	beq.n	8003ad6 <HAL_ADC_ConfigChannel+0x386>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4952      	ldr	r1, [pc, #328]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4b4>)
 8003abc:	428b      	cmp	r3, r1
 8003abe:	d008      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x382>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4951      	ldr	r1, [pc, #324]	@ (8003c0c <HAL_ADC_ConfigChannel+0x4bc>)
 8003ac6:	428b      	cmp	r3, r1
 8003ac8:	d101      	bne.n	8003ace <HAL_ADC_ConfigChannel+0x37e>
 8003aca:	4b51      	ldr	r3, [pc, #324]	@ (8003c10 <HAL_ADC_ConfigChannel+0x4c0>)
 8003acc:	e012      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e010      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003ad2:	4b51      	ldr	r3, [pc, #324]	@ (8003c18 <HAL_ADC_ConfigChannel+0x4c8>)
 8003ad4:	e00e      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8003c04 <HAL_ADC_ConfigChannel+0x4b4>)
 8003ad8:	e00c      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003ada:	4b49      	ldr	r3, [pc, #292]	@ (8003c00 <HAL_ADC_ConfigChannel+0x4b0>)
 8003adc:	e00a      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003ade:	4b4f      	ldr	r3, [pc, #316]	@ (8003c1c <HAL_ADC_ConfigChannel+0x4cc>)
 8003ae0:	e008      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003ae2:	4b4f      	ldr	r3, [pc, #316]	@ (8003c20 <HAL_ADC_ConfigChannel+0x4d0>)
 8003ae4:	e006      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c24 <HAL_ADC_ConfigChannel+0x4d4>)
 8003ae8:	e004      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003aea:	4b4f      	ldr	r3, [pc, #316]	@ (8003c28 <HAL_ADC_ConfigChannel+0x4d8>)
 8003aec:	e002      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003aee:	2301      	movs	r3, #1
 8003af0:	e000      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x3a4>
 8003af2:	2300      	movs	r3, #0
 8003af4:	4619      	mov	r1, r3
 8003af6:	4610      	mov	r0, r2
 8003af8:	f7ff f9ca 	bl	8002e90 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f280 80fc 	bge.w	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a36      	ldr	r2, [pc, #216]	@ (8003be4 <HAL_ADC_ConfigChannel+0x494>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d004      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0x3ca>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a45      	ldr	r2, [pc, #276]	@ (8003c2c <HAL_ADC_ConfigChannel+0x4dc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_ADC_ConfigChannel+0x3ce>
 8003b1a:	4b45      	ldr	r3, [pc, #276]	@ (8003c30 <HAL_ADC_ConfigChannel+0x4e0>)
 8003b1c:	e000      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x3d0>
 8003b1e:	4b45      	ldr	r3, [pc, #276]	@ (8003c34 <HAL_ADC_ConfigChannel+0x4e4>)
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff f9a7 	bl	8002e74 <LL_ADC_GetCommonPathInternalCh>
 8003b26:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003be4 <HAL_ADC_ConfigChannel+0x494>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <HAL_ADC_ConfigChannel+0x3ec>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a3d      	ldr	r2, [pc, #244]	@ (8003c2c <HAL_ADC_ConfigChannel+0x4dc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10e      	bne.n	8003b5a <HAL_ADC_ConfigChannel+0x40a>
 8003b3c:	4829      	ldr	r0, [pc, #164]	@ (8003be4 <HAL_ADC_ConfigChannel+0x494>)
 8003b3e:	f7ff fb3f 	bl	80031c0 <LL_ADC_IsEnabled>
 8003b42:	4604      	mov	r4, r0
 8003b44:	4839      	ldr	r0, [pc, #228]	@ (8003c2c <HAL_ADC_ConfigChannel+0x4dc>)
 8003b46:	f7ff fb3b 	bl	80031c0 <LL_ADC_IsEnabled>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	4323      	orrs	r3, r4
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	bf0c      	ite	eq
 8003b52:	2301      	moveq	r3, #1
 8003b54:	2300      	movne	r3, #0
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	e008      	b.n	8003b6c <HAL_ADC_ConfigChannel+0x41c>
 8003b5a:	4837      	ldr	r0, [pc, #220]	@ (8003c38 <HAL_ADC_ConfigChannel+0x4e8>)
 8003b5c:	f7ff fb30 	bl	80031c0 <LL_ADC_IsEnabled>
 8003b60:	4603      	mov	r3, r0
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf0c      	ite	eq
 8003b66:	2301      	moveq	r3, #1
 8003b68:	2300      	movne	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 80b3 	beq.w	8003cd8 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a31      	ldr	r2, [pc, #196]	@ (8003c3c <HAL_ADC_ConfigChannel+0x4ec>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d165      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x4f8>
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d160      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003c38 <HAL_ADC_ConfigChannel+0x4e8>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	f040 80b6 	bne.w	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a13      	ldr	r2, [pc, #76]	@ (8003be4 <HAL_ADC_ConfigChannel+0x494>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d004      	beq.n	8003ba6 <HAL_ADC_ConfigChannel+0x456>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	@ (8003c2c <HAL_ADC_ConfigChannel+0x4dc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d101      	bne.n	8003baa <HAL_ADC_ConfigChannel+0x45a>
 8003ba6:	4a22      	ldr	r2, [pc, #136]	@ (8003c30 <HAL_ADC_ConfigChannel+0x4e0>)
 8003ba8:	e000      	b.n	8003bac <HAL_ADC_ConfigChannel+0x45c>
 8003baa:	4a22      	ldr	r2, [pc, #136]	@ (8003c34 <HAL_ADC_ConfigChannel+0x4e4>)
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f7ff f94a 	bl	8002e4e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bba:	4b21      	ldr	r3, [pc, #132]	@ (8003c40 <HAL_ADC_ConfigChannel+0x4f0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	4a20      	ldr	r2, [pc, #128]	@ (8003c44 <HAL_ADC_ConfigChannel+0x4f4>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	3301      	adds	r3, #1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003bce:	e002      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f9      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bdc:	e08f      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
 8003bde:	bf00      	nop
 8003be0:	47ff0000 	.word	0x47ff0000
 8003be4:	40022000 	.word	0x40022000
 8003be8:	04300002 	.word	0x04300002
 8003bec:	08600004 	.word	0x08600004
 8003bf0:	0c900008 	.word	0x0c900008
 8003bf4:	10c00010 	.word	0x10c00010
 8003bf8:	14f00020 	.word	0x14f00020
 8003bfc:	2a000400 	.word	0x2a000400
 8003c00:	2e300800 	.word	0x2e300800
 8003c04:	32601000 	.word	0x32601000
 8003c08:	43210000 	.word	0x43210000
 8003c0c:	4b840000 	.word	0x4b840000
 8003c10:	4fb80000 	.word	0x4fb80000
 8003c14:	47520000 	.word	0x47520000
 8003c18:	36902000 	.word	0x36902000
 8003c1c:	25b00200 	.word	0x25b00200
 8003c20:	21800100 	.word	0x21800100
 8003c24:	1d500080 	.word	0x1d500080
 8003c28:	19200040 	.word	0x19200040
 8003c2c:	40022100 	.word	0x40022100
 8003c30:	40022300 	.word	0x40022300
 8003c34:	58026300 	.word	0x58026300
 8003c38:	58026000 	.word	0x58026000
 8003c3c:	cb840000 	.word	0xcb840000
 8003c40:	2400001c 	.word	0x2400001c
 8003c44:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a31      	ldr	r2, [pc, #196]	@ (8003d14 <HAL_ADC_ConfigChannel+0x5c4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d11e      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x540>
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d119      	bne.n	8003c90 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a2d      	ldr	r2, [pc, #180]	@ (8003d18 <HAL_ADC_ConfigChannel+0x5c8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d14b      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d1c <HAL_ADC_ConfigChannel+0x5cc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_ADC_ConfigChannel+0x52a>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a2a      	ldr	r2, [pc, #168]	@ (8003d20 <HAL_ADC_ConfigChannel+0x5d0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <HAL_ADC_ConfigChannel+0x52e>
 8003c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003d24 <HAL_ADC_ConfigChannel+0x5d4>)
 8003c7c:	e000      	b.n	8003c80 <HAL_ADC_ConfigChannel+0x530>
 8003c7e:	4a2a      	ldr	r2, [pc, #168]	@ (8003d28 <HAL_ADC_ConfigChannel+0x5d8>)
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c86:	4619      	mov	r1, r3
 8003c88:	4610      	mov	r0, r2
 8003c8a:	f7ff f8e0 	bl	8002e4e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c8e:	e036      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a25      	ldr	r2, [pc, #148]	@ (8003d2c <HAL_ADC_ConfigChannel+0x5dc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d131      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d12c      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d18 <HAL_ADC_ConfigChannel+0x5c8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d127      	bne.n	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d1c <HAL_ADC_ConfigChannel+0x5cc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d004      	beq.n	8003cc2 <HAL_ADC_ConfigChannel+0x572>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a18      	ldr	r2, [pc, #96]	@ (8003d20 <HAL_ADC_ConfigChannel+0x5d0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_ADC_ConfigChannel+0x576>
 8003cc2:	4a18      	ldr	r2, [pc, #96]	@ (8003d24 <HAL_ADC_ConfigChannel+0x5d4>)
 8003cc4:	e000      	b.n	8003cc8 <HAL_ADC_ConfigChannel+0x578>
 8003cc6:	4a18      	ldr	r2, [pc, #96]	@ (8003d28 <HAL_ADC_ConfigChannel+0x5d8>)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	f7ff f8bc 	bl	8002e4e <LL_ADC_SetCommonPathInternalCh>
 8003cd6:	e012      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003cea:	e008      	b.n	8003cfe <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3734      	adds	r7, #52	@ 0x34
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd90      	pop	{r4, r7, pc}
 8003d12:	bf00      	nop
 8003d14:	c7520000 	.word	0xc7520000
 8003d18:	58026000 	.word	0x58026000
 8003d1c:	40022000 	.word	0x40022000
 8003d20:	40022100 	.word	0x40022100
 8003d24:	40022300 	.word	0x40022300
 8003d28:	58026300 	.word	0x58026300
 8003d2c:	cfb80000 	.word	0xcfb80000

08003d30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fa3f 	bl	80031c0 <LL_ADC_IsEnabled>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d16e      	bne.n	8003e26 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	4b38      	ldr	r3, [pc, #224]	@ (8003e30 <ADC_Enable+0x100>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d5a:	f043 0210 	orr.w	r2, r3, #16
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d66:	f043 0201 	orr.w	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e05a      	b.n	8003e28 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fa0e 	bl	8003198 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d7c:	f7ff f818 	bl	8002db0 <HAL_GetTick>
 8003d80:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a2b      	ldr	r2, [pc, #172]	@ (8003e34 <ADC_Enable+0x104>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d004      	beq.n	8003d96 <ADC_Enable+0x66>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a29      	ldr	r2, [pc, #164]	@ (8003e38 <ADC_Enable+0x108>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <ADC_Enable+0x6a>
 8003d96:	4b29      	ldr	r3, [pc, #164]	@ (8003e3c <ADC_Enable+0x10c>)
 8003d98:	e000      	b.n	8003d9c <ADC_Enable+0x6c>
 8003d9a:	4b29      	ldr	r3, [pc, #164]	@ (8003e40 <ADC_Enable+0x110>)
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff f99f 	bl	80030e0 <LL_ADC_GetMultimode>
 8003da2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a23      	ldr	r2, [pc, #140]	@ (8003e38 <ADC_Enable+0x108>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d002      	beq.n	8003db4 <ADC_Enable+0x84>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	e000      	b.n	8003db6 <ADC_Enable+0x86>
 8003db4:	4b1f      	ldr	r3, [pc, #124]	@ (8003e34 <ADC_Enable+0x104>)
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d02c      	beq.n	8003e18 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d130      	bne.n	8003e26 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dc4:	e028      	b.n	8003e18 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7ff f9f8 	bl	80031c0 <LL_ADC_IsEnabled>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d104      	bne.n	8003de0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff f9dc 	bl	8003198 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003de0:	f7fe ffe6 	bl	8002db0 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d914      	bls.n	8003e18 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d00d      	beq.n	8003e18 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e00:	f043 0210 	orr.w	r2, r3, #16
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0c:	f043 0201 	orr.w	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e007      	b.n	8003e28 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d1cf      	bne.n	8003dc6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	8000003f 	.word	0x8000003f
 8003e34:	40022000 	.word	0x40022000
 8003e38:	40022100 	.word	0x40022100
 8003e3c:	40022300 	.word	0x40022300
 8003e40:	58026300 	.word	0x58026300

08003e44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e56:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d14b      	bne.n	8003ef6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d021      	beq.n	8003ebc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff f88e 	bl	8002f9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d032      	beq.n	8003eee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d12b      	bne.n	8003eee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d11f      	bne.n	8003eee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	655a      	str	r2, [r3, #84]	@ 0x54
 8003eba:	e018      	b.n	8003eee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d111      	bne.n	8003eee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ece:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ee6:	f043 0201 	orr.w	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f7fd fc18 	bl	8001724 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ef4:	e00e      	b.n	8003f14 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003efa:	f003 0310 	and.w	r3, r3, #16
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff fc1a 	bl	800373c <HAL_ADC_ErrorCallback>
}
 8003f08:	e004      	b.n	8003f14 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4798      	blx	r3
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f28:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff fbfc 	bl	8003728 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f30:	bf00      	nop
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f56:	f043 0204 	orr.w	r2, r3, #4
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff fbec 	bl	800373c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a7a      	ldr	r2, [pc, #488]	@ (8004164 <ADC_ConfigureBoostMode+0x1f8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d004      	beq.n	8003f88 <ADC_ConfigureBoostMode+0x1c>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a79      	ldr	r2, [pc, #484]	@ (8004168 <ADC_ConfigureBoostMode+0x1fc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d109      	bne.n	8003f9c <ADC_ConfigureBoostMode+0x30>
 8003f88:	4b78      	ldr	r3, [pc, #480]	@ (800416c <ADC_ConfigureBoostMode+0x200>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	bf14      	ite	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	2300      	moveq	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e008      	b.n	8003fae <ADC_ConfigureBoostMode+0x42>
 8003f9c:	4b74      	ldr	r3, [pc, #464]	@ (8004170 <ADC_ConfigureBoostMode+0x204>)
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf14      	ite	ne
 8003fa8:	2301      	movne	r3, #1
 8003faa:	2300      	moveq	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01c      	beq.n	8003fec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003fb2:	f004 fcc7 	bl	8008944 <HAL_RCC_GetHCLKFreq>
 8003fb6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fc0:	d010      	beq.n	8003fe4 <ADC_ConfigureBoostMode+0x78>
 8003fc2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003fc6:	d873      	bhi.n	80040b0 <ADC_ConfigureBoostMode+0x144>
 8003fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fcc:	d002      	beq.n	8003fd4 <ADC_ConfigureBoostMode+0x68>
 8003fce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fd2:	d16d      	bne.n	80040b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	0c1b      	lsrs	r3, r3, #16
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	60fb      	str	r3, [r7, #12]
        break;
 8003fe2:	e068      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	089b      	lsrs	r3, r3, #2
 8003fe8:	60fb      	str	r3, [r7, #12]
        break;
 8003fea:	e064      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003fec:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003ff0:	f04f 0100 	mov.w	r1, #0
 8003ff4:	f005 ff0c 	bl	8009e10 <HAL_RCCEx_GetPeriphCLKFreq>
 8003ff8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004002:	d051      	beq.n	80040a8 <ADC_ConfigureBoostMode+0x13c>
 8004004:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004008:	d854      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 800400a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800400e:	d047      	beq.n	80040a0 <ADC_ConfigureBoostMode+0x134>
 8004010:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004014:	d84e      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 8004016:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800401a:	d03d      	beq.n	8004098 <ADC_ConfigureBoostMode+0x12c>
 800401c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004020:	d848      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 8004022:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004026:	d033      	beq.n	8004090 <ADC_ConfigureBoostMode+0x124>
 8004028:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800402c:	d842      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 800402e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004032:	d029      	beq.n	8004088 <ADC_ConfigureBoostMode+0x11c>
 8004034:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004038:	d83c      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 800403a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800403e:	d01a      	beq.n	8004076 <ADC_ConfigureBoostMode+0x10a>
 8004040:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004044:	d836      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 8004046:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800404a:	d014      	beq.n	8004076 <ADC_ConfigureBoostMode+0x10a>
 800404c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004050:	d830      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 8004052:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004056:	d00e      	beq.n	8004076 <ADC_ConfigureBoostMode+0x10a>
 8004058:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800405c:	d82a      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 800405e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004062:	d008      	beq.n	8004076 <ADC_ConfigureBoostMode+0x10a>
 8004064:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004068:	d824      	bhi.n	80040b4 <ADC_ConfigureBoostMode+0x148>
 800406a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800406e:	d002      	beq.n	8004076 <ADC_ConfigureBoostMode+0x10a>
 8004070:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004074:	d11e      	bne.n	80040b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	0c9b      	lsrs	r3, r3, #18
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	fbb2 f3f3 	udiv	r3, r2, r3
 8004084:	60fb      	str	r3, [r7, #12]
        break;
 8004086:	e016      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	60fb      	str	r3, [r7, #12]
        break;
 800408e:	e012      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	60fb      	str	r3, [r7, #12]
        break;
 8004096:	e00e      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	099b      	lsrs	r3, r3, #6
 800409c:	60fb      	str	r3, [r7, #12]
        break;
 800409e:	e00a      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	09db      	lsrs	r3, r3, #7
 80040a4:	60fb      	str	r3, [r7, #12]
        break;
 80040a6:	e006      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	60fb      	str	r3, [r7, #12]
        break;
 80040ae:	e002      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80040b0:	bf00      	nop
 80040b2:	e000      	b.n	80040b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80040b4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80040b6:	f7fe feab 	bl	8002e10 <HAL_GetREVID>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d815      	bhi.n	80040f0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004174 <ADC_ConfigureBoostMode+0x208>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d908      	bls.n	80040de <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040da:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80040dc:	e03e      	b.n	800415c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040ec:	609a      	str	r2, [r3, #8]
}
 80040ee:	e035      	b.n	800415c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004178 <ADC_ConfigureBoostMode+0x20c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d808      	bhi.n	8004110 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800410c:	609a      	str	r2, [r3, #8]
}
 800410e:	e025      	b.n	800415c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4a1a      	ldr	r2, [pc, #104]	@ (800417c <ADC_ConfigureBoostMode+0x210>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d80a      	bhi.n	800412e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	e016      	b.n	800415c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	4a13      	ldr	r2, [pc, #76]	@ (8004180 <ADC_ConfigureBoostMode+0x214>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d80a      	bhi.n	800414c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004148:	609a      	str	r2, [r3, #8]
}
 800414a:	e007      	b.n	800415c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40022000 	.word	0x40022000
 8004168:	40022100 	.word	0x40022100
 800416c:	40022300 	.word	0x40022300
 8004170:	58026300 	.word	0x58026300
 8004174:	01312d00 	.word	0x01312d00
 8004178:	005f5e10 	.word	0x005f5e10
 800417c:	00bebc20 	.word	0x00bebc20
 8004180:	017d7840 	.word	0x017d7840

08004184 <LL_ADC_IsEnabled>:
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <LL_ADC_IsEnabled+0x18>
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <LL_ADC_IsEnabled+0x1a>
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <LL_ADC_REG_IsConversionOngoing>:
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 0304 	and.w	r3, r3, #4
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	d101      	bne.n	80041c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80041d0:	b590      	push	{r4, r7, lr}
 80041d2:	b09f      	sub	sp, #124	@ 0x7c
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041da:	2300      	movs	r3, #0
 80041dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e0be      	b.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80041f6:	2300      	movs	r3, #0
 80041f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a5c      	ldr	r2, [pc, #368]	@ (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d102      	bne.n	800420e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004208:	4b5b      	ldr	r3, [pc, #364]	@ (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	e001      	b.n	8004212 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800421c:	f043 0220 	orr.w	r2, r3, #32
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e09d      	b.n	800436c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	4618      	mov	r0, r3
 8004234:	f7ff ffb9 	bl	80041aa <LL_ADC_REG_IsConversionOngoing>
 8004238:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff ffb3 	bl	80041aa <LL_ADC_REG_IsConversionOngoing>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d17f      	bne.n	800434a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800424a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800424c:	2b00      	cmp	r3, #0
 800424e:	d17c      	bne.n	800434a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a47      	ldr	r2, [pc, #284]	@ (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a46      	ldr	r2, [pc, #280]	@ (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004264:	4b45      	ldr	r3, [pc, #276]	@ (800437c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004266:	e000      	b.n	800426a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004268:	4b45      	ldr	r3, [pc, #276]	@ (8004380 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800426a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d039      	beq.n	80042e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	431a      	orrs	r2, r3
 8004282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004284:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a3a      	ldr	r2, [pc, #232]	@ (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a38      	ldr	r2, [pc, #224]	@ (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10e      	bne.n	80042b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800429a:	4836      	ldr	r0, [pc, #216]	@ (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800429c:	f7ff ff72 	bl	8004184 <LL_ADC_IsEnabled>
 80042a0:	4604      	mov	r4, r0
 80042a2:	4835      	ldr	r0, [pc, #212]	@ (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80042a4:	f7ff ff6e 	bl	8004184 <LL_ADC_IsEnabled>
 80042a8:	4603      	mov	r3, r0
 80042aa:	4323      	orrs	r3, r4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	bf0c      	ite	eq
 80042b0:	2301      	moveq	r3, #1
 80042b2:	2300      	movne	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e008      	b.n	80042ca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80042b8:	4832      	ldr	r0, [pc, #200]	@ (8004384 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80042ba:	f7ff ff63 	bl	8004184 <LL_ADC_IsEnabled>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d047      	beq.n	800435e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80042ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004388 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	683a      	ldr	r2, [r7, #0]
 80042d8:	6811      	ldr	r1, [r2, #0]
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	6892      	ldr	r2, [r2, #8]
 80042de:	430a      	orrs	r2, r1
 80042e0:	431a      	orrs	r2, r3
 80042e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80042e6:	e03a      	b.n	800435e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80042e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	@ (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1d      	ldr	r2, [pc, #116]	@ (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d10e      	bne.n	8004326 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004308:	481a      	ldr	r0, [pc, #104]	@ (8004374 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800430a:	f7ff ff3b 	bl	8004184 <LL_ADC_IsEnabled>
 800430e:	4604      	mov	r4, r0
 8004310:	4819      	ldr	r0, [pc, #100]	@ (8004378 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004312:	f7ff ff37 	bl	8004184 <LL_ADC_IsEnabled>
 8004316:	4603      	mov	r3, r0
 8004318:	4323      	orrs	r3, r4
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	e008      	b.n	8004338 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004326:	4817      	ldr	r0, [pc, #92]	@ (8004384 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004328:	f7ff ff2c 	bl	8004184 <LL_ADC_IsEnabled>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	2b00      	cmp	r3, #0
 800433a:	d010      	beq.n	800435e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800433c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	4b11      	ldr	r3, [pc, #68]	@ (8004388 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004342:	4013      	ands	r3, r2
 8004344:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004346:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004348:	e009      	b.n	800435e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434e:	f043 0220 	orr.w	r2, r3, #32
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800435c:	e000      	b.n	8004360 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800435e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004368:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800436c:	4618      	mov	r0, r3
 800436e:	377c      	adds	r7, #124	@ 0x7c
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	40022000 	.word	0x40022000
 8004378:	40022100 	.word	0x40022100
 800437c:	40022300 	.word	0x40022300
 8004380:	58026300 	.word	0x58026300
 8004384:	58026000 	.word	0x58026000
 8004388:	fffff0e0 	.word	0xfffff0e0

0800438c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800439c:	4b0b      	ldr	r3, [pc, #44]	@ (80043cc <__NVIC_SetPriorityGrouping+0x40>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80043a8:	4013      	ands	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80043b4:	4b06      	ldr	r3, [pc, #24]	@ (80043d0 <__NVIC_SetPriorityGrouping+0x44>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043ba:	4a04      	ldr	r2, [pc, #16]	@ (80043cc <__NVIC_SetPriorityGrouping+0x40>)
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	60d3      	str	r3, [r2, #12]
}
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000ed00 	.word	0xe000ed00
 80043d0:	05fa0000 	.word	0x05fa0000

080043d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043d8:	4b04      	ldr	r3, [pc, #16]	@ (80043ec <__NVIC_GetPriorityGrouping+0x18>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	0a1b      	lsrs	r3, r3, #8
 80043de:	f003 0307 	and.w	r3, r3, #7
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80043fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	db0b      	blt.n	800441a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004402:	88fb      	ldrh	r3, [r7, #6]
 8004404:	f003 021f 	and.w	r2, r3, #31
 8004408:	4907      	ldr	r1, [pc, #28]	@ (8004428 <__NVIC_EnableIRQ+0x38>)
 800440a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2001      	movs	r0, #1
 8004412:	fa00 f202 	lsl.w	r2, r0, r2
 8004416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	e000e100 	.word	0xe000e100

0800442c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	4603      	mov	r3, r0
 8004434:	6039      	str	r1, [r7, #0]
 8004436:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800443c:	2b00      	cmp	r3, #0
 800443e:	db0a      	blt.n	8004456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	b2da      	uxtb	r2, r3
 8004444:	490c      	ldr	r1, [pc, #48]	@ (8004478 <__NVIC_SetPriority+0x4c>)
 8004446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800444a:	0112      	lsls	r2, r2, #4
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	440b      	add	r3, r1
 8004450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004454:	e00a      	b.n	800446c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	4908      	ldr	r1, [pc, #32]	@ (800447c <__NVIC_SetPriority+0x50>)
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	3b04      	subs	r3, #4
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	440b      	add	r3, r1
 800446a:	761a      	strb	r2, [r3, #24]
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	e000e100 	.word	0xe000e100
 800447c:	e000ed00 	.word	0xe000ed00

08004480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004480:	b480      	push	{r7}
 8004482:	b089      	sub	sp, #36	@ 0x24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f1c3 0307 	rsb	r3, r3, #7
 800449a:	2b04      	cmp	r3, #4
 800449c:	bf28      	it	cs
 800449e:	2304      	movcs	r3, #4
 80044a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3304      	adds	r3, #4
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d902      	bls.n	80044b0 <NVIC_EncodePriority+0x30>
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	3b03      	subs	r3, #3
 80044ae:	e000      	b.n	80044b2 <NVIC_EncodePriority+0x32>
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b4:	f04f 32ff 	mov.w	r2, #4294967295
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43da      	mvns	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	401a      	ands	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044c8:	f04f 31ff 	mov.w	r1, #4294967295
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	fa01 f303 	lsl.w	r3, r1, r3
 80044d2:	43d9      	mvns	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044d8:	4313      	orrs	r3, r2
         );
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3724      	adds	r7, #36	@ 0x24
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
	...

080044e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f8:	d301      	bcc.n	80044fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80044fa:	2301      	movs	r3, #1
 80044fc:	e00f      	b.n	800451e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80044fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004528 <SysTick_Config+0x40>)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	3b01      	subs	r3, #1
 8004504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004506:	210f      	movs	r1, #15
 8004508:	f04f 30ff 	mov.w	r0, #4294967295
 800450c:	f7ff ff8e 	bl	800442c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004510:	4b05      	ldr	r3, [pc, #20]	@ (8004528 <SysTick_Config+0x40>)
 8004512:	2200      	movs	r2, #0
 8004514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004516:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <SysTick_Config+0x40>)
 8004518:	2207      	movs	r2, #7
 800451a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	e000e010 	.word	0xe000e010

0800452c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f7ff ff29 	bl	800438c <__NVIC_SetPriorityGrouping>
}
 800453a:	bf00      	nop
 800453c:	3708      	adds	r7, #8
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b086      	sub	sp, #24
 8004546:	af00      	add	r7, sp, #0
 8004548:	4603      	mov	r3, r0
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004550:	f7ff ff40 	bl	80043d4 <__NVIC_GetPriorityGrouping>
 8004554:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	68b9      	ldr	r1, [r7, #8]
 800455a:	6978      	ldr	r0, [r7, #20]
 800455c:	f7ff ff90 	bl	8004480 <NVIC_EncodePriority>
 8004560:	4602      	mov	r2, r0
 8004562:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004566:	4611      	mov	r1, r2
 8004568:	4618      	mov	r0, r3
 800456a:	f7ff ff5f 	bl	800442c <__NVIC_SetPriority>
}
 800456e:	bf00      	nop
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b082      	sub	sp, #8
 800457a:	af00      	add	r7, sp, #0
 800457c:	4603      	mov	r3, r0
 800457e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004580:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff33 	bl	80043f0 <__NVIC_EnableIRQ>
}
 800458a:	bf00      	nop
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff ffa4 	bl	80044e8 <SysTick_Config>
 80045a0:	4603      	mov	r3, r0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3708      	adds	r7, #8
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
	...

080045ac <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80045b0:	f3bf 8f5f 	dmb	sy
}
 80045b4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80045b6:	4b07      	ldr	r3, [pc, #28]	@ (80045d4 <HAL_MPU_Disable+0x28>)
 80045b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ba:	4a06      	ldr	r2, [pc, #24]	@ (80045d4 <HAL_MPU_Disable+0x28>)
 80045bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045c0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80045c2:	4b05      	ldr	r3, [pc, #20]	@ (80045d8 <HAL_MPU_Disable+0x2c>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	605a      	str	r2, [r3, #4]
}
 80045c8:	bf00      	nop
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	e000ed00 	.word	0xe000ed00
 80045d8:	e000ed90 	.word	0xe000ed90

080045dc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80045e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004614 <HAL_MPU_Enable+0x38>)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80045ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <HAL_MPU_Enable+0x3c>)
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	4a09      	ldr	r2, [pc, #36]	@ (8004618 <HAL_MPU_Enable+0x3c>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80045fa:	f3bf 8f4f 	dsb	sy
}
 80045fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004600:	f3bf 8f6f 	isb	sy
}
 8004604:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	e000ed90 	.word	0xe000ed90
 8004618:	e000ed00 	.word	0xe000ed00

0800461c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	785a      	ldrb	r2, [r3, #1]
 8004628:	4b1b      	ldr	r3, [pc, #108]	@ (8004698 <HAL_MPU_ConfigRegion+0x7c>)
 800462a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800462c:	4b1a      	ldr	r3, [pc, #104]	@ (8004698 <HAL_MPU_ConfigRegion+0x7c>)
 800462e:	691b      	ldr	r3, [r3, #16]
 8004630:	4a19      	ldr	r2, [pc, #100]	@ (8004698 <HAL_MPU_ConfigRegion+0x7c>)
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8004638:	4a17      	ldr	r2, [pc, #92]	@ (8004698 <HAL_MPU_ConfigRegion+0x7c>)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	7b1b      	ldrb	r3, [r3, #12]
 8004644:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	7adb      	ldrb	r3, [r3, #11]
 800464a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800464c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7a9b      	ldrb	r3, [r3, #10]
 8004652:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	7b5b      	ldrb	r3, [r3, #13]
 800465a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800465c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	7b9b      	ldrb	r3, [r3, #14]
 8004662:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004664:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	7bdb      	ldrb	r3, [r3, #15]
 800466a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800466c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	7a5b      	ldrb	r3, [r3, #9]
 8004672:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004674:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	7a1b      	ldrb	r3, [r3, #8]
 800467a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800467c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	7812      	ldrb	r2, [r2, #0]
 8004682:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004684:	4a04      	ldr	r2, [pc, #16]	@ (8004698 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004686:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004688:	6113      	str	r3, [r2, #16]
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	e000ed90 	.word	0xe000ed90

0800469c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80046a4:	f7fe fb84 	bl	8002db0 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e316      	b.n	8004ce2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a66      	ldr	r2, [pc, #408]	@ (8004854 <HAL_DMA_Init+0x1b8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d04a      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a65      	ldr	r2, [pc, #404]	@ (8004858 <HAL_DMA_Init+0x1bc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d045      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a63      	ldr	r2, [pc, #396]	@ (800485c <HAL_DMA_Init+0x1c0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d040      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a62      	ldr	r2, [pc, #392]	@ (8004860 <HAL_DMA_Init+0x1c4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d03b      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a60      	ldr	r2, [pc, #384]	@ (8004864 <HAL_DMA_Init+0x1c8>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d036      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a5f      	ldr	r2, [pc, #380]	@ (8004868 <HAL_DMA_Init+0x1cc>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d031      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a5d      	ldr	r2, [pc, #372]	@ (800486c <HAL_DMA_Init+0x1d0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d02c      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a5c      	ldr	r2, [pc, #368]	@ (8004870 <HAL_DMA_Init+0x1d4>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d027      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a5a      	ldr	r2, [pc, #360]	@ (8004874 <HAL_DMA_Init+0x1d8>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d022      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a59      	ldr	r2, [pc, #356]	@ (8004878 <HAL_DMA_Init+0x1dc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d01d      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a57      	ldr	r2, [pc, #348]	@ (800487c <HAL_DMA_Init+0x1e0>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d018      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a56      	ldr	r2, [pc, #344]	@ (8004880 <HAL_DMA_Init+0x1e4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d013      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a54      	ldr	r2, [pc, #336]	@ (8004884 <HAL_DMA_Init+0x1e8>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00e      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a53      	ldr	r2, [pc, #332]	@ (8004888 <HAL_DMA_Init+0x1ec>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d009      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a51      	ldr	r2, [pc, #324]	@ (800488c <HAL_DMA_Init+0x1f0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <HAL_DMA_Init+0xb8>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a50      	ldr	r2, [pc, #320]	@ (8004890 <HAL_DMA_Init+0x1f4>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d101      	bne.n	8004758 <HAL_DMA_Init+0xbc>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <HAL_DMA_Init+0xbe>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 813b 	beq.w	80049d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a37      	ldr	r2, [pc, #220]	@ (8004854 <HAL_DMA_Init+0x1b8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d04a      	beq.n	8004810 <HAL_DMA_Init+0x174>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a36      	ldr	r2, [pc, #216]	@ (8004858 <HAL_DMA_Init+0x1bc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d045      	beq.n	8004810 <HAL_DMA_Init+0x174>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a34      	ldr	r2, [pc, #208]	@ (800485c <HAL_DMA_Init+0x1c0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d040      	beq.n	8004810 <HAL_DMA_Init+0x174>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a33      	ldr	r2, [pc, #204]	@ (8004860 <HAL_DMA_Init+0x1c4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d03b      	beq.n	8004810 <HAL_DMA_Init+0x174>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a31      	ldr	r2, [pc, #196]	@ (8004864 <HAL_DMA_Init+0x1c8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d036      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a30      	ldr	r2, [pc, #192]	@ (8004868 <HAL_DMA_Init+0x1cc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d031      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a2e      	ldr	r2, [pc, #184]	@ (800486c <HAL_DMA_Init+0x1d0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d02c      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004870 <HAL_DMA_Init+0x1d4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d027      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004874 <HAL_DMA_Init+0x1d8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d022      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a2a      	ldr	r2, [pc, #168]	@ (8004878 <HAL_DMA_Init+0x1dc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01d      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a28      	ldr	r2, [pc, #160]	@ (800487c <HAL_DMA_Init+0x1e0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d018      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a27      	ldr	r2, [pc, #156]	@ (8004880 <HAL_DMA_Init+0x1e4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a25      	ldr	r2, [pc, #148]	@ (8004884 <HAL_DMA_Init+0x1e8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d00e      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a24      	ldr	r2, [pc, #144]	@ (8004888 <HAL_DMA_Init+0x1ec>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d009      	beq.n	8004810 <HAL_DMA_Init+0x174>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a22      	ldr	r2, [pc, #136]	@ (800488c <HAL_DMA_Init+0x1f0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d004      	beq.n	8004810 <HAL_DMA_Init+0x174>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <HAL_DMA_Init+0x1f4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <HAL_DMA_Init+0x186>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e007      	b.n	8004832 <HAL_DMA_Init+0x196>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0201 	bic.w	r2, r2, #1
 8004830:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004832:	e02f      	b.n	8004894 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004834:	f7fe fabc 	bl	8002db0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b05      	cmp	r3, #5
 8004840:	d928      	bls.n	8004894 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2220      	movs	r2, #32
 8004846:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2203      	movs	r2, #3
 800484c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e246      	b.n	8004ce2 <HAL_DMA_Init+0x646>
 8004854:	40020010 	.word	0x40020010
 8004858:	40020028 	.word	0x40020028
 800485c:	40020040 	.word	0x40020040
 8004860:	40020058 	.word	0x40020058
 8004864:	40020070 	.word	0x40020070
 8004868:	40020088 	.word	0x40020088
 800486c:	400200a0 	.word	0x400200a0
 8004870:	400200b8 	.word	0x400200b8
 8004874:	40020410 	.word	0x40020410
 8004878:	40020428 	.word	0x40020428
 800487c:	40020440 	.word	0x40020440
 8004880:	40020458 	.word	0x40020458
 8004884:	40020470 	.word	0x40020470
 8004888:	40020488 	.word	0x40020488
 800488c:	400204a0 	.word	0x400204a0
 8004890:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1c8      	bne.n	8004834 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	4b83      	ldr	r3, [pc, #524]	@ (8004abc <HAL_DMA_Init+0x420>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80048ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1b      	ldr	r3, [r3, #32]
 80048d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d107      	bne.n	80048f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f0:	4313      	orrs	r3, r2
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80048f8:	4b71      	ldr	r3, [pc, #452]	@ (8004ac0 <HAL_DMA_Init+0x424>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b71      	ldr	r3, [pc, #452]	@ (8004ac4 <HAL_DMA_Init+0x428>)
 80048fe:	4013      	ands	r3, r2
 8004900:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004904:	d328      	bcc.n	8004958 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b28      	cmp	r3, #40	@ 0x28
 800490c:	d903      	bls.n	8004916 <HAL_DMA_Init+0x27a>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b2e      	cmp	r3, #46	@ 0x2e
 8004914:	d917      	bls.n	8004946 <HAL_DMA_Init+0x2aa>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b3e      	cmp	r3, #62	@ 0x3e
 800491c:	d903      	bls.n	8004926 <HAL_DMA_Init+0x28a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b42      	cmp	r3, #66	@ 0x42
 8004924:	d90f      	bls.n	8004946 <HAL_DMA_Init+0x2aa>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b46      	cmp	r3, #70	@ 0x46
 800492c:	d903      	bls.n	8004936 <HAL_DMA_Init+0x29a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b48      	cmp	r3, #72	@ 0x48
 8004934:	d907      	bls.n	8004946 <HAL_DMA_Init+0x2aa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b4e      	cmp	r3, #78	@ 0x4e
 800493c:	d905      	bls.n	800494a <HAL_DMA_Init+0x2ae>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b52      	cmp	r3, #82	@ 0x52
 8004944:	d801      	bhi.n	800494a <HAL_DMA_Init+0x2ae>
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <HAL_DMA_Init+0x2b0>
 800494a:	2300      	movs	r3, #0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004956:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f023 0307 	bic.w	r3, r3, #7
 800496e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497e:	2b04      	cmp	r3, #4
 8004980:	d117      	bne.n	80049b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00e      	beq.n	80049b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f001 fdcf 	bl	8006538 <DMA_CheckFifoParam>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2240      	movs	r2, #64	@ 0x40
 80049a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e197      	b.n	8004ce2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f001 fd0a 	bl	80063d4 <DMA_CalcBaseAndBitshift>
 80049c0:	4603      	mov	r3, r0
 80049c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	223f      	movs	r2, #63	@ 0x3f
 80049ce:	409a      	lsls	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	e0cd      	b.n	8004b72 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a3b      	ldr	r2, [pc, #236]	@ (8004ac8 <HAL_DMA_Init+0x42c>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d022      	beq.n	8004a26 <HAL_DMA_Init+0x38a>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a39      	ldr	r2, [pc, #228]	@ (8004acc <HAL_DMA_Init+0x430>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d01d      	beq.n	8004a26 <HAL_DMA_Init+0x38a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a38      	ldr	r2, [pc, #224]	@ (8004ad0 <HAL_DMA_Init+0x434>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d018      	beq.n	8004a26 <HAL_DMA_Init+0x38a>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a36      	ldr	r2, [pc, #216]	@ (8004ad4 <HAL_DMA_Init+0x438>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_DMA_Init+0x38a>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a35      	ldr	r2, [pc, #212]	@ (8004ad8 <HAL_DMA_Init+0x43c>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d00e      	beq.n	8004a26 <HAL_DMA_Init+0x38a>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a33      	ldr	r2, [pc, #204]	@ (8004adc <HAL_DMA_Init+0x440>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d009      	beq.n	8004a26 <HAL_DMA_Init+0x38a>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a32      	ldr	r2, [pc, #200]	@ (8004ae0 <HAL_DMA_Init+0x444>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d004      	beq.n	8004a26 <HAL_DMA_Init+0x38a>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a30      	ldr	r2, [pc, #192]	@ (8004ae4 <HAL_DMA_Init+0x448>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_DMA_Init+0x38e>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_DMA_Init+0x390>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f000 8097 	beq.w	8004b60 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a24      	ldr	r2, [pc, #144]	@ (8004ac8 <HAL_DMA_Init+0x42c>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d021      	beq.n	8004a80 <HAL_DMA_Init+0x3e4>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a22      	ldr	r2, [pc, #136]	@ (8004acc <HAL_DMA_Init+0x430>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d01c      	beq.n	8004a80 <HAL_DMA_Init+0x3e4>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a21      	ldr	r2, [pc, #132]	@ (8004ad0 <HAL_DMA_Init+0x434>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d017      	beq.n	8004a80 <HAL_DMA_Init+0x3e4>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad4 <HAL_DMA_Init+0x438>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d012      	beq.n	8004a80 <HAL_DMA_Init+0x3e4>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8004ad8 <HAL_DMA_Init+0x43c>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00d      	beq.n	8004a80 <HAL_DMA_Init+0x3e4>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1c      	ldr	r2, [pc, #112]	@ (8004adc <HAL_DMA_Init+0x440>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d008      	beq.n	8004a80 <HAL_DMA_Init+0x3e4>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae0 <HAL_DMA_Init+0x444>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <HAL_DMA_Init+0x3e4>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	@ (8004ae4 <HAL_DMA_Init+0x448>)
 8004a7e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	4b13      	ldr	r3, [pc, #76]	@ (8004ae8 <HAL_DMA_Init+0x44c>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b40      	cmp	r3, #64	@ 0x40
 8004aa6:	d021      	beq.n	8004aec <HAL_DMA_Init+0x450>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b80      	cmp	r3, #128	@ 0x80
 8004aae:	d102      	bne.n	8004ab6 <HAL_DMA_Init+0x41a>
 8004ab0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ab4:	e01b      	b.n	8004aee <HAL_DMA_Init+0x452>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e019      	b.n	8004aee <HAL_DMA_Init+0x452>
 8004aba:	bf00      	nop
 8004abc:	fe10803f 	.word	0xfe10803f
 8004ac0:	5c001000 	.word	0x5c001000
 8004ac4:	ffff0000 	.word	0xffff0000
 8004ac8:	58025408 	.word	0x58025408
 8004acc:	5802541c 	.word	0x5802541c
 8004ad0:	58025430 	.word	0x58025430
 8004ad4:	58025444 	.word	0x58025444
 8004ad8:	58025458 	.word	0x58025458
 8004adc:	5802546c 	.word	0x5802546c
 8004ae0:	58025480 	.word	0x58025480
 8004ae4:	58025494 	.word	0x58025494
 8004ae8:	fffe000f 	.word	0xfffe000f
 8004aec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	68d2      	ldr	r2, [r2, #12]
 8004af2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b1c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b1e:	697a      	ldr	r2, [r7, #20]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	4b6e      	ldr	r3, [pc, #440]	@ (8004cec <HAL_DMA_Init+0x650>)
 8004b34:	4413      	add	r3, r2
 8004b36:	4a6e      	ldr	r2, [pc, #440]	@ (8004cf0 <HAL_DMA_Init+0x654>)
 8004b38:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	009a      	lsls	r2, r3, #2
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f001 fc45 	bl	80063d4 <DMA_CalcBaseAndBitshift>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	2201      	movs	r2, #1
 8004b58:	409a      	lsls	r2, r3
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	e008      	b.n	8004b72 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2240      	movs	r2, #64	@ 0x40
 8004b64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2203      	movs	r2, #3
 8004b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0b7      	b.n	8004ce2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a5f      	ldr	r2, [pc, #380]	@ (8004cf4 <HAL_DMA_Init+0x658>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d072      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a5d      	ldr	r2, [pc, #372]	@ (8004cf8 <HAL_DMA_Init+0x65c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d06d      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a5c      	ldr	r2, [pc, #368]	@ (8004cfc <HAL_DMA_Init+0x660>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d068      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5a      	ldr	r2, [pc, #360]	@ (8004d00 <HAL_DMA_Init+0x664>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d063      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a59      	ldr	r2, [pc, #356]	@ (8004d04 <HAL_DMA_Init+0x668>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d05e      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a57      	ldr	r2, [pc, #348]	@ (8004d08 <HAL_DMA_Init+0x66c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d059      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a56      	ldr	r2, [pc, #344]	@ (8004d0c <HAL_DMA_Init+0x670>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d054      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a54      	ldr	r2, [pc, #336]	@ (8004d10 <HAL_DMA_Init+0x674>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d04f      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a53      	ldr	r2, [pc, #332]	@ (8004d14 <HAL_DMA_Init+0x678>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d04a      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a51      	ldr	r2, [pc, #324]	@ (8004d18 <HAL_DMA_Init+0x67c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d045      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a50      	ldr	r2, [pc, #320]	@ (8004d1c <HAL_DMA_Init+0x680>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d040      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a4e      	ldr	r2, [pc, #312]	@ (8004d20 <HAL_DMA_Init+0x684>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d03b      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a4d      	ldr	r2, [pc, #308]	@ (8004d24 <HAL_DMA_Init+0x688>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d036      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a4b      	ldr	r2, [pc, #300]	@ (8004d28 <HAL_DMA_Init+0x68c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d031      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a4a      	ldr	r2, [pc, #296]	@ (8004d2c <HAL_DMA_Init+0x690>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d02c      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a48      	ldr	r2, [pc, #288]	@ (8004d30 <HAL_DMA_Init+0x694>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d027      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a47      	ldr	r2, [pc, #284]	@ (8004d34 <HAL_DMA_Init+0x698>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d022      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a45      	ldr	r2, [pc, #276]	@ (8004d38 <HAL_DMA_Init+0x69c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d01d      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a44      	ldr	r2, [pc, #272]	@ (8004d3c <HAL_DMA_Init+0x6a0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d018      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a42      	ldr	r2, [pc, #264]	@ (8004d40 <HAL_DMA_Init+0x6a4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d013      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a41      	ldr	r2, [pc, #260]	@ (8004d44 <HAL_DMA_Init+0x6a8>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a3f      	ldr	r2, [pc, #252]	@ (8004d48 <HAL_DMA_Init+0x6ac>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a3e      	ldr	r2, [pc, #248]	@ (8004d4c <HAL_DMA_Init+0x6b0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_DMA_Init+0x5c6>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a3c      	ldr	r2, [pc, #240]	@ (8004d50 <HAL_DMA_Init+0x6b4>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d101      	bne.n	8004c66 <HAL_DMA_Init+0x5ca>
 8004c62:	2301      	movs	r3, #1
 8004c64:	e000      	b.n	8004c68 <HAL_DMA_Init+0x5cc>
 8004c66:	2300      	movs	r3, #0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d032      	beq.n	8004cd2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f001 fcdf 	bl	8006630 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b80      	cmp	r3, #128	@ 0x80
 8004c78:	d102      	bne.n	8004c80 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004c94:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d010      	beq.n	8004cc0 <HAL_DMA_Init+0x624>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d80c      	bhi.n	8004cc0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f001 fd5c 	bl	8006764 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	e008      	b.n	8004cd2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	a7fdabf8 	.word	0xa7fdabf8
 8004cf0:	cccccccd 	.word	0xcccccccd
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
 8004d34:	58025408 	.word	0x58025408
 8004d38:	5802541c 	.word	0x5802541c
 8004d3c:	58025430 	.word	0x58025430
 8004d40:	58025444 	.word	0x58025444
 8004d44:	58025458 	.word	0x58025458
 8004d48:	5802546c 	.word	0x5802546c
 8004d4c:	58025480 	.word	0x58025480
 8004d50:	58025494 	.word	0x58025494

08004d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d101      	bne.n	8004d70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e226      	b.n	80051be <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d101      	bne.n	8004d7e <HAL_DMA_Start_IT+0x2a>
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e21f      	b.n	80051be <HAL_DMA_Start_IT+0x46a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	f040 820a 	bne.w	80051a8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a68      	ldr	r2, [pc, #416]	@ (8004f48 <HAL_DMA_Start_IT+0x1f4>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d04a      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a66      	ldr	r2, [pc, #408]	@ (8004f4c <HAL_DMA_Start_IT+0x1f8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d045      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a65      	ldr	r2, [pc, #404]	@ (8004f50 <HAL_DMA_Start_IT+0x1fc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d040      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a63      	ldr	r2, [pc, #396]	@ (8004f54 <HAL_DMA_Start_IT+0x200>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d03b      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a62      	ldr	r2, [pc, #392]	@ (8004f58 <HAL_DMA_Start_IT+0x204>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d036      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a60      	ldr	r2, [pc, #384]	@ (8004f5c <HAL_DMA_Start_IT+0x208>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d031      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a5f      	ldr	r2, [pc, #380]	@ (8004f60 <HAL_DMA_Start_IT+0x20c>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d02c      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a5d      	ldr	r2, [pc, #372]	@ (8004f64 <HAL_DMA_Start_IT+0x210>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d027      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a5c      	ldr	r2, [pc, #368]	@ (8004f68 <HAL_DMA_Start_IT+0x214>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d022      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a5a      	ldr	r2, [pc, #360]	@ (8004f6c <HAL_DMA_Start_IT+0x218>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d01d      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a59      	ldr	r2, [pc, #356]	@ (8004f70 <HAL_DMA_Start_IT+0x21c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d018      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a57      	ldr	r2, [pc, #348]	@ (8004f74 <HAL_DMA_Start_IT+0x220>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a56      	ldr	r2, [pc, #344]	@ (8004f78 <HAL_DMA_Start_IT+0x224>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d00e      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a54      	ldr	r2, [pc, #336]	@ (8004f7c <HAL_DMA_Start_IT+0x228>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a53      	ldr	r2, [pc, #332]	@ (8004f80 <HAL_DMA_Start_IT+0x22c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d004      	beq.n	8004e42 <HAL_DMA_Start_IT+0xee>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a51      	ldr	r2, [pc, #324]	@ (8004f84 <HAL_DMA_Start_IT+0x230>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d108      	bne.n	8004e54 <HAL_DMA_Start_IT+0x100>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e007      	b.n	8004e64 <HAL_DMA_Start_IT+0x110>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0201 	bic.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	68b9      	ldr	r1, [r7, #8]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f001 f906 	bl	800607c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a34      	ldr	r2, [pc, #208]	@ (8004f48 <HAL_DMA_Start_IT+0x1f4>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d04a      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a33      	ldr	r2, [pc, #204]	@ (8004f4c <HAL_DMA_Start_IT+0x1f8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d045      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a31      	ldr	r2, [pc, #196]	@ (8004f50 <HAL_DMA_Start_IT+0x1fc>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d040      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a30      	ldr	r2, [pc, #192]	@ (8004f54 <HAL_DMA_Start_IT+0x200>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d03b      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f58 <HAL_DMA_Start_IT+0x204>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d036      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f5c <HAL_DMA_Start_IT+0x208>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d031      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a2b      	ldr	r2, [pc, #172]	@ (8004f60 <HAL_DMA_Start_IT+0x20c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d02c      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a2a      	ldr	r2, [pc, #168]	@ (8004f64 <HAL_DMA_Start_IT+0x210>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d027      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a28      	ldr	r2, [pc, #160]	@ (8004f68 <HAL_DMA_Start_IT+0x214>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d022      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a27      	ldr	r2, [pc, #156]	@ (8004f6c <HAL_DMA_Start_IT+0x218>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d01d      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a25      	ldr	r2, [pc, #148]	@ (8004f70 <HAL_DMA_Start_IT+0x21c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d018      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a24      	ldr	r2, [pc, #144]	@ (8004f74 <HAL_DMA_Start_IT+0x220>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d013      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a22      	ldr	r2, [pc, #136]	@ (8004f78 <HAL_DMA_Start_IT+0x224>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00e      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a21      	ldr	r2, [pc, #132]	@ (8004f7c <HAL_DMA_Start_IT+0x228>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1f      	ldr	r2, [pc, #124]	@ (8004f80 <HAL_DMA_Start_IT+0x22c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <HAL_DMA_Start_IT+0x1bc>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f84 <HAL_DMA_Start_IT+0x230>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d101      	bne.n	8004f14 <HAL_DMA_Start_IT+0x1c0>
 8004f10:	2301      	movs	r3, #1
 8004f12:	e000      	b.n	8004f16 <HAL_DMA_Start_IT+0x1c2>
 8004f14:	2300      	movs	r3, #0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d036      	beq.n	8004f88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f023 021e 	bic.w	r2, r3, #30
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f042 0216 	orr.w	r2, r2, #22
 8004f2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d03e      	beq.n	8004fb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0208 	orr.w	r2, r2, #8
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e035      	b.n	8004fb4 <HAL_DMA_Start_IT+0x260>
 8004f48:	40020010 	.word	0x40020010
 8004f4c:	40020028 	.word	0x40020028
 8004f50:	40020040 	.word	0x40020040
 8004f54:	40020058 	.word	0x40020058
 8004f58:	40020070 	.word	0x40020070
 8004f5c:	40020088 	.word	0x40020088
 8004f60:	400200a0 	.word	0x400200a0
 8004f64:	400200b8 	.word	0x400200b8
 8004f68:	40020410 	.word	0x40020410
 8004f6c:	40020428 	.word	0x40020428
 8004f70:	40020440 	.word	0x40020440
 8004f74:	40020458 	.word	0x40020458
 8004f78:	40020470 	.word	0x40020470
 8004f7c:	40020488 	.word	0x40020488
 8004f80:	400204a0 	.word	0x400204a0
 8004f84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 020e 	bic.w	r2, r3, #14
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 020a 	orr.w	r2, r2, #10
 8004f9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0204 	orr.w	r2, r2, #4
 8004fb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a83      	ldr	r2, [pc, #524]	@ (80051c8 <HAL_DMA_Start_IT+0x474>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d072      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a82      	ldr	r2, [pc, #520]	@ (80051cc <HAL_DMA_Start_IT+0x478>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d06d      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a80      	ldr	r2, [pc, #512]	@ (80051d0 <HAL_DMA_Start_IT+0x47c>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d068      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a7f      	ldr	r2, [pc, #508]	@ (80051d4 <HAL_DMA_Start_IT+0x480>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d063      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a7d      	ldr	r2, [pc, #500]	@ (80051d8 <HAL_DMA_Start_IT+0x484>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d05e      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a7c      	ldr	r2, [pc, #496]	@ (80051dc <HAL_DMA_Start_IT+0x488>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d059      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a7a      	ldr	r2, [pc, #488]	@ (80051e0 <HAL_DMA_Start_IT+0x48c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d054      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a79      	ldr	r2, [pc, #484]	@ (80051e4 <HAL_DMA_Start_IT+0x490>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d04f      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a77      	ldr	r2, [pc, #476]	@ (80051e8 <HAL_DMA_Start_IT+0x494>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d04a      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a76      	ldr	r2, [pc, #472]	@ (80051ec <HAL_DMA_Start_IT+0x498>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d045      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a74      	ldr	r2, [pc, #464]	@ (80051f0 <HAL_DMA_Start_IT+0x49c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d040      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a73      	ldr	r2, [pc, #460]	@ (80051f4 <HAL_DMA_Start_IT+0x4a0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d03b      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a71      	ldr	r2, [pc, #452]	@ (80051f8 <HAL_DMA_Start_IT+0x4a4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d036      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a70      	ldr	r2, [pc, #448]	@ (80051fc <HAL_DMA_Start_IT+0x4a8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d031      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a6e      	ldr	r2, [pc, #440]	@ (8005200 <HAL_DMA_Start_IT+0x4ac>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d02c      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6d      	ldr	r2, [pc, #436]	@ (8005204 <HAL_DMA_Start_IT+0x4b0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d027      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a6b      	ldr	r2, [pc, #428]	@ (8005208 <HAL_DMA_Start_IT+0x4b4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d022      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a6a      	ldr	r2, [pc, #424]	@ (800520c <HAL_DMA_Start_IT+0x4b8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d01d      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a68      	ldr	r2, [pc, #416]	@ (8005210 <HAL_DMA_Start_IT+0x4bc>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d018      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a67      	ldr	r2, [pc, #412]	@ (8005214 <HAL_DMA_Start_IT+0x4c0>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a65      	ldr	r2, [pc, #404]	@ (8005218 <HAL_DMA_Start_IT+0x4c4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d00e      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a64      	ldr	r2, [pc, #400]	@ (800521c <HAL_DMA_Start_IT+0x4c8>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d009      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a62      	ldr	r2, [pc, #392]	@ (8005220 <HAL_DMA_Start_IT+0x4cc>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d004      	beq.n	80050a4 <HAL_DMA_Start_IT+0x350>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a61      	ldr	r2, [pc, #388]	@ (8005224 <HAL_DMA_Start_IT+0x4d0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d101      	bne.n	80050a8 <HAL_DMA_Start_IT+0x354>
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <HAL_DMA_Start_IT+0x356>
 80050a8:	2300      	movs	r3, #0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d01a      	beq.n	80050e4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d007      	beq.n	80050cc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050ca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d007      	beq.n	80050e4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a37      	ldr	r2, [pc, #220]	@ (80051c8 <HAL_DMA_Start_IT+0x474>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d04a      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a36      	ldr	r2, [pc, #216]	@ (80051cc <HAL_DMA_Start_IT+0x478>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d045      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a34      	ldr	r2, [pc, #208]	@ (80051d0 <HAL_DMA_Start_IT+0x47c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d040      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a33      	ldr	r2, [pc, #204]	@ (80051d4 <HAL_DMA_Start_IT+0x480>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d03b      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a31      	ldr	r2, [pc, #196]	@ (80051d8 <HAL_DMA_Start_IT+0x484>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d036      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a30      	ldr	r2, [pc, #192]	@ (80051dc <HAL_DMA_Start_IT+0x488>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d031      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a2e      	ldr	r2, [pc, #184]	@ (80051e0 <HAL_DMA_Start_IT+0x48c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d02c      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a2d      	ldr	r2, [pc, #180]	@ (80051e4 <HAL_DMA_Start_IT+0x490>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d027      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a2b      	ldr	r2, [pc, #172]	@ (80051e8 <HAL_DMA_Start_IT+0x494>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d022      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a2a      	ldr	r2, [pc, #168]	@ (80051ec <HAL_DMA_Start_IT+0x498>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d01d      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a28      	ldr	r2, [pc, #160]	@ (80051f0 <HAL_DMA_Start_IT+0x49c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d018      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a27      	ldr	r2, [pc, #156]	@ (80051f4 <HAL_DMA_Start_IT+0x4a0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d013      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a25      	ldr	r2, [pc, #148]	@ (80051f8 <HAL_DMA_Start_IT+0x4a4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00e      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a24      	ldr	r2, [pc, #144]	@ (80051fc <HAL_DMA_Start_IT+0x4a8>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d009      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a22      	ldr	r2, [pc, #136]	@ (8005200 <HAL_DMA_Start_IT+0x4ac>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d004      	beq.n	8005184 <HAL_DMA_Start_IT+0x430>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a21      	ldr	r2, [pc, #132]	@ (8005204 <HAL_DMA_Start_IT+0x4b0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d108      	bne.n	8005196 <HAL_DMA_Start_IT+0x442>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	e012      	b.n	80051bc <HAL_DMA_Start_IT+0x468>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0201 	orr.w	r2, r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	e009      	b.n	80051bc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ae:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3718      	adds	r7, #24
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40020010 	.word	0x40020010
 80051cc:	40020028 	.word	0x40020028
 80051d0:	40020040 	.word	0x40020040
 80051d4:	40020058 	.word	0x40020058
 80051d8:	40020070 	.word	0x40020070
 80051dc:	40020088 	.word	0x40020088
 80051e0:	400200a0 	.word	0x400200a0
 80051e4:	400200b8 	.word	0x400200b8
 80051e8:	40020410 	.word	0x40020410
 80051ec:	40020428 	.word	0x40020428
 80051f0:	40020440 	.word	0x40020440
 80051f4:	40020458 	.word	0x40020458
 80051f8:	40020470 	.word	0x40020470
 80051fc:	40020488 	.word	0x40020488
 8005200:	400204a0 	.word	0x400204a0
 8005204:	400204b8 	.word	0x400204b8
 8005208:	58025408 	.word	0x58025408
 800520c:	5802541c 	.word	0x5802541c
 8005210:	58025430 	.word	0x58025430
 8005214:	58025444 	.word	0x58025444
 8005218:	58025458 	.word	0x58025458
 800521c:	5802546c 	.word	0x5802546c
 8005220:	58025480 	.word	0x58025480
 8005224:	58025494 	.word	0x58025494

08005228 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	@ 0x28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005234:	4b67      	ldr	r3, [pc, #412]	@ (80053d4 <HAL_DMA_IRQHandler+0x1ac>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a67      	ldr	r2, [pc, #412]	@ (80053d8 <HAL_DMA_IRQHandler+0x1b0>)
 800523a:	fba2 2303 	umull	r2, r3, r2, r3
 800523e:	0a9b      	lsrs	r3, r3, #10
 8005240:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005246:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800524c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a5f      	ldr	r2, [pc, #380]	@ (80053dc <HAL_DMA_IRQHandler+0x1b4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04a      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a5d      	ldr	r2, [pc, #372]	@ (80053e0 <HAL_DMA_IRQHandler+0x1b8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d045      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a5c      	ldr	r2, [pc, #368]	@ (80053e4 <HAL_DMA_IRQHandler+0x1bc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d040      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5a      	ldr	r2, [pc, #360]	@ (80053e8 <HAL_DMA_IRQHandler+0x1c0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d03b      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a59      	ldr	r2, [pc, #356]	@ (80053ec <HAL_DMA_IRQHandler+0x1c4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d036      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a57      	ldr	r2, [pc, #348]	@ (80053f0 <HAL_DMA_IRQHandler+0x1c8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d031      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a56      	ldr	r2, [pc, #344]	@ (80053f4 <HAL_DMA_IRQHandler+0x1cc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d02c      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a54      	ldr	r2, [pc, #336]	@ (80053f8 <HAL_DMA_IRQHandler+0x1d0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d027      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a53      	ldr	r2, [pc, #332]	@ (80053fc <HAL_DMA_IRQHandler+0x1d4>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a51      	ldr	r2, [pc, #324]	@ (8005400 <HAL_DMA_IRQHandler+0x1d8>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d01d      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a50      	ldr	r2, [pc, #320]	@ (8005404 <HAL_DMA_IRQHandler+0x1dc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d018      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a4e      	ldr	r2, [pc, #312]	@ (8005408 <HAL_DMA_IRQHandler+0x1e0>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d013      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a4d      	ldr	r2, [pc, #308]	@ (800540c <HAL_DMA_IRQHandler+0x1e4>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00e      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005410 <HAL_DMA_IRQHandler+0x1e8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d009      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a4a      	ldr	r2, [pc, #296]	@ (8005414 <HAL_DMA_IRQHandler+0x1ec>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d004      	beq.n	80052fa <HAL_DMA_IRQHandler+0xd2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a48      	ldr	r2, [pc, #288]	@ (8005418 <HAL_DMA_IRQHandler+0x1f0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d101      	bne.n	80052fe <HAL_DMA_IRQHandler+0xd6>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <HAL_DMA_IRQHandler+0xd8>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 842b 	beq.w	8005b5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	2208      	movs	r2, #8
 8005310:	409a      	lsls	r2, r3
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	4013      	ands	r3, r2
 8005316:	2b00      	cmp	r3, #0
 8005318:	f000 80a2 	beq.w	8005460 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a2e      	ldr	r2, [pc, #184]	@ (80053dc <HAL_DMA_IRQHandler+0x1b4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d04a      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a2d      	ldr	r2, [pc, #180]	@ (80053e0 <HAL_DMA_IRQHandler+0x1b8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d045      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2b      	ldr	r2, [pc, #172]	@ (80053e4 <HAL_DMA_IRQHandler+0x1bc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d040      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a2a      	ldr	r2, [pc, #168]	@ (80053e8 <HAL_DMA_IRQHandler+0x1c0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d03b      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a28      	ldr	r2, [pc, #160]	@ (80053ec <HAL_DMA_IRQHandler+0x1c4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d036      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a27      	ldr	r2, [pc, #156]	@ (80053f0 <HAL_DMA_IRQHandler+0x1c8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d031      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a25      	ldr	r2, [pc, #148]	@ (80053f4 <HAL_DMA_IRQHandler+0x1cc>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d02c      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a24      	ldr	r2, [pc, #144]	@ (80053f8 <HAL_DMA_IRQHandler+0x1d0>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d027      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a22      	ldr	r2, [pc, #136]	@ (80053fc <HAL_DMA_IRQHandler+0x1d4>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d022      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a21      	ldr	r2, [pc, #132]	@ (8005400 <HAL_DMA_IRQHandler+0x1d8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d01d      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a1f      	ldr	r2, [pc, #124]	@ (8005404 <HAL_DMA_IRQHandler+0x1dc>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d018      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a1e      	ldr	r2, [pc, #120]	@ (8005408 <HAL_DMA_IRQHandler+0x1e0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a1c      	ldr	r2, [pc, #112]	@ (800540c <HAL_DMA_IRQHandler+0x1e4>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00e      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1b      	ldr	r2, [pc, #108]	@ (8005410 <HAL_DMA_IRQHandler+0x1e8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d009      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a19      	ldr	r2, [pc, #100]	@ (8005414 <HAL_DMA_IRQHandler+0x1ec>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d004      	beq.n	80053bc <HAL_DMA_IRQHandler+0x194>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a18      	ldr	r2, [pc, #96]	@ (8005418 <HAL_DMA_IRQHandler+0x1f0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d12f      	bne.n	800541c <HAL_DMA_IRQHandler+0x1f4>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0304 	and.w	r3, r3, #4
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf14      	ite	ne
 80053ca:	2301      	movne	r3, #1
 80053cc:	2300      	moveq	r3, #0
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	e02e      	b.n	8005430 <HAL_DMA_IRQHandler+0x208>
 80053d2:	bf00      	nop
 80053d4:	2400001c 	.word	0x2400001c
 80053d8:	1b4e81b5 	.word	0x1b4e81b5
 80053dc:	40020010 	.word	0x40020010
 80053e0:	40020028 	.word	0x40020028
 80053e4:	40020040 	.word	0x40020040
 80053e8:	40020058 	.word	0x40020058
 80053ec:	40020070 	.word	0x40020070
 80053f0:	40020088 	.word	0x40020088
 80053f4:	400200a0 	.word	0x400200a0
 80053f8:	400200b8 	.word	0x400200b8
 80053fc:	40020410 	.word	0x40020410
 8005400:	40020428 	.word	0x40020428
 8005404:	40020440 	.word	0x40020440
 8005408:	40020458 	.word	0x40020458
 800540c:	40020470 	.word	0x40020470
 8005410:	40020488 	.word	0x40020488
 8005414:	400204a0 	.word	0x400204a0
 8005418:	400204b8 	.word	0x400204b8
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	bf14      	ite	ne
 800542a:	2301      	movne	r3, #1
 800542c:	2300      	moveq	r3, #0
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	d015      	beq.n	8005460 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 0204 	bic.w	r2, r2, #4
 8005442:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2208      	movs	r2, #8
 800544e:	409a      	lsls	r2, r3
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005458:	f043 0201 	orr.w	r2, r3, #1
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d06e      	beq.n	8005554 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a69      	ldr	r2, [pc, #420]	@ (8005620 <HAL_DMA_IRQHandler+0x3f8>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d04a      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a67      	ldr	r2, [pc, #412]	@ (8005624 <HAL_DMA_IRQHandler+0x3fc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d045      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a66      	ldr	r2, [pc, #408]	@ (8005628 <HAL_DMA_IRQHandler+0x400>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d040      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a64      	ldr	r2, [pc, #400]	@ (800562c <HAL_DMA_IRQHandler+0x404>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d03b      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a63      	ldr	r2, [pc, #396]	@ (8005630 <HAL_DMA_IRQHandler+0x408>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d036      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a61      	ldr	r2, [pc, #388]	@ (8005634 <HAL_DMA_IRQHandler+0x40c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d031      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a60      	ldr	r2, [pc, #384]	@ (8005638 <HAL_DMA_IRQHandler+0x410>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d02c      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a5e      	ldr	r2, [pc, #376]	@ (800563c <HAL_DMA_IRQHandler+0x414>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d027      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5d      	ldr	r2, [pc, #372]	@ (8005640 <HAL_DMA_IRQHandler+0x418>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d022      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a5b      	ldr	r2, [pc, #364]	@ (8005644 <HAL_DMA_IRQHandler+0x41c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d01d      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a5a      	ldr	r2, [pc, #360]	@ (8005648 <HAL_DMA_IRQHandler+0x420>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a58      	ldr	r2, [pc, #352]	@ (800564c <HAL_DMA_IRQHandler+0x424>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a57      	ldr	r2, [pc, #348]	@ (8005650 <HAL_DMA_IRQHandler+0x428>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a55      	ldr	r2, [pc, #340]	@ (8005654 <HAL_DMA_IRQHandler+0x42c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a54      	ldr	r2, [pc, #336]	@ (8005658 <HAL_DMA_IRQHandler+0x430>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_DMA_IRQHandler+0x2ee>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a52      	ldr	r2, [pc, #328]	@ (800565c <HAL_DMA_IRQHandler+0x434>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d10a      	bne.n	800552c <HAL_DMA_IRQHandler+0x304>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695b      	ldr	r3, [r3, #20]
 800551c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005520:	2b00      	cmp	r3, #0
 8005522:	bf14      	ite	ne
 8005524:	2301      	movne	r3, #1
 8005526:	2300      	moveq	r3, #0
 8005528:	b2db      	uxtb	r3, r3
 800552a:	e003      	b.n	8005534 <HAL_DMA_IRQHandler+0x30c>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2300      	movs	r3, #0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00d      	beq.n	8005554 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800553c:	f003 031f 	and.w	r3, r3, #31
 8005540:	2201      	movs	r2, #1
 8005542:	409a      	lsls	r2, r3
 8005544:	6a3b      	ldr	r3, [r7, #32]
 8005546:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554c:	f043 0202 	orr.w	r2, r3, #2
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005558:	f003 031f 	and.w	r3, r3, #31
 800555c:	2204      	movs	r2, #4
 800555e:	409a      	lsls	r2, r3
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	4013      	ands	r3, r2
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 808f 	beq.w	8005688 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2c      	ldr	r2, [pc, #176]	@ (8005620 <HAL_DMA_IRQHandler+0x3f8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d04a      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a2a      	ldr	r2, [pc, #168]	@ (8005624 <HAL_DMA_IRQHandler+0x3fc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d045      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a29      	ldr	r2, [pc, #164]	@ (8005628 <HAL_DMA_IRQHandler+0x400>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d040      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a27      	ldr	r2, [pc, #156]	@ (800562c <HAL_DMA_IRQHandler+0x404>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d03b      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a26      	ldr	r2, [pc, #152]	@ (8005630 <HAL_DMA_IRQHandler+0x408>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d036      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a24      	ldr	r2, [pc, #144]	@ (8005634 <HAL_DMA_IRQHandler+0x40c>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d031      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a23      	ldr	r2, [pc, #140]	@ (8005638 <HAL_DMA_IRQHandler+0x410>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d02c      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a21      	ldr	r2, [pc, #132]	@ (800563c <HAL_DMA_IRQHandler+0x414>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d027      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a20      	ldr	r2, [pc, #128]	@ (8005640 <HAL_DMA_IRQHandler+0x418>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005644 <HAL_DMA_IRQHandler+0x41c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a1d      	ldr	r2, [pc, #116]	@ (8005648 <HAL_DMA_IRQHandler+0x420>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1b      	ldr	r2, [pc, #108]	@ (800564c <HAL_DMA_IRQHandler+0x424>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005650 <HAL_DMA_IRQHandler+0x428>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a18      	ldr	r2, [pc, #96]	@ (8005654 <HAL_DMA_IRQHandler+0x42c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a17      	ldr	r2, [pc, #92]	@ (8005658 <HAL_DMA_IRQHandler+0x430>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_DMA_IRQHandler+0x3e2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a15      	ldr	r2, [pc, #84]	@ (800565c <HAL_DMA_IRQHandler+0x434>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d12a      	bne.n	8005660 <HAL_DMA_IRQHandler+0x438>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	bf14      	ite	ne
 8005618:	2301      	movne	r3, #1
 800561a:	2300      	moveq	r3, #0
 800561c:	b2db      	uxtb	r3, r3
 800561e:	e023      	b.n	8005668 <HAL_DMA_IRQHandler+0x440>
 8005620:	40020010 	.word	0x40020010
 8005624:	40020028 	.word	0x40020028
 8005628:	40020040 	.word	0x40020040
 800562c:	40020058 	.word	0x40020058
 8005630:	40020070 	.word	0x40020070
 8005634:	40020088 	.word	0x40020088
 8005638:	400200a0 	.word	0x400200a0
 800563c:	400200b8 	.word	0x400200b8
 8005640:	40020410 	.word	0x40020410
 8005644:	40020428 	.word	0x40020428
 8005648:	40020440 	.word	0x40020440
 800564c:	40020458 	.word	0x40020458
 8005650:	40020470 	.word	0x40020470
 8005654:	40020488 	.word	0x40020488
 8005658:	400204a0 	.word	0x400204a0
 800565c:	400204b8 	.word	0x400204b8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00d      	beq.n	8005688 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005670:	f003 031f 	and.w	r3, r3, #31
 8005674:	2204      	movs	r2, #4
 8005676:	409a      	lsls	r2, r3
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005680:	f043 0204 	orr.w	r2, r3, #4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800568c:	f003 031f 	and.w	r3, r3, #31
 8005690:	2210      	movs	r2, #16
 8005692:	409a      	lsls	r2, r3
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80a6 	beq.w	80057ea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a85      	ldr	r2, [pc, #532]	@ (80058b8 <HAL_DMA_IRQHandler+0x690>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d04a      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a83      	ldr	r2, [pc, #524]	@ (80058bc <HAL_DMA_IRQHandler+0x694>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d045      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a82      	ldr	r2, [pc, #520]	@ (80058c0 <HAL_DMA_IRQHandler+0x698>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d040      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a80      	ldr	r2, [pc, #512]	@ (80058c4 <HAL_DMA_IRQHandler+0x69c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d03b      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a7f      	ldr	r2, [pc, #508]	@ (80058c8 <HAL_DMA_IRQHandler+0x6a0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d036      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a7d      	ldr	r2, [pc, #500]	@ (80058cc <HAL_DMA_IRQHandler+0x6a4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d031      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a7c      	ldr	r2, [pc, #496]	@ (80058d0 <HAL_DMA_IRQHandler+0x6a8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d02c      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a7a      	ldr	r2, [pc, #488]	@ (80058d4 <HAL_DMA_IRQHandler+0x6ac>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d027      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a79      	ldr	r2, [pc, #484]	@ (80058d8 <HAL_DMA_IRQHandler+0x6b0>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a77      	ldr	r2, [pc, #476]	@ (80058dc <HAL_DMA_IRQHandler+0x6b4>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d01d      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a76      	ldr	r2, [pc, #472]	@ (80058e0 <HAL_DMA_IRQHandler+0x6b8>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a74      	ldr	r2, [pc, #464]	@ (80058e4 <HAL_DMA_IRQHandler+0x6bc>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a73      	ldr	r2, [pc, #460]	@ (80058e8 <HAL_DMA_IRQHandler+0x6c0>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a71      	ldr	r2, [pc, #452]	@ (80058ec <HAL_DMA_IRQHandler+0x6c4>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a70      	ldr	r2, [pc, #448]	@ (80058f0 <HAL_DMA_IRQHandler+0x6c8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_DMA_IRQHandler+0x516>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a6e      	ldr	r2, [pc, #440]	@ (80058f4 <HAL_DMA_IRQHandler+0x6cc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d10a      	bne.n	8005754 <HAL_DMA_IRQHandler+0x52c>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	bf14      	ite	ne
 800574c:	2301      	movne	r3, #1
 800574e:	2300      	moveq	r3, #0
 8005750:	b2db      	uxtb	r3, r3
 8005752:	e009      	b.n	8005768 <HAL_DMA_IRQHandler+0x540>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f003 0304 	and.w	r3, r3, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d03e      	beq.n	80057ea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005770:	f003 031f 	and.w	r3, r3, #31
 8005774:	2210      	movs	r2, #16
 8005776:	409a      	lsls	r2, r3
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d018      	beq.n	80057bc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d108      	bne.n	80057aa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800579c:	2b00      	cmp	r3, #0
 800579e:	d024      	beq.n	80057ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	4798      	blx	r3
 80057a8:	e01f      	b.n	80057ea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d01b      	beq.n	80057ea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	4798      	blx	r3
 80057ba:	e016      	b.n	80057ea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d107      	bne.n	80057da <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0208 	bic.w	r2, r2, #8
 80057d8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ee:	f003 031f 	and.w	r3, r3, #31
 80057f2:	2220      	movs	r2, #32
 80057f4:	409a      	lsls	r2, r3
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f000 8110 	beq.w	8005a20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2c      	ldr	r2, [pc, #176]	@ (80058b8 <HAL_DMA_IRQHandler+0x690>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d04a      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a2b      	ldr	r2, [pc, #172]	@ (80058bc <HAL_DMA_IRQHandler+0x694>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d045      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a29      	ldr	r2, [pc, #164]	@ (80058c0 <HAL_DMA_IRQHandler+0x698>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d040      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a28      	ldr	r2, [pc, #160]	@ (80058c4 <HAL_DMA_IRQHandler+0x69c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d03b      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a26      	ldr	r2, [pc, #152]	@ (80058c8 <HAL_DMA_IRQHandler+0x6a0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d036      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a25      	ldr	r2, [pc, #148]	@ (80058cc <HAL_DMA_IRQHandler+0x6a4>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d031      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a23      	ldr	r2, [pc, #140]	@ (80058d0 <HAL_DMA_IRQHandler+0x6a8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d02c      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a22      	ldr	r2, [pc, #136]	@ (80058d4 <HAL_DMA_IRQHandler+0x6ac>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d027      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a20      	ldr	r2, [pc, #128]	@ (80058d8 <HAL_DMA_IRQHandler+0x6b0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d022      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1f      	ldr	r2, [pc, #124]	@ (80058dc <HAL_DMA_IRQHandler+0x6b4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d01d      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a1d      	ldr	r2, [pc, #116]	@ (80058e0 <HAL_DMA_IRQHandler+0x6b8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d018      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a1c      	ldr	r2, [pc, #112]	@ (80058e4 <HAL_DMA_IRQHandler+0x6bc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d013      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1a      	ldr	r2, [pc, #104]	@ (80058e8 <HAL_DMA_IRQHandler+0x6c0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d00e      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a19      	ldr	r2, [pc, #100]	@ (80058ec <HAL_DMA_IRQHandler+0x6c4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d009      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a17      	ldr	r2, [pc, #92]	@ (80058f0 <HAL_DMA_IRQHandler+0x6c8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d004      	beq.n	80058a0 <HAL_DMA_IRQHandler+0x678>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a16      	ldr	r2, [pc, #88]	@ (80058f4 <HAL_DMA_IRQHandler+0x6cc>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d12b      	bne.n	80058f8 <HAL_DMA_IRQHandler+0x6d0>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	bf14      	ite	ne
 80058ae:	2301      	movne	r3, #1
 80058b0:	2300      	moveq	r3, #0
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	e02a      	b.n	800590c <HAL_DMA_IRQHandler+0x6e4>
 80058b6:	bf00      	nop
 80058b8:	40020010 	.word	0x40020010
 80058bc:	40020028 	.word	0x40020028
 80058c0:	40020040 	.word	0x40020040
 80058c4:	40020058 	.word	0x40020058
 80058c8:	40020070 	.word	0x40020070
 80058cc:	40020088 	.word	0x40020088
 80058d0:	400200a0 	.word	0x400200a0
 80058d4:	400200b8 	.word	0x400200b8
 80058d8:	40020410 	.word	0x40020410
 80058dc:	40020428 	.word	0x40020428
 80058e0:	40020440 	.word	0x40020440
 80058e4:	40020458 	.word	0x40020458
 80058e8:	40020470 	.word	0x40020470
 80058ec:	40020488 	.word	0x40020488
 80058f0:	400204a0 	.word	0x400204a0
 80058f4:	400204b8 	.word	0x400204b8
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
 8005902:	2b00      	cmp	r3, #0
 8005904:	bf14      	ite	ne
 8005906:	2301      	movne	r3, #1
 8005908:	2300      	moveq	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8087 	beq.w	8005a20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005916:	f003 031f 	and.w	r3, r3, #31
 800591a:	2220      	movs	r2, #32
 800591c:	409a      	lsls	r2, r3
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b04      	cmp	r3, #4
 800592c:	d139      	bne.n	80059a2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f022 0216 	bic.w	r2, r2, #22
 800593c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695a      	ldr	r2, [r3, #20]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800594c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d103      	bne.n	800595e <HAL_DMA_IRQHandler+0x736>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800595a:	2b00      	cmp	r3, #0
 800595c:	d007      	beq.n	800596e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0208 	bic.w	r2, r2, #8
 800596c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005972:	f003 031f 	and.w	r3, r3, #31
 8005976:	223f      	movs	r2, #63	@ 0x3f
 8005978:	409a      	lsls	r2, r3
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 834a 	beq.w	800602c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
          }
          return;
 80059a0:	e344      	b.n	800602c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d018      	beq.n	80059e2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d108      	bne.n	80059d0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d02c      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
 80059ce:	e027      	b.n	8005a20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d023      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
 80059e0:	e01e      	b.n	8005a20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10f      	bne.n	8005a10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0210 	bic.w	r2, r2, #16
 80059fe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8306 	beq.w	8006036 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 8088 	beq.w	8005b48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2204      	movs	r2, #4
 8005a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a7a      	ldr	r2, [pc, #488]	@ (8005c30 <HAL_DMA_IRQHandler+0xa08>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d04a      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a79      	ldr	r2, [pc, #484]	@ (8005c34 <HAL_DMA_IRQHandler+0xa0c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d045      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a77      	ldr	r2, [pc, #476]	@ (8005c38 <HAL_DMA_IRQHandler+0xa10>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d040      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a76      	ldr	r2, [pc, #472]	@ (8005c3c <HAL_DMA_IRQHandler+0xa14>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d03b      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a74      	ldr	r2, [pc, #464]	@ (8005c40 <HAL_DMA_IRQHandler+0xa18>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d036      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a73      	ldr	r2, [pc, #460]	@ (8005c44 <HAL_DMA_IRQHandler+0xa1c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d031      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a71      	ldr	r2, [pc, #452]	@ (8005c48 <HAL_DMA_IRQHandler+0xa20>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d02c      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a70      	ldr	r2, [pc, #448]	@ (8005c4c <HAL_DMA_IRQHandler+0xa24>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d027      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a6e      	ldr	r2, [pc, #440]	@ (8005c50 <HAL_DMA_IRQHandler+0xa28>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d022      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a6d      	ldr	r2, [pc, #436]	@ (8005c54 <HAL_DMA_IRQHandler+0xa2c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d01d      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a6b      	ldr	r2, [pc, #428]	@ (8005c58 <HAL_DMA_IRQHandler+0xa30>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d018      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a6a      	ldr	r2, [pc, #424]	@ (8005c5c <HAL_DMA_IRQHandler+0xa34>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a68      	ldr	r2, [pc, #416]	@ (8005c60 <HAL_DMA_IRQHandler+0xa38>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d00e      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a67      	ldr	r2, [pc, #412]	@ (8005c64 <HAL_DMA_IRQHandler+0xa3c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d009      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a65      	ldr	r2, [pc, #404]	@ (8005c68 <HAL_DMA_IRQHandler+0xa40>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d004      	beq.n	8005ae0 <HAL_DMA_IRQHandler+0x8b8>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a64      	ldr	r2, [pc, #400]	@ (8005c6c <HAL_DMA_IRQHandler+0xa44>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d108      	bne.n	8005af2 <HAL_DMA_IRQHandler+0x8ca>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0201 	bic.w	r2, r2, #1
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	e007      	b.n	8005b02 <HAL_DMA_IRQHandler+0x8da>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f022 0201 	bic.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	3301      	adds	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d307      	bcc.n	8005b1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1f2      	bne.n	8005b02 <HAL_DMA_IRQHandler+0x8da>
 8005b1c:	e000      	b.n	8005b20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d004      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2203      	movs	r2, #3
 8005b32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8005b36:	e003      	b.n	8005b40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8272 	beq.w	8006036 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	4798      	blx	r3
 8005b5a:	e26c      	b.n	8006036 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a43      	ldr	r2, [pc, #268]	@ (8005c70 <HAL_DMA_IRQHandler+0xa48>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d022      	beq.n	8005bac <HAL_DMA_IRQHandler+0x984>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a42      	ldr	r2, [pc, #264]	@ (8005c74 <HAL_DMA_IRQHandler+0xa4c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d01d      	beq.n	8005bac <HAL_DMA_IRQHandler+0x984>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a40      	ldr	r2, [pc, #256]	@ (8005c78 <HAL_DMA_IRQHandler+0xa50>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d018      	beq.n	8005bac <HAL_DMA_IRQHandler+0x984>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8005c7c <HAL_DMA_IRQHandler+0xa54>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d013      	beq.n	8005bac <HAL_DMA_IRQHandler+0x984>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a3d      	ldr	r2, [pc, #244]	@ (8005c80 <HAL_DMA_IRQHandler+0xa58>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00e      	beq.n	8005bac <HAL_DMA_IRQHandler+0x984>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a3c      	ldr	r2, [pc, #240]	@ (8005c84 <HAL_DMA_IRQHandler+0xa5c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_DMA_IRQHandler+0x984>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8005c88 <HAL_DMA_IRQHandler+0xa60>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d004      	beq.n	8005bac <HAL_DMA_IRQHandler+0x984>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a39      	ldr	r2, [pc, #228]	@ (8005c8c <HAL_DMA_IRQHandler+0xa64>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d101      	bne.n	8005bb0 <HAL_DMA_IRQHandler+0x988>
 8005bac:	2301      	movs	r3, #1
 8005bae:	e000      	b.n	8005bb2 <HAL_DMA_IRQHandler+0x98a>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 823f 	beq.w	8006036 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2204      	movs	r2, #4
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	f000 80cd 	beq.w	8005d70 <HAL_DMA_IRQHandler+0xb48>
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 80c7 	beq.w	8005d70 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	2204      	movs	r2, #4
 8005bec:	409a      	lsls	r2, r3
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d049      	beq.n	8005c90 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d109      	bne.n	8005c1a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 8210 	beq.w	8006030 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c18:	e20a      	b.n	8006030 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8206 	beq.w	8006030 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c2c:	e200      	b.n	8006030 <HAL_DMA_IRQHandler+0xe08>
 8005c2e:	bf00      	nop
 8005c30:	40020010 	.word	0x40020010
 8005c34:	40020028 	.word	0x40020028
 8005c38:	40020040 	.word	0x40020040
 8005c3c:	40020058 	.word	0x40020058
 8005c40:	40020070 	.word	0x40020070
 8005c44:	40020088 	.word	0x40020088
 8005c48:	400200a0 	.word	0x400200a0
 8005c4c:	400200b8 	.word	0x400200b8
 8005c50:	40020410 	.word	0x40020410
 8005c54:	40020428 	.word	0x40020428
 8005c58:	40020440 	.word	0x40020440
 8005c5c:	40020458 	.word	0x40020458
 8005c60:	40020470 	.word	0x40020470
 8005c64:	40020488 	.word	0x40020488
 8005c68:	400204a0 	.word	0x400204a0
 8005c6c:	400204b8 	.word	0x400204b8
 8005c70:	58025408 	.word	0x58025408
 8005c74:	5802541c 	.word	0x5802541c
 8005c78:	58025430 	.word	0x58025430
 8005c7c:	58025444 	.word	0x58025444
 8005c80:	58025458 	.word	0x58025458
 8005c84:	5802546c 	.word	0x5802546c
 8005c88:	58025480 	.word	0x58025480
 8005c8c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	f003 0320 	and.w	r3, r3, #32
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d160      	bne.n	8005d5c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a7f      	ldr	r2, [pc, #508]	@ (8005e9c <HAL_DMA_IRQHandler+0xc74>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d04a      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a7d      	ldr	r2, [pc, #500]	@ (8005ea0 <HAL_DMA_IRQHandler+0xc78>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d045      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ea4 <HAL_DMA_IRQHandler+0xc7c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d040      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a7a      	ldr	r2, [pc, #488]	@ (8005ea8 <HAL_DMA_IRQHandler+0xc80>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d03b      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a79      	ldr	r2, [pc, #484]	@ (8005eac <HAL_DMA_IRQHandler+0xc84>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d036      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a77      	ldr	r2, [pc, #476]	@ (8005eb0 <HAL_DMA_IRQHandler+0xc88>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d031      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a76      	ldr	r2, [pc, #472]	@ (8005eb4 <HAL_DMA_IRQHandler+0xc8c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d02c      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a74      	ldr	r2, [pc, #464]	@ (8005eb8 <HAL_DMA_IRQHandler+0xc90>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d027      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a73      	ldr	r2, [pc, #460]	@ (8005ebc <HAL_DMA_IRQHandler+0xc94>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d022      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a71      	ldr	r2, [pc, #452]	@ (8005ec0 <HAL_DMA_IRQHandler+0xc98>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d01d      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a70      	ldr	r2, [pc, #448]	@ (8005ec4 <HAL_DMA_IRQHandler+0xc9c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d018      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a6e      	ldr	r2, [pc, #440]	@ (8005ec8 <HAL_DMA_IRQHandler+0xca0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d013      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a6d      	ldr	r2, [pc, #436]	@ (8005ecc <HAL_DMA_IRQHandler+0xca4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d00e      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed0 <HAL_DMA_IRQHandler+0xca8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d009      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a6a      	ldr	r2, [pc, #424]	@ (8005ed4 <HAL_DMA_IRQHandler+0xcac>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d004      	beq.n	8005d3a <HAL_DMA_IRQHandler+0xb12>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a68      	ldr	r2, [pc, #416]	@ (8005ed8 <HAL_DMA_IRQHandler+0xcb0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d108      	bne.n	8005d4c <HAL_DMA_IRQHandler+0xb24>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0208 	bic.w	r2, r2, #8
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e007      	b.n	8005d5c <HAL_DMA_IRQHandler+0xb34>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f022 0204 	bic.w	r2, r2, #4
 8005d5a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f000 8165 	beq.w	8006030 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d6e:	e15f      	b.n	8006030 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d74:	f003 031f 	and.w	r3, r3, #31
 8005d78:	2202      	movs	r2, #2
 8005d7a:	409a      	lsls	r2, r3
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 80c5 	beq.w	8005f10 <HAL_DMA_IRQHandler+0xce8>
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80bf 	beq.w	8005f10 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	409a      	lsls	r2, r3
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d018      	beq.n	8005dde <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 813a 	beq.w	8006034 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dc8:	e134      	b.n	8006034 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	f000 8130 	beq.w	8006034 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ddc:	e12a      	b.n	8006034 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f003 0320 	and.w	r3, r3, #32
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f040 8089 	bne.w	8005efc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a2b      	ldr	r2, [pc, #172]	@ (8005e9c <HAL_DMA_IRQHandler+0xc74>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d04a      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a29      	ldr	r2, [pc, #164]	@ (8005ea0 <HAL_DMA_IRQHandler+0xc78>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d045      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a28      	ldr	r2, [pc, #160]	@ (8005ea4 <HAL_DMA_IRQHandler+0xc7c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d040      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a26      	ldr	r2, [pc, #152]	@ (8005ea8 <HAL_DMA_IRQHandler+0xc80>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d03b      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a25      	ldr	r2, [pc, #148]	@ (8005eac <HAL_DMA_IRQHandler+0xc84>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d036      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a23      	ldr	r2, [pc, #140]	@ (8005eb0 <HAL_DMA_IRQHandler+0xc88>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d031      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a22      	ldr	r2, [pc, #136]	@ (8005eb4 <HAL_DMA_IRQHandler+0xc8c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d02c      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a20      	ldr	r2, [pc, #128]	@ (8005eb8 <HAL_DMA_IRQHandler+0xc90>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d027      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ebc <HAL_DMA_IRQHandler+0xc94>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d022      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec0 <HAL_DMA_IRQHandler+0xc98>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d01d      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1c      	ldr	r2, [pc, #112]	@ (8005ec4 <HAL_DMA_IRQHandler+0xc9c>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d018      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ec8 <HAL_DMA_IRQHandler+0xca0>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d013      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a19      	ldr	r2, [pc, #100]	@ (8005ecc <HAL_DMA_IRQHandler+0xca4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00e      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a17      	ldr	r2, [pc, #92]	@ (8005ed0 <HAL_DMA_IRQHandler+0xca8>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d009      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a16      	ldr	r2, [pc, #88]	@ (8005ed4 <HAL_DMA_IRQHandler+0xcac>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d004      	beq.n	8005e8a <HAL_DMA_IRQHandler+0xc62>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a14      	ldr	r2, [pc, #80]	@ (8005ed8 <HAL_DMA_IRQHandler+0xcb0>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d128      	bne.n	8005edc <HAL_DMA_IRQHandler+0xcb4>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0214 	bic.w	r2, r2, #20
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e027      	b.n	8005eec <HAL_DMA_IRQHandler+0xcc4>
 8005e9c:	40020010 	.word	0x40020010
 8005ea0:	40020028 	.word	0x40020028
 8005ea4:	40020040 	.word	0x40020040
 8005ea8:	40020058 	.word	0x40020058
 8005eac:	40020070 	.word	0x40020070
 8005eb0:	40020088 	.word	0x40020088
 8005eb4:	400200a0 	.word	0x400200a0
 8005eb8:	400200b8 	.word	0x400200b8
 8005ebc:	40020410 	.word	0x40020410
 8005ec0:	40020428 	.word	0x40020428
 8005ec4:	40020440 	.word	0x40020440
 8005ec8:	40020458 	.word	0x40020458
 8005ecc:	40020470 	.word	0x40020470
 8005ed0:	40020488 	.word	0x40020488
 8005ed4:	400204a0 	.word	0x400204a0
 8005ed8:	400204b8 	.word	0x400204b8
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681a      	ldr	r2, [r3, #0]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f022 020a 	bic.w	r2, r2, #10
 8005eea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8097 	beq.w	8006034 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f0e:	e091      	b.n	8006034 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2208      	movs	r2, #8
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8088 	beq.w	8006036 <HAL_DMA_IRQHandler+0xe0e>
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8082 	beq.w	8006036 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a41      	ldr	r2, [pc, #260]	@ (800603c <HAL_DMA_IRQHandler+0xe14>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d04a      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a3f      	ldr	r2, [pc, #252]	@ (8006040 <HAL_DMA_IRQHandler+0xe18>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d045      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8006044 <HAL_DMA_IRQHandler+0xe1c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d040      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a3c      	ldr	r2, [pc, #240]	@ (8006048 <HAL_DMA_IRQHandler+0xe20>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d03b      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800604c <HAL_DMA_IRQHandler+0xe24>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d036      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a39      	ldr	r2, [pc, #228]	@ (8006050 <HAL_DMA_IRQHandler+0xe28>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d031      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a38      	ldr	r2, [pc, #224]	@ (8006054 <HAL_DMA_IRQHandler+0xe2c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d02c      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a36      	ldr	r2, [pc, #216]	@ (8006058 <HAL_DMA_IRQHandler+0xe30>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d027      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a35      	ldr	r2, [pc, #212]	@ (800605c <HAL_DMA_IRQHandler+0xe34>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d022      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a33      	ldr	r2, [pc, #204]	@ (8006060 <HAL_DMA_IRQHandler+0xe38>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d01d      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a32      	ldr	r2, [pc, #200]	@ (8006064 <HAL_DMA_IRQHandler+0xe3c>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d018      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a30      	ldr	r2, [pc, #192]	@ (8006068 <HAL_DMA_IRQHandler+0xe40>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d013      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a2f      	ldr	r2, [pc, #188]	@ (800606c <HAL_DMA_IRQHandler+0xe44>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8006070 <HAL_DMA_IRQHandler+0xe48>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d009      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006074 <HAL_DMA_IRQHandler+0xe4c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xdaa>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a2a      	ldr	r2, [pc, #168]	@ (8006078 <HAL_DMA_IRQHandler+0xe50>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <HAL_DMA_IRQHandler+0xdbc>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 021c 	bic.w	r2, r2, #28
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	e007      	b.n	8005ff4 <HAL_DMA_IRQHandler+0xdcc>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 020e 	bic.w	r2, r2, #14
 8005ff2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff8:	f003 031f 	and.w	r3, r3, #31
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	409a      	lsls	r2, r3
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d009      	beq.n	8006036 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	4798      	blx	r3
 800602a:	e004      	b.n	8006036 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800602c:	bf00      	nop
 800602e:	e002      	b.n	8006036 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006030:	bf00      	nop
 8006032:	e000      	b.n	8006036 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006034:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006036:	3728      	adds	r7, #40	@ 0x28
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	40020010 	.word	0x40020010
 8006040:	40020028 	.word	0x40020028
 8006044:	40020040 	.word	0x40020040
 8006048:	40020058 	.word	0x40020058
 800604c:	40020070 	.word	0x40020070
 8006050:	40020088 	.word	0x40020088
 8006054:	400200a0 	.word	0x400200a0
 8006058:	400200b8 	.word	0x400200b8
 800605c:	40020410 	.word	0x40020410
 8006060:	40020428 	.word	0x40020428
 8006064:	40020440 	.word	0x40020440
 8006068:	40020458 	.word	0x40020458
 800606c:	40020470 	.word	0x40020470
 8006070:	40020488 	.word	0x40020488
 8006074:	400204a0 	.word	0x400204a0
 8006078:	400204b8 	.word	0x400204b8

0800607c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800608e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006094:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a7f      	ldr	r2, [pc, #508]	@ (8006298 <DMA_SetConfig+0x21c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d072      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a7d      	ldr	r2, [pc, #500]	@ (800629c <DMA_SetConfig+0x220>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d06d      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a7c      	ldr	r2, [pc, #496]	@ (80062a0 <DMA_SetConfig+0x224>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d068      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a7a      	ldr	r2, [pc, #488]	@ (80062a4 <DMA_SetConfig+0x228>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d063      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a79      	ldr	r2, [pc, #484]	@ (80062a8 <DMA_SetConfig+0x22c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d05e      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a77      	ldr	r2, [pc, #476]	@ (80062ac <DMA_SetConfig+0x230>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d059      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a76      	ldr	r2, [pc, #472]	@ (80062b0 <DMA_SetConfig+0x234>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d054      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a74      	ldr	r2, [pc, #464]	@ (80062b4 <DMA_SetConfig+0x238>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d04f      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a73      	ldr	r2, [pc, #460]	@ (80062b8 <DMA_SetConfig+0x23c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d04a      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a71      	ldr	r2, [pc, #452]	@ (80062bc <DMA_SetConfig+0x240>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d045      	beq.n	8006186 <DMA_SetConfig+0x10a>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a70      	ldr	r2, [pc, #448]	@ (80062c0 <DMA_SetConfig+0x244>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d040      	beq.n	8006186 <DMA_SetConfig+0x10a>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a6e      	ldr	r2, [pc, #440]	@ (80062c4 <DMA_SetConfig+0x248>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d03b      	beq.n	8006186 <DMA_SetConfig+0x10a>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a6d      	ldr	r2, [pc, #436]	@ (80062c8 <DMA_SetConfig+0x24c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d036      	beq.n	8006186 <DMA_SetConfig+0x10a>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a6b      	ldr	r2, [pc, #428]	@ (80062cc <DMA_SetConfig+0x250>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d031      	beq.n	8006186 <DMA_SetConfig+0x10a>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a6a      	ldr	r2, [pc, #424]	@ (80062d0 <DMA_SetConfig+0x254>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d02c      	beq.n	8006186 <DMA_SetConfig+0x10a>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a68      	ldr	r2, [pc, #416]	@ (80062d4 <DMA_SetConfig+0x258>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d027      	beq.n	8006186 <DMA_SetConfig+0x10a>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a67      	ldr	r2, [pc, #412]	@ (80062d8 <DMA_SetConfig+0x25c>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d022      	beq.n	8006186 <DMA_SetConfig+0x10a>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a65      	ldr	r2, [pc, #404]	@ (80062dc <DMA_SetConfig+0x260>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01d      	beq.n	8006186 <DMA_SetConfig+0x10a>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a64      	ldr	r2, [pc, #400]	@ (80062e0 <DMA_SetConfig+0x264>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d018      	beq.n	8006186 <DMA_SetConfig+0x10a>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a62      	ldr	r2, [pc, #392]	@ (80062e4 <DMA_SetConfig+0x268>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d013      	beq.n	8006186 <DMA_SetConfig+0x10a>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a61      	ldr	r2, [pc, #388]	@ (80062e8 <DMA_SetConfig+0x26c>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00e      	beq.n	8006186 <DMA_SetConfig+0x10a>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a5f      	ldr	r2, [pc, #380]	@ (80062ec <DMA_SetConfig+0x270>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d009      	beq.n	8006186 <DMA_SetConfig+0x10a>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a5e      	ldr	r2, [pc, #376]	@ (80062f0 <DMA_SetConfig+0x274>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d004      	beq.n	8006186 <DMA_SetConfig+0x10a>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a5c      	ldr	r2, [pc, #368]	@ (80062f4 <DMA_SetConfig+0x278>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <DMA_SetConfig+0x10e>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <DMA_SetConfig+0x110>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00d      	beq.n	80061ac <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006198:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80061aa:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a39      	ldr	r2, [pc, #228]	@ (8006298 <DMA_SetConfig+0x21c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d04a      	beq.n	800624c <DMA_SetConfig+0x1d0>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a38      	ldr	r2, [pc, #224]	@ (800629c <DMA_SetConfig+0x220>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d045      	beq.n	800624c <DMA_SetConfig+0x1d0>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a36      	ldr	r2, [pc, #216]	@ (80062a0 <DMA_SetConfig+0x224>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d040      	beq.n	800624c <DMA_SetConfig+0x1d0>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a35      	ldr	r2, [pc, #212]	@ (80062a4 <DMA_SetConfig+0x228>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d03b      	beq.n	800624c <DMA_SetConfig+0x1d0>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a33      	ldr	r2, [pc, #204]	@ (80062a8 <DMA_SetConfig+0x22c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d036      	beq.n	800624c <DMA_SetConfig+0x1d0>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a32      	ldr	r2, [pc, #200]	@ (80062ac <DMA_SetConfig+0x230>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d031      	beq.n	800624c <DMA_SetConfig+0x1d0>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a30      	ldr	r2, [pc, #192]	@ (80062b0 <DMA_SetConfig+0x234>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d02c      	beq.n	800624c <DMA_SetConfig+0x1d0>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a2f      	ldr	r2, [pc, #188]	@ (80062b4 <DMA_SetConfig+0x238>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d027      	beq.n	800624c <DMA_SetConfig+0x1d0>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a2d      	ldr	r2, [pc, #180]	@ (80062b8 <DMA_SetConfig+0x23c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d022      	beq.n	800624c <DMA_SetConfig+0x1d0>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a2c      	ldr	r2, [pc, #176]	@ (80062bc <DMA_SetConfig+0x240>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d01d      	beq.n	800624c <DMA_SetConfig+0x1d0>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a2a      	ldr	r2, [pc, #168]	@ (80062c0 <DMA_SetConfig+0x244>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d018      	beq.n	800624c <DMA_SetConfig+0x1d0>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a29      	ldr	r2, [pc, #164]	@ (80062c4 <DMA_SetConfig+0x248>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d013      	beq.n	800624c <DMA_SetConfig+0x1d0>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a27      	ldr	r2, [pc, #156]	@ (80062c8 <DMA_SetConfig+0x24c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00e      	beq.n	800624c <DMA_SetConfig+0x1d0>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a26      	ldr	r2, [pc, #152]	@ (80062cc <DMA_SetConfig+0x250>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d009      	beq.n	800624c <DMA_SetConfig+0x1d0>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a24      	ldr	r2, [pc, #144]	@ (80062d0 <DMA_SetConfig+0x254>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d004      	beq.n	800624c <DMA_SetConfig+0x1d0>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a23      	ldr	r2, [pc, #140]	@ (80062d4 <DMA_SetConfig+0x258>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d101      	bne.n	8006250 <DMA_SetConfig+0x1d4>
 800624c:	2301      	movs	r3, #1
 800624e:	e000      	b.n	8006252 <DMA_SetConfig+0x1d6>
 8006250:	2300      	movs	r3, #0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d059      	beq.n	800630a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625a:	f003 031f 	and.w	r3, r3, #31
 800625e:	223f      	movs	r2, #63	@ 0x3f
 8006260:	409a      	lsls	r2, r3
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006274:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	683a      	ldr	r2, [r7, #0]
 800627c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	2b40      	cmp	r3, #64	@ 0x40
 8006284:	d138      	bne.n	80062f8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68ba      	ldr	r2, [r7, #8]
 8006294:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006296:	e086      	b.n	80063a6 <DMA_SetConfig+0x32a>
 8006298:	40020010 	.word	0x40020010
 800629c:	40020028 	.word	0x40020028
 80062a0:	40020040 	.word	0x40020040
 80062a4:	40020058 	.word	0x40020058
 80062a8:	40020070 	.word	0x40020070
 80062ac:	40020088 	.word	0x40020088
 80062b0:	400200a0 	.word	0x400200a0
 80062b4:	400200b8 	.word	0x400200b8
 80062b8:	40020410 	.word	0x40020410
 80062bc:	40020428 	.word	0x40020428
 80062c0:	40020440 	.word	0x40020440
 80062c4:	40020458 	.word	0x40020458
 80062c8:	40020470 	.word	0x40020470
 80062cc:	40020488 	.word	0x40020488
 80062d0:	400204a0 	.word	0x400204a0
 80062d4:	400204b8 	.word	0x400204b8
 80062d8:	58025408 	.word	0x58025408
 80062dc:	5802541c 	.word	0x5802541c
 80062e0:	58025430 	.word	0x58025430
 80062e4:	58025444 	.word	0x58025444
 80062e8:	58025458 	.word	0x58025458
 80062ec:	5802546c 	.word	0x5802546c
 80062f0:	58025480 	.word	0x58025480
 80062f4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	60da      	str	r2, [r3, #12]
}
 8006308:	e04d      	b.n	80063a6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a29      	ldr	r2, [pc, #164]	@ (80063b4 <DMA_SetConfig+0x338>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d022      	beq.n	800635a <DMA_SetConfig+0x2de>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a27      	ldr	r2, [pc, #156]	@ (80063b8 <DMA_SetConfig+0x33c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d01d      	beq.n	800635a <DMA_SetConfig+0x2de>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a26      	ldr	r2, [pc, #152]	@ (80063bc <DMA_SetConfig+0x340>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d018      	beq.n	800635a <DMA_SetConfig+0x2de>
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a24      	ldr	r2, [pc, #144]	@ (80063c0 <DMA_SetConfig+0x344>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d013      	beq.n	800635a <DMA_SetConfig+0x2de>
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a23      	ldr	r2, [pc, #140]	@ (80063c4 <DMA_SetConfig+0x348>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d00e      	beq.n	800635a <DMA_SetConfig+0x2de>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a21      	ldr	r2, [pc, #132]	@ (80063c8 <DMA_SetConfig+0x34c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d009      	beq.n	800635a <DMA_SetConfig+0x2de>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a20      	ldr	r2, [pc, #128]	@ (80063cc <DMA_SetConfig+0x350>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d004      	beq.n	800635a <DMA_SetConfig+0x2de>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1e      	ldr	r2, [pc, #120]	@ (80063d0 <DMA_SetConfig+0x354>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <DMA_SetConfig+0x2e2>
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <DMA_SetConfig+0x2e4>
 800635e:	2300      	movs	r3, #0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d020      	beq.n	80063a6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	2201      	movs	r2, #1
 800636e:	409a      	lsls	r2, r3
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	2b40      	cmp	r3, #64	@ 0x40
 8006382:	d108      	bne.n	8006396 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	60da      	str	r2, [r3, #12]
}
 8006394:	e007      	b.n	80063a6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	60da      	str	r2, [r3, #12]
}
 80063a6:	bf00      	nop
 80063a8:	371c      	adds	r7, #28
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	58025408 	.word	0x58025408
 80063b8:	5802541c 	.word	0x5802541c
 80063bc:	58025430 	.word	0x58025430
 80063c0:	58025444 	.word	0x58025444
 80063c4:	58025458 	.word	0x58025458
 80063c8:	5802546c 	.word	0x5802546c
 80063cc:	58025480 	.word	0x58025480
 80063d0:	58025494 	.word	0x58025494

080063d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a42      	ldr	r2, [pc, #264]	@ (80064ec <DMA_CalcBaseAndBitshift+0x118>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d04a      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a41      	ldr	r2, [pc, #260]	@ (80064f0 <DMA_CalcBaseAndBitshift+0x11c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d045      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a3f      	ldr	r2, [pc, #252]	@ (80064f4 <DMA_CalcBaseAndBitshift+0x120>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d040      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a3e      	ldr	r2, [pc, #248]	@ (80064f8 <DMA_CalcBaseAndBitshift+0x124>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d03b      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a3c      	ldr	r2, [pc, #240]	@ (80064fc <DMA_CalcBaseAndBitshift+0x128>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d036      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a3b      	ldr	r2, [pc, #236]	@ (8006500 <DMA_CalcBaseAndBitshift+0x12c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d031      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a39      	ldr	r2, [pc, #228]	@ (8006504 <DMA_CalcBaseAndBitshift+0x130>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d02c      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a38      	ldr	r2, [pc, #224]	@ (8006508 <DMA_CalcBaseAndBitshift+0x134>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d027      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a36      	ldr	r2, [pc, #216]	@ (800650c <DMA_CalcBaseAndBitshift+0x138>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d022      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a35      	ldr	r2, [pc, #212]	@ (8006510 <DMA_CalcBaseAndBitshift+0x13c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d01d      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a33      	ldr	r2, [pc, #204]	@ (8006514 <DMA_CalcBaseAndBitshift+0x140>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d018      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a32      	ldr	r2, [pc, #200]	@ (8006518 <DMA_CalcBaseAndBitshift+0x144>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d013      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a30      	ldr	r2, [pc, #192]	@ (800651c <DMA_CalcBaseAndBitshift+0x148>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d00e      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a2f      	ldr	r2, [pc, #188]	@ (8006520 <DMA_CalcBaseAndBitshift+0x14c>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d009      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a2d      	ldr	r2, [pc, #180]	@ (8006524 <DMA_CalcBaseAndBitshift+0x150>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d004      	beq.n	800647c <DMA_CalcBaseAndBitshift+0xa8>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a2c      	ldr	r2, [pc, #176]	@ (8006528 <DMA_CalcBaseAndBitshift+0x154>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d101      	bne.n	8006480 <DMA_CalcBaseAndBitshift+0xac>
 800647c:	2301      	movs	r3, #1
 800647e:	e000      	b.n	8006482 <DMA_CalcBaseAndBitshift+0xae>
 8006480:	2300      	movs	r3, #0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d024      	beq.n	80064d0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	b2db      	uxtb	r3, r3
 800648c:	3b10      	subs	r3, #16
 800648e:	4a27      	ldr	r2, [pc, #156]	@ (800652c <DMA_CalcBaseAndBitshift+0x158>)
 8006490:	fba2 2303 	umull	r2, r3, r2, r3
 8006494:	091b      	lsrs	r3, r3, #4
 8006496:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	4a24      	ldr	r2, [pc, #144]	@ (8006530 <DMA_CalcBaseAndBitshift+0x15c>)
 80064a0:	5cd3      	ldrb	r3, [r2, r3]
 80064a2:	461a      	mov	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	d908      	bls.n	80064c0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	461a      	mov	r2, r3
 80064b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006534 <DMA_CalcBaseAndBitshift+0x160>)
 80064b6:	4013      	ands	r3, r2
 80064b8:	1d1a      	adds	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80064be:	e00d      	b.n	80064dc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	461a      	mov	r2, r3
 80064c6:	4b1b      	ldr	r3, [pc, #108]	@ (8006534 <DMA_CalcBaseAndBitshift+0x160>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ce:	e005      	b.n	80064dc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40020010 	.word	0x40020010
 80064f0:	40020028 	.word	0x40020028
 80064f4:	40020040 	.word	0x40020040
 80064f8:	40020058 	.word	0x40020058
 80064fc:	40020070 	.word	0x40020070
 8006500:	40020088 	.word	0x40020088
 8006504:	400200a0 	.word	0x400200a0
 8006508:	400200b8 	.word	0x400200b8
 800650c:	40020410 	.word	0x40020410
 8006510:	40020428 	.word	0x40020428
 8006514:	40020440 	.word	0x40020440
 8006518:	40020458 	.word	0x40020458
 800651c:	40020470 	.word	0x40020470
 8006520:	40020488 	.word	0x40020488
 8006524:	400204a0 	.word	0x400204a0
 8006528:	400204b8 	.word	0x400204b8
 800652c:	aaaaaaab 	.word	0xaaaaaaab
 8006530:	0800e7a8 	.word	0x0800e7a8
 8006534:	fffffc00 	.word	0xfffffc00

08006538 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006540:	2300      	movs	r3, #0
 8006542:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d120      	bne.n	800658e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006550:	2b03      	cmp	r3, #3
 8006552:	d858      	bhi.n	8006606 <DMA_CheckFifoParam+0xce>
 8006554:	a201      	add	r2, pc, #4	@ (adr r2, 800655c <DMA_CheckFifoParam+0x24>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	0800656d 	.word	0x0800656d
 8006560:	0800657f 	.word	0x0800657f
 8006564:	0800656d 	.word	0x0800656d
 8006568:	08006607 	.word	0x08006607
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006574:	2b00      	cmp	r3, #0
 8006576:	d048      	beq.n	800660a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800657c:	e045      	b.n	800660a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006586:	d142      	bne.n	800660e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800658c:	e03f      	b.n	800660e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006596:	d123      	bne.n	80065e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659c:	2b03      	cmp	r3, #3
 800659e:	d838      	bhi.n	8006612 <DMA_CheckFifoParam+0xda>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <DMA_CheckFifoParam+0x70>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065b9 	.word	0x080065b9
 80065ac:	080065bf 	.word	0x080065bf
 80065b0:	080065b9 	.word	0x080065b9
 80065b4:	080065d1 	.word	0x080065d1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	73fb      	strb	r3, [r7, #15]
        break;
 80065bc:	e030      	b.n	8006620 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d025      	beq.n	8006616 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065ce:	e022      	b.n	8006616 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80065d8:	d11f      	bne.n	800661a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065de:	e01c      	b.n	800661a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d902      	bls.n	80065ee <DMA_CheckFifoParam+0xb6>
 80065e8:	2b03      	cmp	r3, #3
 80065ea:	d003      	beq.n	80065f4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80065ec:	e018      	b.n	8006620 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	73fb      	strb	r3, [r7, #15]
        break;
 80065f2:	e015      	b.n	8006620 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00e      	beq.n	800661e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]
    break;
 8006604:	e00b      	b.n	800661e <DMA_CheckFifoParam+0xe6>
        break;
 8006606:	bf00      	nop
 8006608:	e00a      	b.n	8006620 <DMA_CheckFifoParam+0xe8>
        break;
 800660a:	bf00      	nop
 800660c:	e008      	b.n	8006620 <DMA_CheckFifoParam+0xe8>
        break;
 800660e:	bf00      	nop
 8006610:	e006      	b.n	8006620 <DMA_CheckFifoParam+0xe8>
        break;
 8006612:	bf00      	nop
 8006614:	e004      	b.n	8006620 <DMA_CheckFifoParam+0xe8>
        break;
 8006616:	bf00      	nop
 8006618:	e002      	b.n	8006620 <DMA_CheckFifoParam+0xe8>
        break;
 800661a:	bf00      	nop
 800661c:	e000      	b.n	8006620 <DMA_CheckFifoParam+0xe8>
    break;
 800661e:	bf00      	nop
    }
  }

  return status;
 8006620:	7bfb      	ldrb	r3, [r7, #15]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop

08006630 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a38      	ldr	r2, [pc, #224]	@ (8006724 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d022      	beq.n	800668e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a36      	ldr	r2, [pc, #216]	@ (8006728 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d01d      	beq.n	800668e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a35      	ldr	r2, [pc, #212]	@ (800672c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d018      	beq.n	800668e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a33      	ldr	r2, [pc, #204]	@ (8006730 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d013      	beq.n	800668e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a32      	ldr	r2, [pc, #200]	@ (8006734 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d00e      	beq.n	800668e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a30      	ldr	r2, [pc, #192]	@ (8006738 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d009      	beq.n	800668e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a2f      	ldr	r2, [pc, #188]	@ (800673c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d004      	beq.n	800668e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a2d      	ldr	r2, [pc, #180]	@ (8006740 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d101      	bne.n	8006692 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01a      	beq.n	80066ce <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	3b08      	subs	r3, #8
 80066a0:	4a28      	ldr	r2, [pc, #160]	@ (8006744 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	091b      	lsrs	r3, r3, #4
 80066a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4b26      	ldr	r3, [pc, #152]	@ (8006748 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	461a      	mov	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a24      	ldr	r2, [pc, #144]	@ (800674c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80066bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f003 031f 	and.w	r3, r3, #31
 80066c4:	2201      	movs	r2, #1
 80066c6:	409a      	lsls	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80066cc:	e024      	b.n	8006718 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	3b10      	subs	r3, #16
 80066d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006750 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80066d8:	fba2 2303 	umull	r2, r3, r2, r3
 80066dc:	091b      	lsrs	r3, r3, #4
 80066de:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006754 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d806      	bhi.n	80066f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d902      	bls.n	80066f6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3308      	adds	r3, #8
 80066f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4b18      	ldr	r3, [pc, #96]	@ (800675c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	461a      	mov	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a16      	ldr	r2, [pc, #88]	@ (8006760 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006708:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f003 031f 	and.w	r3, r3, #31
 8006710:	2201      	movs	r2, #1
 8006712:	409a      	lsls	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr
 8006724:	58025408 	.word	0x58025408
 8006728:	5802541c 	.word	0x5802541c
 800672c:	58025430 	.word	0x58025430
 8006730:	58025444 	.word	0x58025444
 8006734:	58025458 	.word	0x58025458
 8006738:	5802546c 	.word	0x5802546c
 800673c:	58025480 	.word	0x58025480
 8006740:	58025494 	.word	0x58025494
 8006744:	cccccccd 	.word	0xcccccccd
 8006748:	16009600 	.word	0x16009600
 800674c:	58025880 	.word	0x58025880
 8006750:	aaaaaaab 	.word	0xaaaaaaab
 8006754:	400204b8 	.word	0x400204b8
 8006758:	4002040f 	.word	0x4002040f
 800675c:	10008200 	.word	0x10008200
 8006760:	40020880 	.word	0x40020880

08006764 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d04a      	beq.n	8006810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2b08      	cmp	r3, #8
 800677e:	d847      	bhi.n	8006810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a25      	ldr	r2, [pc, #148]	@ (800681c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d022      	beq.n	80067d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a24      	ldr	r2, [pc, #144]	@ (8006820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d01d      	beq.n	80067d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a22      	ldr	r2, [pc, #136]	@ (8006824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d018      	beq.n	80067d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a21      	ldr	r2, [pc, #132]	@ (8006828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d013      	beq.n	80067d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1f      	ldr	r2, [pc, #124]	@ (800682c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d00e      	beq.n	80067d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d009      	beq.n	80067d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d004      	beq.n	80067d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d101      	bne.n	80067d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80067d4:	2300      	movs	r3, #0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	4b17      	ldr	r3, [pc, #92]	@ (800683c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80067de:	4413      	add	r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	461a      	mov	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a15      	ldr	r2, [pc, #84]	@ (8006840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80067ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80067ee:	e009      	b.n	8006804 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80067f4:	4413      	add	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	461a      	mov	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a11      	ldr	r2, [pc, #68]	@ (8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006802:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	3b01      	subs	r3, #1
 8006808:	2201      	movs	r2, #1
 800680a:	409a      	lsls	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006810:	bf00      	nop
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	58025408 	.word	0x58025408
 8006820:	5802541c 	.word	0x5802541c
 8006824:	58025430 	.word	0x58025430
 8006828:	58025444 	.word	0x58025444
 800682c:	58025458 	.word	0x58025458
 8006830:	5802546c 	.word	0x5802546c
 8006834:	58025480 	.word	0x58025480
 8006838:	58025494 	.word	0x58025494
 800683c:	1600963f 	.word	0x1600963f
 8006840:	58025940 	.word	0x58025940
 8006844:	1000823f 	.word	0x1000823f
 8006848:	40020940 	.word	0x40020940

0800684c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800684c:	b480      	push	{r7}
 800684e:	b089      	sub	sp, #36	@ 0x24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800685a:	4b89      	ldr	r3, [pc, #548]	@ (8006a80 <HAL_GPIO_Init+0x234>)
 800685c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800685e:	e194      	b.n	8006b8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	2101      	movs	r1, #1
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	fa01 f303 	lsl.w	r3, r1, r3
 800686c:	4013      	ands	r3, r2
 800686e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	2b00      	cmp	r3, #0
 8006874:	f000 8186 	beq.w	8006b84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f003 0303 	and.w	r3, r3, #3
 8006880:	2b01      	cmp	r3, #1
 8006882:	d005      	beq.n	8006890 <HAL_GPIO_Init+0x44>
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f003 0303 	and.w	r3, r3, #3
 800688c:	2b02      	cmp	r3, #2
 800688e:	d130      	bne.n	80068f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	2203      	movs	r2, #3
 800689c:	fa02 f303 	lsl.w	r3, r2, r3
 80068a0:	43db      	mvns	r3, r3
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	4013      	ands	r3, r2
 80068a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	69ba      	ldr	r2, [r7, #24]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69ba      	ldr	r2, [r7, #24]
 80068be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068c6:	2201      	movs	r2, #1
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	fa02 f303 	lsl.w	r3, r2, r3
 80068ce:	43db      	mvns	r3, r3
 80068d0:	69ba      	ldr	r2, [r7, #24]
 80068d2:	4013      	ands	r3, r2
 80068d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	091b      	lsrs	r3, r3, #4
 80068dc:	f003 0201 	and.w	r2, r3, #1
 80068e0:	69fb      	ldr	r3, [r7, #28]
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f003 0303 	and.w	r3, r3, #3
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d017      	beq.n	800692e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68db      	ldr	r3, [r3, #12]
 8006902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	2203      	movs	r2, #3
 800690a:	fa02 f303 	lsl.w	r3, r2, r3
 800690e:	43db      	mvns	r3, r3
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	4013      	ands	r3, r2
 8006914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	fa02 f303 	lsl.w	r3, r2, r3
 8006922:	69ba      	ldr	r2, [r7, #24]
 8006924:	4313      	orrs	r3, r2
 8006926:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	f003 0303 	and.w	r3, r3, #3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d123      	bne.n	8006982 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	08da      	lsrs	r2, r3, #3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3208      	adds	r2, #8
 8006942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	f003 0307 	and.w	r3, r3, #7
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	220f      	movs	r2, #15
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	4013      	ands	r3, r2
 800695c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	691a      	ldr	r2, [r3, #16]
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	4313      	orrs	r3, r2
 8006972:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	08da      	lsrs	r2, r3, #3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3208      	adds	r2, #8
 800697c:	69b9      	ldr	r1, [r7, #24]
 800697e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	005b      	lsls	r3, r3, #1
 800698c:	2203      	movs	r2, #3
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	43db      	mvns	r3, r3
 8006994:	69ba      	ldr	r2, [r7, #24]
 8006996:	4013      	ands	r3, r2
 8006998:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f003 0203 	and.w	r2, r3, #3
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	005b      	lsls	r3, r3, #1
 80069a6:	fa02 f303 	lsl.w	r3, r2, r3
 80069aa:	69ba      	ldr	r2, [r7, #24]
 80069ac:	4313      	orrs	r3, r2
 80069ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	69ba      	ldr	r2, [r7, #24]
 80069b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 80e0 	beq.w	8006b84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069c4:	4b2f      	ldr	r3, [pc, #188]	@ (8006a84 <HAL_GPIO_Init+0x238>)
 80069c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069ca:	4a2e      	ldr	r2, [pc, #184]	@ (8006a84 <HAL_GPIO_Init+0x238>)
 80069cc:	f043 0302 	orr.w	r3, r3, #2
 80069d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80069d4:	4b2b      	ldr	r3, [pc, #172]	@ (8006a84 <HAL_GPIO_Init+0x238>)
 80069d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069e2:	4a29      	ldr	r2, [pc, #164]	@ (8006a88 <HAL_GPIO_Init+0x23c>)
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	089b      	lsrs	r3, r3, #2
 80069e8:	3302      	adds	r3, #2
 80069ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	f003 0303 	and.w	r3, r3, #3
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	220f      	movs	r2, #15
 80069fa:	fa02 f303 	lsl.w	r3, r2, r3
 80069fe:	43db      	mvns	r3, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4013      	ands	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a20      	ldr	r2, [pc, #128]	@ (8006a8c <HAL_GPIO_Init+0x240>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d052      	beq.n	8006ab4 <HAL_GPIO_Init+0x268>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a1f      	ldr	r2, [pc, #124]	@ (8006a90 <HAL_GPIO_Init+0x244>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d031      	beq.n	8006a7a <HAL_GPIO_Init+0x22e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a1e      	ldr	r2, [pc, #120]	@ (8006a94 <HAL_GPIO_Init+0x248>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d02b      	beq.n	8006a76 <HAL_GPIO_Init+0x22a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a1d      	ldr	r2, [pc, #116]	@ (8006a98 <HAL_GPIO_Init+0x24c>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d025      	beq.n	8006a72 <HAL_GPIO_Init+0x226>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4a1c      	ldr	r2, [pc, #112]	@ (8006a9c <HAL_GPIO_Init+0x250>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d01f      	beq.n	8006a6e <HAL_GPIO_Init+0x222>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	4a1b      	ldr	r2, [pc, #108]	@ (8006aa0 <HAL_GPIO_Init+0x254>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d019      	beq.n	8006a6a <HAL_GPIO_Init+0x21e>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a1a      	ldr	r2, [pc, #104]	@ (8006aa4 <HAL_GPIO_Init+0x258>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d013      	beq.n	8006a66 <HAL_GPIO_Init+0x21a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4a19      	ldr	r2, [pc, #100]	@ (8006aa8 <HAL_GPIO_Init+0x25c>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00d      	beq.n	8006a62 <HAL_GPIO_Init+0x216>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a18      	ldr	r2, [pc, #96]	@ (8006aac <HAL_GPIO_Init+0x260>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d007      	beq.n	8006a5e <HAL_GPIO_Init+0x212>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a17      	ldr	r2, [pc, #92]	@ (8006ab0 <HAL_GPIO_Init+0x264>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d101      	bne.n	8006a5a <HAL_GPIO_Init+0x20e>
 8006a56:	2309      	movs	r3, #9
 8006a58:	e02d      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a5a:	230a      	movs	r3, #10
 8006a5c:	e02b      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a5e:	2308      	movs	r3, #8
 8006a60:	e029      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a62:	2307      	movs	r3, #7
 8006a64:	e027      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a66:	2306      	movs	r3, #6
 8006a68:	e025      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a6a:	2305      	movs	r3, #5
 8006a6c:	e023      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a6e:	2304      	movs	r3, #4
 8006a70:	e021      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a72:	2303      	movs	r3, #3
 8006a74:	e01f      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a76:	2302      	movs	r3, #2
 8006a78:	e01d      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e01b      	b.n	8006ab6 <HAL_GPIO_Init+0x26a>
 8006a7e:	bf00      	nop
 8006a80:	58000080 	.word	0x58000080
 8006a84:	58024400 	.word	0x58024400
 8006a88:	58000400 	.word	0x58000400
 8006a8c:	58020000 	.word	0x58020000
 8006a90:	58020400 	.word	0x58020400
 8006a94:	58020800 	.word	0x58020800
 8006a98:	58020c00 	.word	0x58020c00
 8006a9c:	58021000 	.word	0x58021000
 8006aa0:	58021400 	.word	0x58021400
 8006aa4:	58021800 	.word	0x58021800
 8006aa8:	58021c00 	.word	0x58021c00
 8006aac:	58022000 	.word	0x58022000
 8006ab0:	58022400 	.word	0x58022400
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	f002 0203 	and.w	r2, r2, #3
 8006abc:	0092      	lsls	r2, r2, #2
 8006abe:	4093      	lsls	r3, r2
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ac6:	4938      	ldr	r1, [pc, #224]	@ (8006ba8 <HAL_GPIO_Init+0x35c>)
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	089b      	lsrs	r3, r3, #2
 8006acc:	3302      	adds	r3, #2
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	43db      	mvns	r3, r3
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006af2:	69ba      	ldr	r2, [r7, #24]
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006afa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	43db      	mvns	r3, r3
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	4013      	ands	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006b28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	69ba      	ldr	r2, [r7, #24]
 8006b58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	43db      	mvns	r3, r3
 8006b64:	69ba      	ldr	r2, [r7, #24]
 8006b66:	4013      	ands	r3, r2
 8006b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006b76:	69ba      	ldr	r2, [r7, #24]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	3301      	adds	r3, #1
 8006b88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	fa22 f303 	lsr.w	r3, r2, r3
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f47f ae63 	bne.w	8006860 <HAL_GPIO_Init+0x14>
  }
}
 8006b9a:	bf00      	nop
 8006b9c:	bf00      	nop
 8006b9e:	3724      	adds	r7, #36	@ 0x24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	58000400 	.word	0x58000400

08006bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	807b      	strh	r3, [r7, #2]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006bbc:	787b      	ldrb	r3, [r7, #1]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bc2:	887a      	ldrh	r2, [r7, #2]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006bc8:	e003      	b.n	8006bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006bca:	887b      	ldrh	r3, [r7, #2]
 8006bcc:	041a      	lsls	r2, r3, #16
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	619a      	str	r2, [r3, #24]
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	4603      	mov	r3, r0
 8006be6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006be8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006bf0:	88fb      	ldrh	r3, [r7, #6]
 8006bf2:	4013      	ands	r3, r2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006bf8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bfc:	88fb      	ldrh	r3, [r7, #6]
 8006bfe:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c02:	88fb      	ldrh	r3, [r7, #6]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fa fd49 	bl	800169c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d101      	bne.n	8006c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e08b      	b.n	8006d3e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fb fd1a 	bl	8002674 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2224      	movs	r2, #36	@ 0x24
 8006c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006c64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006c74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d107      	bne.n	8006c8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689a      	ldr	r2, [r3, #8]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	e006      	b.n	8006c9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689a      	ldr	r2, [r3, #8]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006c9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d108      	bne.n	8006cb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cb2:	605a      	str	r2, [r3, #4]
 8006cb4:	e007      	b.n	8006cc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685a      	ldr	r2, [r3, #4]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6859      	ldr	r1, [r3, #4]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006d48 <HAL_I2C_Init+0x134>)
 8006cd2:	430b      	orrs	r3, r1
 8006cd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ce4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	69d9      	ldr	r1, [r3, #28]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6a1a      	ldr	r2, [r3, #32]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2220      	movs	r2, #32
 8006d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	02008000 	.word	0x02008000

08006d4c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	461a      	mov	r2, r3
 8006d58:	460b      	mov	r3, r1
 8006d5a:	817b      	strh	r3, [r7, #10]
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	f040 80fd 	bne.w	8006f68 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d101      	bne.n	8006d7c <HAL_I2C_Master_Transmit+0x30>
 8006d78:	2302      	movs	r3, #2
 8006d7a:	e0f6      	b.n	8006f6a <HAL_I2C_Master_Transmit+0x21e>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006d84:	f7fc f814 	bl	8002db0 <HAL_GetTick>
 8006d88:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	2319      	movs	r3, #25
 8006d90:	2201      	movs	r2, #1
 8006d92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 fb82 	bl	80074a0 <I2C_WaitOnFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e0e1      	b.n	8006f6a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2221      	movs	r2, #33	@ 0x21
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2210      	movs	r2, #16
 8006db2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	893a      	ldrh	r2, [r7, #8]
 8006dc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	2bff      	cmp	r3, #255	@ 0xff
 8006dd6:	d906      	bls.n	8006de6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	22ff      	movs	r2, #255	@ 0xff
 8006ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006dde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006de2:	617b      	str	r3, [r7, #20]
 8006de4:	e007      	b.n	8006df6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006df0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006df4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d024      	beq.n	8006e48 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	781a      	ldrb	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	b29a      	uxth	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e26:	3b01      	subs	r3, #1
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	3301      	adds	r3, #1
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	8979      	ldrh	r1, [r7, #10]
 8006e3a:	4b4e      	ldr	r3, [pc, #312]	@ (8006f74 <HAL_I2C_Master_Transmit+0x228>)
 8006e3c:	9300      	str	r3, [sp, #0]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f000 fcf1 	bl	8007828 <I2C_TransferConfig>
 8006e46:	e066      	b.n	8006f16 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	8979      	ldrh	r1, [r7, #10]
 8006e50:	4b48      	ldr	r3, [pc, #288]	@ (8006f74 <HAL_I2C_Master_Transmit+0x228>)
 8006e52:	9300      	str	r3, [sp, #0]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 fce6 	bl	8007828 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006e5c:	e05b      	b.n	8006f16 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	6a39      	ldr	r1, [r7, #32]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fb75 	bl	8007552 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d001      	beq.n	8006e72 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e07b      	b.n	8006f6a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e76:	781a      	ldrb	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d034      	beq.n	8006f16 <HAL_I2C_Master_Transmit+0x1ca>
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d130      	bne.n	8006f16 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2180      	movs	r1, #128	@ 0x80
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f000 faee 	bl	80074a0 <I2C_WaitOnFlagUntilTimeout>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d001      	beq.n	8006ece <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e04d      	b.n	8006f6a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2bff      	cmp	r3, #255	@ 0xff
 8006ed6:	d90e      	bls.n	8006ef6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	22ff      	movs	r2, #255	@ 0xff
 8006edc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	8979      	ldrh	r1, [r7, #10]
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fc9a 	bl	8007828 <I2C_TransferConfig>
 8006ef4:	e00f      	b.n	8006f16 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	8979      	ldrh	r1, [r7, #10]
 8006f08:	2300      	movs	r3, #0
 8006f0a:	9300      	str	r3, [sp, #0]
 8006f0c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f000 fc89 	bl	8007828 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d19e      	bne.n	8006e5e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f20:	693a      	ldr	r2, [r7, #16]
 8006f22:	6a39      	ldr	r1, [r7, #32]
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 fb5b 	bl	80075e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e01a      	b.n	8006f6a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2220      	movs	r2, #32
 8006f3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6859      	ldr	r1, [r3, #4]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b0c      	ldr	r3, [pc, #48]	@ (8006f78 <HAL_I2C_Master_Transmit+0x22c>)
 8006f48:	400b      	ands	r3, r1
 8006f4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2220      	movs	r2, #32
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006f64:	2300      	movs	r3, #0
 8006f66:	e000      	b.n	8006f6a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8006f68:	2302      	movs	r3, #2
  }
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	80002000 	.word	0x80002000
 8006f78:	fe00e800 	.word	0xfe00e800

08006f7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	817b      	strh	r3, [r7, #10]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	813b      	strh	r3, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	f040 80f9 	bne.w	8007196 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <HAL_I2C_Mem_Write+0x34>
 8006faa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d105      	bne.n	8006fbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fb6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0ed      	b.n	8007198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_I2C_Mem_Write+0x4e>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e0e6      	b.n	8007198 <HAL_I2C_Mem_Write+0x21c>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fd2:	f7fb feed 	bl	8002db0 <HAL_GetTick>
 8006fd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	2319      	movs	r3, #25
 8006fde:	2201      	movs	r2, #1
 8006fe0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 fa5b 	bl	80074a0 <I2C_WaitOnFlagUntilTimeout>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d001      	beq.n	8006ff4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e0d1      	b.n	8007198 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2221      	movs	r2, #33	@ 0x21
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2240      	movs	r2, #64	@ 0x40
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a3a      	ldr	r2, [r7, #32]
 800700e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007014:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800701c:	88f8      	ldrh	r0, [r7, #6]
 800701e:	893a      	ldrh	r2, [r7, #8]
 8007020:	8979      	ldrh	r1, [r7, #10]
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	9301      	str	r3, [sp, #4]
 8007026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4603      	mov	r3, r0
 800702c:	68f8      	ldr	r0, [r7, #12]
 800702e:	f000 f9bf 	bl	80073b0 <I2C_RequestMemoryWrite>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e0a9      	b.n	8007198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007048:	b29b      	uxth	r3, r3
 800704a:	2bff      	cmp	r3, #255	@ 0xff
 800704c:	d90e      	bls.n	800706c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	22ff      	movs	r2, #255	@ 0xff
 8007052:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007058:	b2da      	uxtb	r2, r3
 800705a:	8979      	ldrh	r1, [r7, #10]
 800705c:	2300      	movs	r3, #0
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 fbdf 	bl	8007828 <I2C_TransferConfig>
 800706a:	e00f      	b.n	800708c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800707a:	b2da      	uxtb	r2, r3
 800707c:	8979      	ldrh	r1, [r7, #10]
 800707e:	2300      	movs	r3, #0
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007086:	68f8      	ldr	r0, [r7, #12]
 8007088:	f000 fbce 	bl	8007828 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800708c:	697a      	ldr	r2, [r7, #20]
 800708e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007090:	68f8      	ldr	r0, [r7, #12]
 8007092:	f000 fa5e 	bl	8007552 <I2C_WaitOnTXISFlagUntilTimeout>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d001      	beq.n	80070a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e07b      	b.n	8007198 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a4:	781a      	ldrb	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	1c5a      	adds	r2, r3, #1
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b01      	subs	r3, #1
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29a      	uxth	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d034      	beq.n	8007144 <HAL_I2C_Mem_Write+0x1c8>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d130      	bne.n	8007144 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	2200      	movs	r2, #0
 80070ea:	2180      	movs	r1, #128	@ 0x80
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 f9d7 	bl	80074a0 <I2C_WaitOnFlagUntilTimeout>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d001      	beq.n	80070fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	e04d      	b.n	8007198 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007100:	b29b      	uxth	r3, r3
 8007102:	2bff      	cmp	r3, #255	@ 0xff
 8007104:	d90e      	bls.n	8007124 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	22ff      	movs	r2, #255	@ 0xff
 800710a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007110:	b2da      	uxtb	r2, r3
 8007112:	8979      	ldrh	r1, [r7, #10]
 8007114:	2300      	movs	r3, #0
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 fb83 	bl	8007828 <I2C_TransferConfig>
 8007122:	e00f      	b.n	8007144 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007132:	b2da      	uxtb	r2, r3
 8007134:	8979      	ldrh	r1, [r7, #10]
 8007136:	2300      	movs	r3, #0
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fb72 	bl	8007828 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007148:	b29b      	uxth	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d19e      	bne.n	800708c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f000 fa44 	bl	80075e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d001      	beq.n	8007162 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800715e:	2301      	movs	r3, #1
 8007160:	e01a      	b.n	8007198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	2220      	movs	r2, #32
 8007168:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6859      	ldr	r1, [r3, #4]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	4b0a      	ldr	r3, [pc, #40]	@ (80071a0 <HAL_I2C_Mem_Write+0x224>)
 8007176:	400b      	ands	r3, r1
 8007178:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2220      	movs	r2, #32
 800717e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e000      	b.n	8007198 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007196:	2302      	movs	r3, #2
  }
}
 8007198:	4618      	mov	r0, r3
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	fe00e800 	.word	0xfe00e800

080071a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08a      	sub	sp, #40	@ 0x28
 80071a8:	af02      	add	r7, sp, #8
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	607a      	str	r2, [r7, #4]
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	460b      	mov	r3, r1
 80071b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]

  HAL_StatusTypeDef status = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	77fb      	strb	r3, [r7, #31]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b20      	cmp	r3, #32
 80071c6:	f040 80e9 	bne.w	800739c <HAL_I2C_IsDeviceReady+0x1f8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071d8:	d101      	bne.n	80071de <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80071da:	2302      	movs	r3, #2
 80071dc:	e0df      	b.n	800739e <HAL_I2C_IsDeviceReady+0x1fa>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d101      	bne.n	80071ec <HAL_I2C_IsDeviceReady+0x48>
 80071e8:	2302      	movs	r3, #2
 80071ea:	e0d8      	b.n	800739e <HAL_I2C_IsDeviceReady+0x1fa>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2224      	movs	r2, #36	@ 0x24
 80071f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d105      	bne.n	8007216 <HAL_I2C_IsDeviceReady+0x72>
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007210:	4b65      	ldr	r3, [pc, #404]	@ (80073a8 <HAL_I2C_IsDeviceReady+0x204>)
 8007212:	4313      	orrs	r3, r2
 8007214:	e004      	b.n	8007220 <HAL_I2C_IsDeviceReady+0x7c>
 8007216:	897b      	ldrh	r3, [r7, #10]
 8007218:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800721c:	4b63      	ldr	r3, [pc, #396]	@ (80073ac <HAL_I2C_IsDeviceReady+0x208>)
 800721e:	4313      	orrs	r3, r2
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	6812      	ldr	r2, [r2, #0]
 8007224:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8007226:	f7fb fdc3 	bl	8002db0 <HAL_GetTick>
 800722a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f003 0320 	and.w	r3, r3, #32
 8007236:	2b20      	cmp	r3, #32
 8007238:	bf0c      	ite	eq
 800723a:	2301      	moveq	r3, #1
 800723c:	2300      	movne	r3, #0
 800723e:	b2db      	uxtb	r3, r3
 8007240:	77bb      	strb	r3, [r7, #30]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f003 0310 	and.w	r3, r3, #16
 800724c:	2b10      	cmp	r3, #16
 800724e:	bf0c      	ite	eq
 8007250:	2301      	moveq	r3, #1
 8007252:	2300      	movne	r3, #0
 8007254:	b2db      	uxtb	r3, r3
 8007256:	777b      	strb	r3, [r7, #29]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8007258:	e034      	b.n	80072c4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d01a      	beq.n	8007298 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007262:	f7fb fda5 	bl	8002db0 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	683a      	ldr	r2, [r7, #0]
 800726e:	429a      	cmp	r2, r3
 8007270:	d302      	bcc.n	8007278 <HAL_I2C_IsDeviceReady+0xd4>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d10f      	bne.n	8007298 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007284:	f043 0220 	orr.w	r2, r3, #32
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e082      	b.n	800739e <HAL_I2C_IsDeviceReady+0x1fa>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b20      	cmp	r3, #32
 80072a4:	bf0c      	ite	eq
 80072a6:	2301      	moveq	r3, #1
 80072a8:	2300      	movne	r3, #0
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	77bb      	strb	r3, [r7, #30]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	f003 0310 	and.w	r3, r3, #16
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	777b      	strb	r3, [r7, #29]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80072c4:	7fbb      	ldrb	r3, [r7, #30]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d102      	bne.n	80072d0 <HAL_I2C_IsDeviceReady+0x12c>
 80072ca:	7f7b      	ldrb	r3, [r7, #29]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0c4      	beq.n	800725a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b10      	cmp	r3, #16
 80072dc:	d027      	beq.n	800732e <HAL_I2C_IsDeviceReady+0x18a>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2200      	movs	r2, #0
 80072e6:	2120      	movs	r1, #32
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 f8d9 	bl	80074a0 <I2C_WaitOnFlagUntilTimeout>
 80072ee:	4603      	mov	r3, r0
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00e      	beq.n	8007312 <HAL_I2C_IsDeviceReady+0x16e>
        {
          /* A non acknowledge appear during STOP Flag waiting process, a new trial must be performed */
          if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	d107      	bne.n	800730c <HAL_I2C_IsDeviceReady+0x168>
          {
            /* Clear STOP Flag */
            __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2220      	movs	r2, #32
 8007302:	61da      	str	r2, [r3, #28]

            /* Reset the error code for next trial */
            hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	645a      	str	r2, [r3, #68]	@ 0x44
 800730a:	e026      	b.n	800735a <HAL_I2C_IsDeviceReady+0x1b6>
          }
          else
          {
            status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	77fb      	strb	r3, [r7, #31]
 8007310:	e023      	b.n	800735a <HAL_I2C_IsDeviceReady+0x1b6>
        else
        {
          /* A acknowledge appear during STOP Flag waiting process, this mean that device respond to its address */

          /* Clear STOP Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	2220      	movs	r2, #32
 8007318:	61da      	str	r2, [r3, #28]

          /* Device is ready */
          hi2c->State = HAL_I2C_STATE_READY;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2220      	movs	r2, #32
 800731e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	e037      	b.n	800739e <HAL_I2C_IsDeviceReady+0x1fa>
      {
        /* A non acknowledge is detected, this mean that device not respond to its address,
           a new trial must be performed */

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2210      	movs	r2, #16
 8007334:	61da      	str	r2, [r3, #28]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	2200      	movs	r2, #0
 800733e:	2120      	movs	r1, #32
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f8ad 	bl	80074a0 <I2C_WaitOnFlagUntilTimeout>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_I2C_IsDeviceReady+0x1ae>
        {
          status = HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	77fb      	strb	r3, [r7, #31]
 8007350:	e003      	b.n	800735a <HAL_I2C_IsDeviceReady+0x1b6>
        }
        else
        {
          /* Clear STOP Flag, auto generated with autoend*/
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2220      	movs	r2, #32
 8007358:	61da      	str	r2, [r3, #28]
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	3301      	adds	r3, #1
 800735e:	617b      	str	r3, [r7, #20]

      if ((I2C_Trials < Trials) && (status == HAL_ERROR))
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	429a      	cmp	r2, r3
 8007366:	d904      	bls.n	8007372 <HAL_I2C_IsDeviceReady+0x1ce>
 8007368:	7ffb      	ldrb	r3, [r7, #31]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d101      	bne.n	8007372 <HAL_I2C_IsDeviceReady+0x1ce>
      {
        status = HAL_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	77fb      	strb	r3, [r7, #31]
      }

    } while (I2C_Trials < Trials);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	429a      	cmp	r2, r3
 8007378:	f63f af43 	bhi.w	8007202 <HAL_I2C_IsDeviceReady+0x5e>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007388:	f043 0220 	orr.w	r2, r3, #32
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <HAL_I2C_IsDeviceReady+0x1fa>
  }
  else
  {
    return HAL_BUSY;
 800739c:	2302      	movs	r3, #2
  }
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3720      	adds	r7, #32
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	02002000 	.word	0x02002000
 80073ac:	02002800 	.word	0x02002800

080073b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af02      	add	r7, sp, #8
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	4608      	mov	r0, r1
 80073ba:	4611      	mov	r1, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	4603      	mov	r3, r0
 80073c0:	817b      	strh	r3, [r7, #10]
 80073c2:	460b      	mov	r3, r1
 80073c4:	813b      	strh	r3, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80073ca:	88fb      	ldrh	r3, [r7, #6]
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	8979      	ldrh	r1, [r7, #10]
 80073d0:	4b20      	ldr	r3, [pc, #128]	@ (8007454 <I2C_RequestMemoryWrite+0xa4>)
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fa25 	bl	8007828 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	69b9      	ldr	r1, [r7, #24]
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 f8b5 	bl	8007552 <I2C_WaitOnTXISFlagUntilTimeout>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d001      	beq.n	80073f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e02c      	b.n	800744c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80073f2:	88fb      	ldrh	r3, [r7, #6]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d105      	bne.n	8007404 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073f8:	893b      	ldrh	r3, [r7, #8]
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	629a      	str	r2, [r3, #40]	@ 0x28
 8007402:	e015      	b.n	8007430 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007404:	893b      	ldrh	r3, [r7, #8]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b29b      	uxth	r3, r3
 800740a:	b2da      	uxtb	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	69b9      	ldr	r1, [r7, #24]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	f000 f89b 	bl	8007552 <I2C_WaitOnTXISFlagUntilTimeout>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e012      	b.n	800744c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007426:	893b      	ldrh	r3, [r7, #8]
 8007428:	b2da      	uxtb	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	69bb      	ldr	r3, [r7, #24]
 8007436:	2200      	movs	r2, #0
 8007438:	2180      	movs	r1, #128	@ 0x80
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 f830 	bl	80074a0 <I2C_WaitOnFlagUntilTimeout>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	80002000 	.word	0x80002000

08007458 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f003 0302 	and.w	r3, r3, #2
 800746a:	2b02      	cmp	r3, #2
 800746c:	d103      	bne.n	8007476 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	699b      	ldr	r3, [r3, #24]
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b01      	cmp	r3, #1
 8007482:	d007      	beq.n	8007494 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	699a      	ldr	r2, [r3, #24]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 0201 	orr.w	r2, r2, #1
 8007492:	619a      	str	r2, [r3, #24]
  }
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	60b9      	str	r1, [r7, #8]
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	4613      	mov	r3, r2
 80074ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074b0:	e03b      	b.n	800752a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 f8d6 	bl	8007668 <I2C_IsErrorOccurred>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e041      	b.n	800754a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074cc:	d02d      	beq.n	800752a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ce:	f7fb fc6f 	bl	8002db0 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d302      	bcc.n	80074e4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d122      	bne.n	800752a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	699a      	ldr	r2, [r3, #24]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	4013      	ands	r3, r2
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	bf0c      	ite	eq
 80074f4:	2301      	moveq	r3, #1
 80074f6:	2300      	movne	r3, #0
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	461a      	mov	r2, r3
 80074fc:	79fb      	ldrb	r3, [r7, #7]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d113      	bne.n	800752a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007506:	f043 0220 	orr.w	r2, r3, #32
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2220      	movs	r2, #32
 8007512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e00f      	b.n	800754a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699a      	ldr	r2, [r3, #24]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4013      	ands	r3, r2
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	429a      	cmp	r2, r3
 8007538:	bf0c      	ite	eq
 800753a:	2301      	moveq	r3, #1
 800753c:	2300      	movne	r3, #0
 800753e:	b2db      	uxtb	r3, r3
 8007540:	461a      	mov	r2, r3
 8007542:	79fb      	ldrb	r3, [r7, #7]
 8007544:	429a      	cmp	r2, r3
 8007546:	d0b4      	beq.n	80074b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800755e:	e033      	b.n	80075c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	68b9      	ldr	r1, [r7, #8]
 8007564:	68f8      	ldr	r0, [r7, #12]
 8007566:	f000 f87f 	bl	8007668 <I2C_IsErrorOccurred>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	e031      	b.n	80075d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d025      	beq.n	80075c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800757c:	f7fb fc18 	bl	8002db0 <HAL_GetTick>
 8007580:	4602      	mov	r2, r0
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	429a      	cmp	r2, r3
 800758a:	d302      	bcc.n	8007592 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d11a      	bne.n	80075c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b02      	cmp	r3, #2
 800759e:	d013      	beq.n	80075c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075a4:	f043 0220 	orr.w	r2, r3, #32
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	2220      	movs	r2, #32
 80075b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e007      	b.n	80075d8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d1c4      	bne.n	8007560 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075ec:	e02f      	b.n	800764e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f000 f838 	bl	8007668 <I2C_IsErrorOccurred>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d001      	beq.n	8007602 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e02d      	b.n	800765e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007602:	f7fb fbd5 	bl	8002db0 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	429a      	cmp	r2, r3
 8007610:	d302      	bcc.n	8007618 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d11a      	bne.n	800764e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	f003 0320 	and.w	r3, r3, #32
 8007622:	2b20      	cmp	r3, #32
 8007624:	d013      	beq.n	800764e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762a:	f043 0220 	orr.w	r2, r3, #32
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e007      	b.n	800765e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	699b      	ldr	r3, [r3, #24]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b20      	cmp	r3, #32
 800765a:	d1c8      	bne.n	80075ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3710      	adds	r7, #16
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
	...

08007668 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	@ 0x28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007682:	2300      	movs	r3, #0
 8007684:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	f003 0310 	and.w	r3, r3, #16
 8007690:	2b00      	cmp	r3, #0
 8007692:	d068      	beq.n	8007766 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2210      	movs	r2, #16
 800769a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800769c:	e049      	b.n	8007732 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a4:	d045      	beq.n	8007732 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80076a6:	f7fb fb83 	bl	8002db0 <HAL_GetTick>
 80076aa:	4602      	mov	r2, r0
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	1ad3      	subs	r3, r2, r3
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d302      	bcc.n	80076bc <I2C_IsErrorOccurred+0x54>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d13a      	bne.n	8007732 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076de:	d121      	bne.n	8007724 <I2C_IsErrorOccurred+0xbc>
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80076e6:	d01d      	beq.n	8007724 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80076e8:	7cfb      	ldrb	r3, [r7, #19]
 80076ea:	2b20      	cmp	r3, #32
 80076ec:	d01a      	beq.n	8007724 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80076fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80076fe:	f7fb fb57 	bl	8002db0 <HAL_GetTick>
 8007702:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007704:	e00e      	b.n	8007724 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007706:	f7fb fb53 	bl	8002db0 <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	2b19      	cmp	r3, #25
 8007712:	d907      	bls.n	8007724 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007714:	6a3b      	ldr	r3, [r7, #32]
 8007716:	f043 0320 	orr.w	r3, r3, #32
 800771a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8007722:	e006      	b.n	8007732 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b20      	cmp	r3, #32
 8007730:	d1e9      	bne.n	8007706 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b20      	cmp	r3, #32
 800773e:	d003      	beq.n	8007748 <I2C_IsErrorOccurred+0xe0>
 8007740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007744:	2b00      	cmp	r3, #0
 8007746:	d0aa      	beq.n	800769e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007748:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800774c:	2b00      	cmp	r3, #0
 800774e:	d103      	bne.n	8007758 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2220      	movs	r2, #32
 8007756:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	f043 0304 	orr.w	r3, r3, #4
 800775e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007760:	2301      	movs	r3, #1
 8007762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00b      	beq.n	8007790 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f043 0301 	orr.w	r3, r3, #1
 800777e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007790:	69bb      	ldr	r3, [r7, #24]
 8007792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00b      	beq.n	80077b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	f043 0308 	orr.w	r3, r3, #8
 80077a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80077aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	f043 0302 	orr.w	r3, r3, #2
 80077c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80077d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01c      	beq.n	8007816 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f7ff fe3b 	bl	8007458 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6859      	ldr	r1, [r3, #4]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007824 <I2C_IsErrorOccurred+0x1bc>)
 80077ee:	400b      	ands	r3, r1
 80077f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2220      	movs	r2, #32
 8007802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007816:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800781a:	4618      	mov	r0, r3
 800781c:	3728      	adds	r7, #40	@ 0x28
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	fe00e800 	.word	0xfe00e800

08007828 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007828:	b480      	push	{r7}
 800782a:	b087      	sub	sp, #28
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	607b      	str	r3, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	817b      	strh	r3, [r7, #10]
 8007836:	4613      	mov	r3, r2
 8007838:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800783a:	897b      	ldrh	r3, [r7, #10]
 800783c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007840:	7a7b      	ldrb	r3, [r7, #9]
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007848:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	4313      	orrs	r3, r2
 8007852:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007856:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	685a      	ldr	r2, [r3, #4]
 800785e:	6a3b      	ldr	r3, [r7, #32]
 8007860:	0d5b      	lsrs	r3, r3, #21
 8007862:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007866:	4b08      	ldr	r3, [pc, #32]	@ (8007888 <I2C_TransferConfig+0x60>)
 8007868:	430b      	orrs	r3, r1
 800786a:	43db      	mvns	r3, r3
 800786c:	ea02 0103 	and.w	r1, r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	430a      	orrs	r2, r1
 8007878:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800787a:	bf00      	nop
 800787c:	371c      	adds	r7, #28
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	03ff63ff 	.word	0x03ff63ff

0800788c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b20      	cmp	r3, #32
 80078a0:	d138      	bne.n	8007914 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e032      	b.n	8007916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2224      	movs	r2, #36	@ 0x24
 80078bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f022 0201 	bic.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6819      	ldr	r1, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	430a      	orrs	r2, r1
 80078ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	e000      	b.n	8007916 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007914:	2302      	movs	r3, #2
  }
}
 8007916:	4618      	mov	r0, r3
 8007918:	370c      	adds	r7, #12
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr

08007922 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007922:	b480      	push	{r7}
 8007924:	b085      	sub	sp, #20
 8007926:	af00      	add	r7, sp, #0
 8007928:	6078      	str	r0, [r7, #4]
 800792a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007932:	b2db      	uxtb	r3, r3
 8007934:	2b20      	cmp	r3, #32
 8007936:	d139      	bne.n	80079ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007942:	2302      	movs	r3, #2
 8007944:	e033      	b.n	80079ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2224      	movs	r2, #36	@ 0x24
 8007952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0201 	bic.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007974:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0201 	orr.w	r2, r2, #1
 8007996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	e000      	b.n	80079ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80079ac:	2302      	movs	r3, #2
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3714      	adds	r7, #20
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr
	...

080079bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80079c4:	4b19      	ldr	r3, [pc, #100]	@ (8007a2c <HAL_PWREx_ConfigSupply+0x70>)
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	f003 0304 	and.w	r3, r3, #4
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d00a      	beq.n	80079e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80079d0:	4b16      	ldr	r3, [pc, #88]	@ (8007a2c <HAL_PWREx_ConfigSupply+0x70>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f003 0307 	and.w	r3, r3, #7
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d001      	beq.n	80079e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e01f      	b.n	8007a22 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	e01d      	b.n	8007a22 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079e6:	4b11      	ldr	r3, [pc, #68]	@ (8007a2c <HAL_PWREx_ConfigSupply+0x70>)
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f023 0207 	bic.w	r2, r3, #7
 80079ee:	490f      	ldr	r1, [pc, #60]	@ (8007a2c <HAL_PWREx_ConfigSupply+0x70>)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079f6:	f7fb f9db 	bl	8002db0 <HAL_GetTick>
 80079fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079fc:	e009      	b.n	8007a12 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079fe:	f7fb f9d7 	bl	8002db0 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a0c:	d901      	bls.n	8007a12 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e007      	b.n	8007a22 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a12:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <HAL_PWREx_ConfigSupply+0x70>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a1e:	d1ee      	bne.n	80079fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	58024800 	.word	0x58024800

08007a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08c      	sub	sp, #48	@ 0x30
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d102      	bne.n	8007a44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f000 bc48 	b.w	80082d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f000 8088 	beq.w	8007b62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a52:	4b99      	ldr	r3, [pc, #612]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a5c:	4b96      	ldr	r3, [pc, #600]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a60:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a64:	2b10      	cmp	r3, #16
 8007a66:	d007      	beq.n	8007a78 <HAL_RCC_OscConfig+0x48>
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	2b18      	cmp	r3, #24
 8007a6c:	d111      	bne.n	8007a92 <HAL_RCC_OscConfig+0x62>
 8007a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a70:	f003 0303 	and.w	r3, r3, #3
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d10c      	bne.n	8007a92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a78:	4b8f      	ldr	r3, [pc, #572]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d06d      	beq.n	8007b60 <HAL_RCC_OscConfig+0x130>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d169      	bne.n	8007b60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	f000 bc21 	b.w	80082d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a9a:	d106      	bne.n	8007aaa <HAL_RCC_OscConfig+0x7a>
 8007a9c:	4b86      	ldr	r3, [pc, #536]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a85      	ldr	r2, [pc, #532]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007aa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	e02e      	b.n	8007b08 <HAL_RCC_OscConfig+0xd8>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10c      	bne.n	8007acc <HAL_RCC_OscConfig+0x9c>
 8007ab2:	4b81      	ldr	r3, [pc, #516]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a80      	ldr	r2, [pc, #512]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	4b7e      	ldr	r3, [pc, #504]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a7d      	ldr	r2, [pc, #500]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007ac4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e01d      	b.n	8007b08 <HAL_RCC_OscConfig+0xd8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ad4:	d10c      	bne.n	8007af0 <HAL_RCC_OscConfig+0xc0>
 8007ad6:	4b78      	ldr	r3, [pc, #480]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a77      	ldr	r2, [pc, #476]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007adc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	4b75      	ldr	r3, [pc, #468]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a74      	ldr	r2, [pc, #464]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	e00b      	b.n	8007b08 <HAL_RCC_OscConfig+0xd8>
 8007af0:	4b71      	ldr	r3, [pc, #452]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a70      	ldr	r2, [pc, #448]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4b6e      	ldr	r3, [pc, #440]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a6d      	ldr	r2, [pc, #436]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007b02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d013      	beq.n	8007b38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b10:	f7fb f94e 	bl	8002db0 <HAL_GetTick>
 8007b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b16:	e008      	b.n	8007b2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b18:	f7fb f94a 	bl	8002db0 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b64      	cmp	r3, #100	@ 0x64
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e3d4      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b2a:	4b63      	ldr	r3, [pc, #396]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0f0      	beq.n	8007b18 <HAL_RCC_OscConfig+0xe8>
 8007b36:	e014      	b.n	8007b62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b38:	f7fb f93a 	bl	8002db0 <HAL_GetTick>
 8007b3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b40:	f7fb f936 	bl	8002db0 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b64      	cmp	r3, #100	@ 0x64
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e3c0      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b52:	4b59      	ldr	r3, [pc, #356]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f0      	bne.n	8007b40 <HAL_RCC_OscConfig+0x110>
 8007b5e:	e000      	b.n	8007b62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 80ca 	beq.w	8007d04 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b70:	4b51      	ldr	r3, [pc, #324]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007b72:	691b      	ldr	r3, [r3, #16]
 8007b74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b78:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b7a:	4b4f      	ldr	r3, [pc, #316]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d007      	beq.n	8007b96 <HAL_RCC_OscConfig+0x166>
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	2b18      	cmp	r3, #24
 8007b8a:	d156      	bne.n	8007c3a <HAL_RCC_OscConfig+0x20a>
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d151      	bne.n	8007c3a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b96:	4b48      	ldr	r3, [pc, #288]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0304 	and.w	r3, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d005      	beq.n	8007bae <HAL_RCC_OscConfig+0x17e>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	68db      	ldr	r3, [r3, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d101      	bne.n	8007bae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e392      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007bae:	4b42      	ldr	r3, [pc, #264]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f023 0219 	bic.w	r2, r3, #25
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	493f      	ldr	r1, [pc, #252]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc0:	f7fb f8f6 	bl	8002db0 <HAL_GetTick>
 8007bc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bc6:	e008      	b.n	8007bda <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bc8:	f7fb f8f2 	bl	8002db0 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d901      	bls.n	8007bda <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007bd6:	2303      	movs	r3, #3
 8007bd8:	e37c      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bda:	4b37      	ldr	r3, [pc, #220]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d0f0      	beq.n	8007bc8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007be6:	f7fb f913 	bl	8002e10 <HAL_GetREVID>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d817      	bhi.n	8007c24 <HAL_RCC_OscConfig+0x1f4>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	691b      	ldr	r3, [r3, #16]
 8007bf8:	2b40      	cmp	r3, #64	@ 0x40
 8007bfa:	d108      	bne.n	8007c0e <HAL_RCC_OscConfig+0x1de>
 8007bfc:	4b2e      	ldr	r3, [pc, #184]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007c04:	4a2c      	ldr	r2, [pc, #176]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c0a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c0c:	e07a      	b.n	8007d04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	691b      	ldr	r3, [r3, #16]
 8007c1a:	031b      	lsls	r3, r3, #12
 8007c1c:	4926      	ldr	r1, [pc, #152]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c22:	e06f      	b.n	8007d04 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c24:	4b24      	ldr	r3, [pc, #144]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	061b      	lsls	r3, r3, #24
 8007c32:	4921      	ldr	r1, [pc, #132]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c38:	e064      	b.n	8007d04 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d047      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c42:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f023 0219 	bic.w	r2, r3, #25
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	491a      	ldr	r1, [pc, #104]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c50:	4313      	orrs	r3, r2
 8007c52:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c54:	f7fb f8ac 	bl	8002db0 <HAL_GetTick>
 8007c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c5a:	e008      	b.n	8007c6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c5c:	f7fb f8a8 	bl	8002db0 <HAL_GetTick>
 8007c60:	4602      	mov	r2, r0
 8007c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c64:	1ad3      	subs	r3, r2, r3
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d901      	bls.n	8007c6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	e332      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c6e:	4b12      	ldr	r3, [pc, #72]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0f0      	beq.n	8007c5c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c7a:	f7fb f8c9 	bl	8002e10 <HAL_GetREVID>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d819      	bhi.n	8007cbc <HAL_RCC_OscConfig+0x28c>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	691b      	ldr	r3, [r3, #16]
 8007c8c:	2b40      	cmp	r3, #64	@ 0x40
 8007c8e:	d108      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x272>
 8007c90:	4b09      	ldr	r3, [pc, #36]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007c98:	4a07      	ldr	r2, [pc, #28]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007c9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c9e:	6053      	str	r3, [r2, #4]
 8007ca0:	e030      	b.n	8007d04 <HAL_RCC_OscConfig+0x2d4>
 8007ca2:	4b05      	ldr	r3, [pc, #20]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	031b      	lsls	r3, r3, #12
 8007cb0:	4901      	ldr	r1, [pc, #4]	@ (8007cb8 <HAL_RCC_OscConfig+0x288>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	604b      	str	r3, [r1, #4]
 8007cb6:	e025      	b.n	8007d04 <HAL_RCC_OscConfig+0x2d4>
 8007cb8:	58024400 	.word	0x58024400
 8007cbc:	4b9a      	ldr	r3, [pc, #616]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	061b      	lsls	r3, r3, #24
 8007cca:	4997      	ldr	r1, [pc, #604]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	604b      	str	r3, [r1, #4]
 8007cd0:	e018      	b.n	8007d04 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cd2:	4b95      	ldr	r3, [pc, #596]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a94      	ldr	r2, [pc, #592]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cde:	f7fb f867 	bl	8002db0 <HAL_GetTick>
 8007ce2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ce6:	f7fb f863 	bl	8002db0 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e2ed      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007cf8:	4b8b      	ldr	r3, [pc, #556]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1f0      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80a9 	beq.w	8007e64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d12:	4b85      	ldr	r3, [pc, #532]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d1a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d1c:	4b82      	ldr	r3, [pc, #520]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d20:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d22:	69bb      	ldr	r3, [r7, #24]
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d007      	beq.n	8007d38 <HAL_RCC_OscConfig+0x308>
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	2b18      	cmp	r3, #24
 8007d2c:	d13a      	bne.n	8007da4 <HAL_RCC_OscConfig+0x374>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f003 0303 	and.w	r3, r3, #3
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d135      	bne.n	8007da4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d38:	4b7b      	ldr	r3, [pc, #492]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d005      	beq.n	8007d50 <HAL_RCC_OscConfig+0x320>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	69db      	ldr	r3, [r3, #28]
 8007d48:	2b80      	cmp	r3, #128	@ 0x80
 8007d4a:	d001      	beq.n	8007d50 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e2c1      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d50:	f7fb f85e 	bl	8002e10 <HAL_GetREVID>
 8007d54:	4603      	mov	r3, r0
 8007d56:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d817      	bhi.n	8007d8e <HAL_RCC_OscConfig+0x35e>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a1b      	ldr	r3, [r3, #32]
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d108      	bne.n	8007d78 <HAL_RCC_OscConfig+0x348>
 8007d66:	4b70      	ldr	r3, [pc, #448]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d70:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d74:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d76:	e075      	b.n	8007e64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d78:	4b6b      	ldr	r3, [pc, #428]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	069b      	lsls	r3, r3, #26
 8007d86:	4968      	ldr	r1, [pc, #416]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d8c:	e06a      	b.n	8007e64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d8e:	4b66      	ldr	r3, [pc, #408]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a1b      	ldr	r3, [r3, #32]
 8007d9a:	061b      	lsls	r3, r3, #24
 8007d9c:	4962      	ldr	r1, [pc, #392]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007da2:	e05f      	b.n	8007e64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d042      	beq.n	8007e32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007dac:	4b5e      	ldr	r3, [pc, #376]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a5d      	ldr	r2, [pc, #372]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db8:	f7fa fffa 	bl	8002db0 <HAL_GetTick>
 8007dbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dbe:	e008      	b.n	8007dd2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007dc0:	f7fa fff6 	bl	8002db0 <HAL_GetTick>
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d901      	bls.n	8007dd2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007dce:	2303      	movs	r3, #3
 8007dd0:	e280      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007dd2:	4b55      	ldr	r3, [pc, #340]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d0f0      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dde:	f7fb f817 	bl	8002e10 <HAL_GetREVID>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d817      	bhi.n	8007e1c <HAL_RCC_OscConfig+0x3ec>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	2b20      	cmp	r3, #32
 8007df2:	d108      	bne.n	8007e06 <HAL_RCC_OscConfig+0x3d6>
 8007df4:	4b4c      	ldr	r3, [pc, #304]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007dfc:	4a4a      	ldr	r2, [pc, #296]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007dfe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e02:	6053      	str	r3, [r2, #4]
 8007e04:	e02e      	b.n	8007e64 <HAL_RCC_OscConfig+0x434>
 8007e06:	4b48      	ldr	r3, [pc, #288]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a1b      	ldr	r3, [r3, #32]
 8007e12:	069b      	lsls	r3, r3, #26
 8007e14:	4944      	ldr	r1, [pc, #272]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e16:	4313      	orrs	r3, r2
 8007e18:	604b      	str	r3, [r1, #4]
 8007e1a:	e023      	b.n	8007e64 <HAL_RCC_OscConfig+0x434>
 8007e1c:	4b42      	ldr	r3, [pc, #264]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	061b      	lsls	r3, r3, #24
 8007e2a:	493f      	ldr	r1, [pc, #252]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60cb      	str	r3, [r1, #12]
 8007e30:	e018      	b.n	8007e64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e32:	4b3d      	ldr	r3, [pc, #244]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a3c      	ldr	r2, [pc, #240]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e3e:	f7fa ffb7 	bl	8002db0 <HAL_GetTick>
 8007e42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e44:	e008      	b.n	8007e58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e46:	f7fa ffb3 	bl	8002db0 <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e23d      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e58:	4b33      	ldr	r3, [pc, #204]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1f0      	bne.n	8007e46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 0308 	and.w	r3, r3, #8
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d036      	beq.n	8007ede <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d019      	beq.n	8007eac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e78:	4b2b      	ldr	r3, [pc, #172]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e84:	f7fa ff94 	bl	8002db0 <HAL_GetTick>
 8007e88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e8c:	f7fa ff90 	bl	8002db0 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e21a      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007e9e:	4b22      	ldr	r3, [pc, #136]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d0f0      	beq.n	8007e8c <HAL_RCC_OscConfig+0x45c>
 8007eaa:	e018      	b.n	8007ede <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eac:	4b1e      	ldr	r3, [pc, #120]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007eb2:	f023 0301 	bic.w	r3, r3, #1
 8007eb6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb8:	f7fa ff7a 	bl	8002db0 <HAL_GetTick>
 8007ebc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec0:	f7fa ff76 	bl	8002db0 <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e200      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ed2:	4b15      	ldr	r3, [pc, #84]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f0      	bne.n	8007ec0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0320 	and.w	r3, r3, #32
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d039      	beq.n	8007f5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	699b      	ldr	r3, [r3, #24]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d01c      	beq.n	8007f2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007ef8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007efc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007efe:	f7fa ff57 	bl	8002db0 <HAL_GetTick>
 8007f02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f04:	e008      	b.n	8007f18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f06:	f7fa ff53 	bl	8002db0 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	d901      	bls.n	8007f18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e1dd      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f18:	4b03      	ldr	r3, [pc, #12]	@ (8007f28 <HAL_RCC_OscConfig+0x4f8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d0f0      	beq.n	8007f06 <HAL_RCC_OscConfig+0x4d6>
 8007f24:	e01b      	b.n	8007f5e <HAL_RCC_OscConfig+0x52e>
 8007f26:	bf00      	nop
 8007f28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f2c:	4b9b      	ldr	r3, [pc, #620]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a9a      	ldr	r2, [pc, #616]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007f32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f38:	f7fa ff3a 	bl	8002db0 <HAL_GetTick>
 8007f3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f3e:	e008      	b.n	8007f52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f40:	f7fa ff36 	bl	8002db0 <HAL_GetTick>
 8007f44:	4602      	mov	r2, r0
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	1ad3      	subs	r3, r2, r3
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d901      	bls.n	8007f52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e1c0      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f52:	4b92      	ldr	r3, [pc, #584]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1f0      	bne.n	8007f40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f003 0304 	and.w	r3, r3, #4
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f000 8081 	beq.w	800806e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007f6c:	4b8c      	ldr	r3, [pc, #560]	@ (80081a0 <HAL_RCC_OscConfig+0x770>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a8b      	ldr	r2, [pc, #556]	@ (80081a0 <HAL_RCC_OscConfig+0x770>)
 8007f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f78:	f7fa ff1a 	bl	8002db0 <HAL_GetTick>
 8007f7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f80:	f7fa ff16 	bl	8002db0 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b64      	cmp	r3, #100	@ 0x64
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e1a0      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f92:	4b83      	ldr	r3, [pc, #524]	@ (80081a0 <HAL_RCC_OscConfig+0x770>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d0f0      	beq.n	8007f80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d106      	bne.n	8007fb4 <HAL_RCC_OscConfig+0x584>
 8007fa6:	4b7d      	ldr	r3, [pc, #500]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007faa:	4a7c      	ldr	r2, [pc, #496]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fac:	f043 0301 	orr.w	r3, r3, #1
 8007fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fb2:	e02d      	b.n	8008010 <HAL_RCC_OscConfig+0x5e0>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d10c      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x5a6>
 8007fbc:	4b77      	ldr	r3, [pc, #476]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fc0:	4a76      	ldr	r2, [pc, #472]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fc2:	f023 0301 	bic.w	r3, r3, #1
 8007fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fc8:	4b74      	ldr	r3, [pc, #464]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fcc:	4a73      	ldr	r2, [pc, #460]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fce:	f023 0304 	bic.w	r3, r3, #4
 8007fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fd4:	e01c      	b.n	8008010 <HAL_RCC_OscConfig+0x5e0>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	2b05      	cmp	r3, #5
 8007fdc:	d10c      	bne.n	8007ff8 <HAL_RCC_OscConfig+0x5c8>
 8007fde:	4b6f      	ldr	r3, [pc, #444]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fe2:	4a6e      	ldr	r2, [pc, #440]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fe4:	f043 0304 	orr.w	r3, r3, #4
 8007fe8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fea:	4b6c      	ldr	r3, [pc, #432]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fee:	4a6b      	ldr	r2, [pc, #428]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007ff0:	f043 0301 	orr.w	r3, r3, #1
 8007ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ff6:	e00b      	b.n	8008010 <HAL_RCC_OscConfig+0x5e0>
 8007ff8:	4b68      	ldr	r3, [pc, #416]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ffc:	4a67      	ldr	r2, [pc, #412]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8007ffe:	f023 0301 	bic.w	r3, r3, #1
 8008002:	6713      	str	r3, [r2, #112]	@ 0x70
 8008004:	4b65      	ldr	r3, [pc, #404]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008008:	4a64      	ldr	r2, [pc, #400]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 800800a:	f023 0304 	bic.w	r3, r3, #4
 800800e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d015      	beq.n	8008044 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008018:	f7fa feca 	bl	8002db0 <HAL_GetTick>
 800801c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800801e:	e00a      	b.n	8008036 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008020:	f7fa fec6 	bl	8002db0 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800802e:	4293      	cmp	r3, r2
 8008030:	d901      	bls.n	8008036 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008032:	2303      	movs	r3, #3
 8008034:	e14e      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008036:	4b59      	ldr	r3, [pc, #356]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803a:	f003 0302 	and.w	r3, r3, #2
 800803e:	2b00      	cmp	r3, #0
 8008040:	d0ee      	beq.n	8008020 <HAL_RCC_OscConfig+0x5f0>
 8008042:	e014      	b.n	800806e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008044:	f7fa feb4 	bl	8002db0 <HAL_GetTick>
 8008048:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800804a:	e00a      	b.n	8008062 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800804c:	f7fa feb0 	bl	8002db0 <HAL_GetTick>
 8008050:	4602      	mov	r2, r0
 8008052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008054:	1ad3      	subs	r3, r2, r3
 8008056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800805a:	4293      	cmp	r3, r2
 800805c:	d901      	bls.n	8008062 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800805e:	2303      	movs	r3, #3
 8008060:	e138      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008062:	4b4e      	ldr	r3, [pc, #312]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008064:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008066:	f003 0302 	and.w	r3, r3, #2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1ee      	bne.n	800804c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 812d 	beq.w	80082d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008078:	4b48      	ldr	r3, [pc, #288]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008080:	2b18      	cmp	r3, #24
 8008082:	f000 80bd 	beq.w	8008200 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808a:	2b02      	cmp	r3, #2
 800808c:	f040 809e 	bne.w	80081cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008090:	4b42      	ldr	r3, [pc, #264]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a41      	ldr	r2, [pc, #260]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008096:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800809a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809c:	f7fa fe88 	bl	8002db0 <HAL_GetTick>
 80080a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080a2:	e008      	b.n	80080b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080a4:	f7fa fe84 	bl	8002db0 <HAL_GetTick>
 80080a8:	4602      	mov	r2, r0
 80080aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ac:	1ad3      	subs	r3, r2, r3
 80080ae:	2b02      	cmp	r3, #2
 80080b0:	d901      	bls.n	80080b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80080b2:	2303      	movs	r3, #3
 80080b4:	e10e      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080b6:	4b39      	ldr	r3, [pc, #228]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d1f0      	bne.n	80080a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080c2:	4b36      	ldr	r3, [pc, #216]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 80080c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080c6:	4b37      	ldr	r3, [pc, #220]	@ (80081a4 <HAL_RCC_OscConfig+0x774>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80080d2:	0112      	lsls	r2, r2, #4
 80080d4:	430a      	orrs	r2, r1
 80080d6:	4931      	ldr	r1, [pc, #196]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	628b      	str	r3, [r1, #40]	@ 0x28
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080e0:	3b01      	subs	r3, #1
 80080e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080ea:	3b01      	subs	r3, #1
 80080ec:	025b      	lsls	r3, r3, #9
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080f6:	3b01      	subs	r3, #1
 80080f8:	041b      	lsls	r3, r3, #16
 80080fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080fe:	431a      	orrs	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008104:	3b01      	subs	r3, #1
 8008106:	061b      	lsls	r3, r3, #24
 8008108:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800810c:	4923      	ldr	r1, [pc, #140]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 800810e:	4313      	orrs	r3, r2
 8008110:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008112:	4b22      	ldr	r3, [pc, #136]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008116:	4a21      	ldr	r2, [pc, #132]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800811e:	4b1f      	ldr	r3, [pc, #124]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008120:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008122:	4b21      	ldr	r3, [pc, #132]	@ (80081a8 <HAL_RCC_OscConfig+0x778>)
 8008124:	4013      	ands	r3, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800812a:	00d2      	lsls	r2, r2, #3
 800812c:	491b      	ldr	r1, [pc, #108]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 800812e:	4313      	orrs	r3, r2
 8008130:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008132:	4b1a      	ldr	r3, [pc, #104]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008136:	f023 020c 	bic.w	r2, r3, #12
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813e:	4917      	ldr	r1, [pc, #92]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008140:	4313      	orrs	r3, r2
 8008142:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008144:	4b15      	ldr	r3, [pc, #84]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	f023 0202 	bic.w	r2, r3, #2
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008150:	4912      	ldr	r1, [pc, #72]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008152:	4313      	orrs	r3, r2
 8008154:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008156:	4b11      	ldr	r3, [pc, #68]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815a:	4a10      	ldr	r2, [pc, #64]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 800815c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008160:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008162:	4b0e      	ldr	r3, [pc, #56]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008166:	4a0d      	ldr	r2, [pc, #52]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800816c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800816e:	4b0b      	ldr	r3, [pc, #44]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008172:	4a0a      	ldr	r2, [pc, #40]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800817a:	4b08      	ldr	r3, [pc, #32]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 800817c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817e:	4a07      	ldr	r2, [pc, #28]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008180:	f043 0301 	orr.w	r3, r3, #1
 8008184:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008186:	4b05      	ldr	r3, [pc, #20]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a04      	ldr	r2, [pc, #16]	@ (800819c <HAL_RCC_OscConfig+0x76c>)
 800818c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008192:	f7fa fe0d 	bl	8002db0 <HAL_GetTick>
 8008196:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008198:	e011      	b.n	80081be <HAL_RCC_OscConfig+0x78e>
 800819a:	bf00      	nop
 800819c:	58024400 	.word	0x58024400
 80081a0:	58024800 	.word	0x58024800
 80081a4:	fffffc0c 	.word	0xfffffc0c
 80081a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081ac:	f7fa fe00 	bl	8002db0 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	d901      	bls.n	80081be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e08a      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081be:	4b47      	ldr	r3, [pc, #284]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d0f0      	beq.n	80081ac <HAL_RCC_OscConfig+0x77c>
 80081ca:	e082      	b.n	80082d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081cc:	4b43      	ldr	r3, [pc, #268]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a42      	ldr	r2, [pc, #264]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 80081d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d8:	f7fa fdea 	bl	8002db0 <HAL_GetTick>
 80081dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081de:	e008      	b.n	80081f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081e0:	f7fa fde6 	bl	8002db0 <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e070      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80081f2:	4b3a      	ldr	r3, [pc, #232]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1f0      	bne.n	80081e0 <HAL_RCC_OscConfig+0x7b0>
 80081fe:	e068      	b.n	80082d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008200:	4b36      	ldr	r3, [pc, #216]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 8008202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008204:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008206:	4b35      	ldr	r3, [pc, #212]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 8008208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800820a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	2b01      	cmp	r3, #1
 8008212:	d031      	beq.n	8008278 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f003 0203 	and.w	r2, r3, #3
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800821e:	429a      	cmp	r2, r3
 8008220:	d12a      	bne.n	8008278 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	091b      	lsrs	r3, r3, #4
 8008226:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800822e:	429a      	cmp	r2, r3
 8008230:	d122      	bne.n	8008278 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800823e:	429a      	cmp	r2, r3
 8008240:	d11a      	bne.n	8008278 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	0a5b      	lsrs	r3, r3, #9
 8008246:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800824e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008250:	429a      	cmp	r2, r3
 8008252:	d111      	bne.n	8008278 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	0c1b      	lsrs	r3, r3, #16
 8008258:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008260:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008262:	429a      	cmp	r2, r3
 8008264:	d108      	bne.n	8008278 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	0e1b      	lsrs	r3, r3, #24
 800826a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008272:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008274:	429a      	cmp	r2, r3
 8008276:	d001      	beq.n	800827c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	e02b      	b.n	80082d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800827c:	4b17      	ldr	r3, [pc, #92]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 800827e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008280:	08db      	lsrs	r3, r3, #3
 8008282:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008286:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	429a      	cmp	r2, r3
 8008290:	d01f      	beq.n	80082d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008292:	4b12      	ldr	r3, [pc, #72]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 8008294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008296:	4a11      	ldr	r2, [pc, #68]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 8008298:	f023 0301 	bic.w	r3, r3, #1
 800829c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800829e:	f7fa fd87 	bl	8002db0 <HAL_GetTick>
 80082a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80082a4:	bf00      	nop
 80082a6:	f7fa fd83 	bl	8002db0 <HAL_GetTick>
 80082aa:	4602      	mov	r2, r0
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d0f9      	beq.n	80082a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082b2:	4b0a      	ldr	r3, [pc, #40]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 80082b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082b6:	4b0a      	ldr	r3, [pc, #40]	@ (80082e0 <HAL_RCC_OscConfig+0x8b0>)
 80082b8:	4013      	ands	r3, r2
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80082be:	00d2      	lsls	r2, r2, #3
 80082c0:	4906      	ldr	r1, [pc, #24]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80082c6:	4b05      	ldr	r3, [pc, #20]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 80082c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ca:	4a04      	ldr	r2, [pc, #16]	@ (80082dc <HAL_RCC_OscConfig+0x8ac>)
 80082cc:	f043 0301 	orr.w	r3, r3, #1
 80082d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3730      	adds	r7, #48	@ 0x30
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	58024400 	.word	0x58024400
 80082e0:	ffff0007 	.word	0xffff0007

080082e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d101      	bne.n	80082f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e19c      	b.n	8008632 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082f8:	4b8a      	ldr	r3, [pc, #552]	@ (8008524 <HAL_RCC_ClockConfig+0x240>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f003 030f 	and.w	r3, r3, #15
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d910      	bls.n	8008328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008306:	4b87      	ldr	r3, [pc, #540]	@ (8008524 <HAL_RCC_ClockConfig+0x240>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f023 020f 	bic.w	r2, r3, #15
 800830e:	4985      	ldr	r1, [pc, #532]	@ (8008524 <HAL_RCC_ClockConfig+0x240>)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	4313      	orrs	r3, r2
 8008314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008316:	4b83      	ldr	r3, [pc, #524]	@ (8008524 <HAL_RCC_ClockConfig+0x240>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	f003 030f 	and.w	r3, r3, #15
 800831e:	683a      	ldr	r2, [r7, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d001      	beq.n	8008328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	e184      	b.n	8008632 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 0304 	and.w	r3, r3, #4
 8008330:	2b00      	cmp	r3, #0
 8008332:	d010      	beq.n	8008356 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	4b7b      	ldr	r3, [pc, #492]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008340:	429a      	cmp	r2, r3
 8008342:	d908      	bls.n	8008356 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008344:	4b78      	ldr	r3, [pc, #480]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008346:	699b      	ldr	r3, [r3, #24]
 8008348:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	4975      	ldr	r1, [pc, #468]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008352:	4313      	orrs	r3, r2
 8008354:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f003 0308 	and.w	r3, r3, #8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d010      	beq.n	8008384 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	695a      	ldr	r2, [r3, #20]
 8008366:	4b70      	ldr	r3, [pc, #448]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800836e:	429a      	cmp	r2, r3
 8008370:	d908      	bls.n	8008384 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008372:	4b6d      	ldr	r3, [pc, #436]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008374:	69db      	ldr	r3, [r3, #28]
 8008376:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	695b      	ldr	r3, [r3, #20]
 800837e:	496a      	ldr	r1, [pc, #424]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008380:	4313      	orrs	r3, r2
 8008382:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0310 	and.w	r3, r3, #16
 800838c:	2b00      	cmp	r3, #0
 800838e:	d010      	beq.n	80083b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699a      	ldr	r2, [r3, #24]
 8008394:	4b64      	ldr	r3, [pc, #400]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008396:	69db      	ldr	r3, [r3, #28]
 8008398:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800839c:	429a      	cmp	r2, r3
 800839e:	d908      	bls.n	80083b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083a0:	4b61      	ldr	r3, [pc, #388]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80083a2:	69db      	ldr	r3, [r3, #28]
 80083a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	495e      	ldr	r1, [pc, #376]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f003 0320 	and.w	r3, r3, #32
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d010      	beq.n	80083e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	69da      	ldr	r2, [r3, #28]
 80083c2:	4b59      	ldr	r3, [pc, #356]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d908      	bls.n	80083e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80083ce:	4b56      	ldr	r3, [pc, #344]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	4953      	ldr	r1, [pc, #332]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80083dc:	4313      	orrs	r3, r2
 80083de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d010      	beq.n	800840e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	4b4d      	ldr	r3, [pc, #308]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d908      	bls.n	800840e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083fc:	4b4a      	ldr	r3, [pc, #296]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	f023 020f 	bic.w	r2, r3, #15
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	4947      	ldr	r1, [pc, #284]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 800840a:	4313      	orrs	r3, r2
 800840c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d055      	beq.n	80084c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800841a:	4b43      	ldr	r3, [pc, #268]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 800841c:	699b      	ldr	r3, [r3, #24]
 800841e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	4940      	ldr	r1, [pc, #256]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008428:	4313      	orrs	r3, r2
 800842a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	2b02      	cmp	r3, #2
 8008432:	d107      	bne.n	8008444 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008434:	4b3c      	ldr	r3, [pc, #240]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d121      	bne.n	8008484 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e0f6      	b.n	8008632 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	2b03      	cmp	r3, #3
 800844a:	d107      	bne.n	800845c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800844c:	4b36      	ldr	r3, [pc, #216]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008454:	2b00      	cmp	r3, #0
 8008456:	d115      	bne.n	8008484 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e0ea      	b.n	8008632 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d107      	bne.n	8008474 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008464:	4b30      	ldr	r3, [pc, #192]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800846c:	2b00      	cmp	r3, #0
 800846e:	d109      	bne.n	8008484 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e0de      	b.n	8008632 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008474:	4b2c      	ldr	r3, [pc, #176]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d101      	bne.n	8008484 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e0d6      	b.n	8008632 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008484:	4b28      	ldr	r3, [pc, #160]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008486:	691b      	ldr	r3, [r3, #16]
 8008488:	f023 0207 	bic.w	r2, r3, #7
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	4925      	ldr	r1, [pc, #148]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 8008492:	4313      	orrs	r3, r2
 8008494:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008496:	f7fa fc8b 	bl	8002db0 <HAL_GetTick>
 800849a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800849c:	e00a      	b.n	80084b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800849e:	f7fa fc87 	bl	8002db0 <HAL_GetTick>
 80084a2:	4602      	mov	r2, r0
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	1ad3      	subs	r3, r2, r3
 80084a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d901      	bls.n	80084b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80084b0:	2303      	movs	r3, #3
 80084b2:	e0be      	b.n	8008632 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084b4:	4b1c      	ldr	r3, [pc, #112]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d1eb      	bne.n	800849e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d010      	beq.n	80084f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	68da      	ldr	r2, [r3, #12]
 80084d6:	4b14      	ldr	r3, [pc, #80]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	f003 030f 	and.w	r3, r3, #15
 80084de:	429a      	cmp	r2, r3
 80084e0:	d208      	bcs.n	80084f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084e2:	4b11      	ldr	r3, [pc, #68]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	f023 020f 	bic.w	r2, r3, #15
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	490e      	ldr	r1, [pc, #56]	@ (8008528 <HAL_RCC_ClockConfig+0x244>)
 80084f0:	4313      	orrs	r3, r2
 80084f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008524 <HAL_RCC_ClockConfig+0x240>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	429a      	cmp	r2, r3
 8008500:	d214      	bcs.n	800852c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008502:	4b08      	ldr	r3, [pc, #32]	@ (8008524 <HAL_RCC_ClockConfig+0x240>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f023 020f 	bic.w	r2, r3, #15
 800850a:	4906      	ldr	r1, [pc, #24]	@ (8008524 <HAL_RCC_ClockConfig+0x240>)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	4313      	orrs	r3, r2
 8008510:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008512:	4b04      	ldr	r3, [pc, #16]	@ (8008524 <HAL_RCC_ClockConfig+0x240>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d005      	beq.n	800852c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e086      	b.n	8008632 <HAL_RCC_ClockConfig+0x34e>
 8008524:	52002000 	.word	0x52002000
 8008528:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0304 	and.w	r3, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	d010      	beq.n	800855a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691a      	ldr	r2, [r3, #16]
 800853c:	4b3f      	ldr	r3, [pc, #252]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008544:	429a      	cmp	r2, r3
 8008546:	d208      	bcs.n	800855a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008548:	4b3c      	ldr	r3, [pc, #240]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	691b      	ldr	r3, [r3, #16]
 8008554:	4939      	ldr	r1, [pc, #228]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 8008556:	4313      	orrs	r3, r2
 8008558:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d010      	beq.n	8008588 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	695a      	ldr	r2, [r3, #20]
 800856a:	4b34      	ldr	r3, [pc, #208]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008572:	429a      	cmp	r2, r3
 8008574:	d208      	bcs.n	8008588 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008576:	4b31      	ldr	r3, [pc, #196]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 8008578:	69db      	ldr	r3, [r3, #28]
 800857a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	492e      	ldr	r1, [pc, #184]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 8008584:	4313      	orrs	r3, r2
 8008586:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f003 0310 	and.w	r3, r3, #16
 8008590:	2b00      	cmp	r3, #0
 8008592:	d010      	beq.n	80085b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	699a      	ldr	r2, [r3, #24]
 8008598:	4b28      	ldr	r3, [pc, #160]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d208      	bcs.n	80085b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085a4:	4b25      	ldr	r3, [pc, #148]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 80085a6:	69db      	ldr	r3, [r3, #28]
 80085a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	4922      	ldr	r1, [pc, #136]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 80085b2:	4313      	orrs	r3, r2
 80085b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f003 0320 	and.w	r3, r3, #32
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d010      	beq.n	80085e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69da      	ldr	r2, [r3, #28]
 80085c6:	4b1d      	ldr	r3, [pc, #116]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d208      	bcs.n	80085e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80085d2:	4b1a      	ldr	r3, [pc, #104]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 80085d4:	6a1b      	ldr	r3, [r3, #32]
 80085d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	4917      	ldr	r1, [pc, #92]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80085e4:	f000 f834 	bl	8008650 <HAL_RCC_GetSysClockFreq>
 80085e8:	4602      	mov	r2, r0
 80085ea:	4b14      	ldr	r3, [pc, #80]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 80085ec:	699b      	ldr	r3, [r3, #24]
 80085ee:	0a1b      	lsrs	r3, r3, #8
 80085f0:	f003 030f 	and.w	r3, r3, #15
 80085f4:	4912      	ldr	r1, [pc, #72]	@ (8008640 <HAL_RCC_ClockConfig+0x35c>)
 80085f6:	5ccb      	ldrb	r3, [r1, r3]
 80085f8:	f003 031f 	and.w	r3, r3, #31
 80085fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008600:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008602:	4b0e      	ldr	r3, [pc, #56]	@ (800863c <HAL_RCC_ClockConfig+0x358>)
 8008604:	699b      	ldr	r3, [r3, #24]
 8008606:	f003 030f 	and.w	r3, r3, #15
 800860a:	4a0d      	ldr	r2, [pc, #52]	@ (8008640 <HAL_RCC_ClockConfig+0x35c>)
 800860c:	5cd3      	ldrb	r3, [r2, r3]
 800860e:	f003 031f 	and.w	r3, r3, #31
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	fa22 f303 	lsr.w	r3, r2, r3
 8008618:	4a0a      	ldr	r2, [pc, #40]	@ (8008644 <HAL_RCC_ClockConfig+0x360>)
 800861a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800861c:	4a0a      	ldr	r2, [pc, #40]	@ (8008648 <HAL_RCC_ClockConfig+0x364>)
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008622:	4b0a      	ldr	r3, [pc, #40]	@ (800864c <HAL_RCC_ClockConfig+0x368>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4618      	mov	r0, r3
 8008628:	f7fa fb78 	bl	8002d1c <HAL_InitTick>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	58024400 	.word	0x58024400
 8008640:	0800e798 	.word	0x0800e798
 8008644:	24000020 	.word	0x24000020
 8008648:	2400001c 	.word	0x2400001c
 800864c:	24000024 	.word	0x24000024

08008650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008650:	b480      	push	{r7}
 8008652:	b089      	sub	sp, #36	@ 0x24
 8008654:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008656:	4bb3      	ldr	r3, [pc, #716]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800865e:	2b18      	cmp	r3, #24
 8008660:	f200 8155 	bhi.w	800890e <HAL_RCC_GetSysClockFreq+0x2be>
 8008664:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866a:	bf00      	nop
 800866c:	080086d1 	.word	0x080086d1
 8008670:	0800890f 	.word	0x0800890f
 8008674:	0800890f 	.word	0x0800890f
 8008678:	0800890f 	.word	0x0800890f
 800867c:	0800890f 	.word	0x0800890f
 8008680:	0800890f 	.word	0x0800890f
 8008684:	0800890f 	.word	0x0800890f
 8008688:	0800890f 	.word	0x0800890f
 800868c:	080086f7 	.word	0x080086f7
 8008690:	0800890f 	.word	0x0800890f
 8008694:	0800890f 	.word	0x0800890f
 8008698:	0800890f 	.word	0x0800890f
 800869c:	0800890f 	.word	0x0800890f
 80086a0:	0800890f 	.word	0x0800890f
 80086a4:	0800890f 	.word	0x0800890f
 80086a8:	0800890f 	.word	0x0800890f
 80086ac:	080086fd 	.word	0x080086fd
 80086b0:	0800890f 	.word	0x0800890f
 80086b4:	0800890f 	.word	0x0800890f
 80086b8:	0800890f 	.word	0x0800890f
 80086bc:	0800890f 	.word	0x0800890f
 80086c0:	0800890f 	.word	0x0800890f
 80086c4:	0800890f 	.word	0x0800890f
 80086c8:	0800890f 	.word	0x0800890f
 80086cc:	08008703 	.word	0x08008703
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086d0:	4b94      	ldr	r3, [pc, #592]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d009      	beq.n	80086f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086dc:	4b91      	ldr	r3, [pc, #580]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	08db      	lsrs	r3, r3, #3
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	4a90      	ldr	r2, [pc, #576]	@ (8008928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
 80086ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80086ee:	e111      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80086f0:	4b8d      	ldr	r3, [pc, #564]	@ (8008928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086f2:	61bb      	str	r3, [r7, #24]
      break;
 80086f4:	e10e      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80086f6:	4b8d      	ldr	r3, [pc, #564]	@ (800892c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086f8:	61bb      	str	r3, [r7, #24]
      break;
 80086fa:	e10b      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80086fc:	4b8c      	ldr	r3, [pc, #560]	@ (8008930 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80086fe:	61bb      	str	r3, [r7, #24]
      break;
 8008700:	e108      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008702:	4b88      	ldr	r3, [pc, #544]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008706:	f003 0303 	and.w	r3, r3, #3
 800870a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800870c:	4b85      	ldr	r3, [pc, #532]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800870e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008710:	091b      	lsrs	r3, r3, #4
 8008712:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008716:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008718:	4b82      	ldr	r3, [pc, #520]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800871a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008722:	4b80      	ldr	r3, [pc, #512]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008726:	08db      	lsrs	r3, r3, #3
 8008728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	fb02 f303 	mul.w	r3, r2, r3
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 80e1 	beq.w	8008908 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	2b02      	cmp	r3, #2
 800874a:	f000 8083 	beq.w	8008854 <HAL_RCC_GetSysClockFreq+0x204>
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b02      	cmp	r3, #2
 8008752:	f200 80a1 	bhi.w	8008898 <HAL_RCC_GetSysClockFreq+0x248>
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <HAL_RCC_GetSysClockFreq+0x114>
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d056      	beq.n	8008810 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008762:	e099      	b.n	8008898 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008764:	4b6f      	ldr	r3, [pc, #444]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d02d      	beq.n	80087cc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008770:	4b6c      	ldr	r3, [pc, #432]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	08db      	lsrs	r3, r3, #3
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	4a6b      	ldr	r2, [pc, #428]	@ (8008928 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879a:	4b62      	ldr	r3, [pc, #392]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800879c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80087ae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80087ca:	e087      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008938 <HAL_RCC_GetSysClockFreq+0x2e8>
 80087da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087de:	4b51      	ldr	r3, [pc, #324]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80087f2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800880e:	e065      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800893c <HAL_RCC_GetSysClockFreq+0x2ec>
 800881e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008822:	4b40      	ldr	r3, [pc, #256]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a02 	vldr	s12, [r7, #8]
 8008836:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008934 <HAL_RCC_GetSysClockFreq+0x2e4>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008852:	e043      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008940 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008866:	4b2f      	ldr	r3, [pc, #188]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800886a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008876:	ed97 6a02 	vldr	s12, [r7, #8]
 800887a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008934 <HAL_RCC_GetSysClockFreq+0x2e4>
 800887e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800888a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008892:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008896:	e021      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800893c <HAL_RCC_GetSysClockFreq+0x2ec>
 80088a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088aa:	4b1e      	ldr	r3, [pc, #120]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80088be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008934 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80088dc:	4b11      	ldr	r3, [pc, #68]	@ (8008924 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e0:	0a5b      	lsrs	r3, r3, #9
 80088e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088e6:	3301      	adds	r3, #1
 80088e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	ee07 3a90 	vmov	s15, r3
 80088f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80088f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008900:	ee17 3a90 	vmov	r3, s15
 8008904:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008906:	e005      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	61bb      	str	r3, [r7, #24]
      break;
 800890c:	e002      	b.n	8008914 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800890e:	4b07      	ldr	r3, [pc, #28]	@ (800892c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008910:	61bb      	str	r3, [r7, #24]
      break;
 8008912:	bf00      	nop
  }

  return sysclockfreq;
 8008914:	69bb      	ldr	r3, [r7, #24]
}
 8008916:	4618      	mov	r0, r3
 8008918:	3724      	adds	r7, #36	@ 0x24
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	58024400 	.word	0x58024400
 8008928:	03d09000 	.word	0x03d09000
 800892c:	003d0900 	.word	0x003d0900
 8008930:	02dc6c00 	.word	0x02dc6c00
 8008934:	46000000 	.word	0x46000000
 8008938:	4c742400 	.word	0x4c742400
 800893c:	4a742400 	.word	0x4a742400
 8008940:	4c371b00 	.word	0x4c371b00

08008944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800894a:	f7ff fe81 	bl	8008650 <HAL_RCC_GetSysClockFreq>
 800894e:	4602      	mov	r2, r0
 8008950:	4b10      	ldr	r3, [pc, #64]	@ (8008994 <HAL_RCC_GetHCLKFreq+0x50>)
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	0a1b      	lsrs	r3, r3, #8
 8008956:	f003 030f 	and.w	r3, r3, #15
 800895a:	490f      	ldr	r1, [pc, #60]	@ (8008998 <HAL_RCC_GetHCLKFreq+0x54>)
 800895c:	5ccb      	ldrb	r3, [r1, r3]
 800895e:	f003 031f 	and.w	r3, r3, #31
 8008962:	fa22 f303 	lsr.w	r3, r2, r3
 8008966:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008968:	4b0a      	ldr	r3, [pc, #40]	@ (8008994 <HAL_RCC_GetHCLKFreq+0x50>)
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	4a09      	ldr	r2, [pc, #36]	@ (8008998 <HAL_RCC_GetHCLKFreq+0x54>)
 8008972:	5cd3      	ldrb	r3, [r2, r3]
 8008974:	f003 031f 	and.w	r3, r3, #31
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	fa22 f303 	lsr.w	r3, r2, r3
 800897e:	4a07      	ldr	r2, [pc, #28]	@ (800899c <HAL_RCC_GetHCLKFreq+0x58>)
 8008980:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008982:	4a07      	ldr	r2, [pc, #28]	@ (80089a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008988:	4b04      	ldr	r3, [pc, #16]	@ (800899c <HAL_RCC_GetHCLKFreq+0x58>)
 800898a:	681b      	ldr	r3, [r3, #0]
}
 800898c:	4618      	mov	r0, r3
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}
 8008994:	58024400 	.word	0x58024400
 8008998:	0800e798 	.word	0x0800e798
 800899c:	24000020 	.word	0x24000020
 80089a0:	2400001c 	.word	0x2400001c

080089a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80089a8:	f7ff ffcc 	bl	8008944 <HAL_RCC_GetHCLKFreq>
 80089ac:	4602      	mov	r2, r0
 80089ae:	4b06      	ldr	r3, [pc, #24]	@ (80089c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	091b      	lsrs	r3, r3, #4
 80089b4:	f003 0307 	and.w	r3, r3, #7
 80089b8:	4904      	ldr	r1, [pc, #16]	@ (80089cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80089ba:	5ccb      	ldrb	r3, [r1, r3]
 80089bc:	f003 031f 	and.w	r3, r3, #31
 80089c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	58024400 	.word	0x58024400
 80089cc:	0800e798 	.word	0x0800e798

080089d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80089d4:	f7ff ffb6 	bl	8008944 <HAL_RCC_GetHCLKFreq>
 80089d8:	4602      	mov	r2, r0
 80089da:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80089dc:	69db      	ldr	r3, [r3, #28]
 80089de:	0a1b      	lsrs	r3, r3, #8
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	4904      	ldr	r1, [pc, #16]	@ (80089f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80089e6:	5ccb      	ldrb	r3, [r1, r3]
 80089e8:	f003 031f 	and.w	r3, r3, #31
 80089ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	bd80      	pop	{r7, pc}
 80089f4:	58024400 	.word	0x58024400
 80089f8:	0800e798 	.word	0x0800e798

080089fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80089fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a00:	b0ca      	sub	sp, #296	@ 0x128
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008a20:	2500      	movs	r5, #0
 8008a22:	ea54 0305 	orrs.w	r3, r4, r5
 8008a26:	d049      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a2e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a32:	d02f      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008a34:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a38:	d828      	bhi.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008a3a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a3e:	d01a      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008a40:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a44:	d822      	bhi.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d003      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a4e:	d007      	beq.n	8008a60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a50:	e01c      	b.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a52:	4bb8      	ldr	r3, [pc, #736]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a56:	4ab7      	ldr	r2, [pc, #732]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a5e:	e01a      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a64:	3308      	adds	r3, #8
 8008a66:	2102      	movs	r1, #2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f002 fb61 	bl	800b130 <RCCEx_PLL2_Config>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a74:	e00f      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a7a:	3328      	adds	r3, #40	@ 0x28
 8008a7c:	2102      	movs	r1, #2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f002 fc08 	bl	800b294 <RCCEx_PLL3_Config>
 8008a84:	4603      	mov	r3, r0
 8008a86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a8a:	e004      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a92:	e000      	b.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a9e:	4ba5      	ldr	r3, [pc, #660]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008aa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008aa2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aaa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008aac:	4aa1      	ldr	r2, [pc, #644]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008aae:	430b      	orrs	r3, r1
 8008ab0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ab2:	e003      	b.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008ac8:	f04f 0900 	mov.w	r9, #0
 8008acc:	ea58 0309 	orrs.w	r3, r8, r9
 8008ad0:	d047      	beq.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ad8:	2b04      	cmp	r3, #4
 8008ada:	d82a      	bhi.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008adc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae2:	bf00      	nop
 8008ae4:	08008af9 	.word	0x08008af9
 8008ae8:	08008b07 	.word	0x08008b07
 8008aec:	08008b1d 	.word	0x08008b1d
 8008af0:	08008b3b 	.word	0x08008b3b
 8008af4:	08008b3b 	.word	0x08008b3b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008af8:	4b8e      	ldr	r3, [pc, #568]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afc:	4a8d      	ldr	r2, [pc, #564]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b04:	e01a      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0a:	3308      	adds	r3, #8
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f002 fb0e 	bl	800b130 <RCCEx_PLL2_Config>
 8008b14:	4603      	mov	r3, r0
 8008b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b1a:	e00f      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b20:	3328      	adds	r3, #40	@ 0x28
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f002 fbb5 	bl	800b294 <RCCEx_PLL3_Config>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b30:	e004      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b38:	e000      	b.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d10a      	bne.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b44:	4b7b      	ldr	r3, [pc, #492]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b48:	f023 0107 	bic.w	r1, r3, #7
 8008b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b52:	4a78      	ldr	r2, [pc, #480]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b54:	430b      	orrs	r3, r1
 8008b56:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b58:	e003      	b.n	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008b6e:	f04f 0b00 	mov.w	fp, #0
 8008b72:	ea5a 030b 	orrs.w	r3, sl, fp
 8008b76:	d04c      	beq.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b82:	d030      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008b84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b88:	d829      	bhi.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b8c:	d02d      	beq.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008b8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008b90:	d825      	bhi.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b92:	2b80      	cmp	r3, #128	@ 0x80
 8008b94:	d018      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008b96:	2b80      	cmp	r3, #128	@ 0x80
 8008b98:	d821      	bhi.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d002      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008b9e:	2b40      	cmp	r3, #64	@ 0x40
 8008ba0:	d007      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008ba2:	e01c      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba4:	4b63      	ldr	r3, [pc, #396]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba8:	4a62      	ldr	r2, [pc, #392]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008bb0:	e01c      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb6:	3308      	adds	r3, #8
 8008bb8:	2100      	movs	r1, #0
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f002 fab8 	bl	800b130 <RCCEx_PLL2_Config>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008bc6:	e011      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bcc:	3328      	adds	r3, #40	@ 0x28
 8008bce:	2100      	movs	r1, #0
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f002 fb5f 	bl	800b294 <RCCEx_PLL3_Config>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008bdc:	e006      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008be4:	e002      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008be6:	bf00      	nop
 8008be8:	e000      	b.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d10a      	bne.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008bf4:	4b4f      	ldr	r3, [pc, #316]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c02:	4a4c      	ldr	r2, [pc, #304]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c04:	430b      	orrs	r3, r1
 8008c06:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c08:	e003      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008c1e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008c22:	2300      	movs	r3, #0
 8008c24:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008c28:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008c2c:	460b      	mov	r3, r1
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	d053      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c3a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c3e:	d035      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008c40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c44:	d82e      	bhi.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c46:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008c4a:	d031      	beq.n	8008cb0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008c4c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008c50:	d828      	bhi.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c56:	d01a      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008c58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c5c:	d822      	bhi.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c66:	d007      	beq.n	8008c78 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008c68:	e01c      	b.n	8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c6a:	4b32      	ldr	r3, [pc, #200]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c6e:	4a31      	ldr	r2, [pc, #196]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c76:	e01c      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	2100      	movs	r1, #0
 8008c80:	4618      	mov	r0, r3
 8008c82:	f002 fa55 	bl	800b130 <RCCEx_PLL2_Config>
 8008c86:	4603      	mov	r3, r0
 8008c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c8c:	e011      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c92:	3328      	adds	r3, #40	@ 0x28
 8008c94:	2100      	movs	r1, #0
 8008c96:	4618      	mov	r0, r3
 8008c98:	f002 fafc 	bl	800b294 <RCCEx_PLL3_Config>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ca2:	e006      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008caa:	e002      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008cac:	bf00      	nop
 8008cae:	e000      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008cb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d10b      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008cba:	4b1e      	ldr	r3, [pc, #120]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cbe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008cca:	4a1a      	ldr	r2, [pc, #104]	@ (8008d34 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ccc:	430b      	orrs	r3, r1
 8008cce:	6593      	str	r3, [r2, #88]	@ 0x58
 8008cd0:	e003      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008ce6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008cea:	2300      	movs	r3, #0
 8008cec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008cf0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008cf4:	460b      	mov	r3, r1
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	d056      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d06:	d038      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008d08:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d0c:	d831      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d0e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d12:	d034      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008d14:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d18:	d82b      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d1a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d1e:	d01d      	beq.n	8008d5c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008d20:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d24:	d825      	bhi.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d006      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008d2a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d2e:	d00a      	beq.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008d30:	e01f      	b.n	8008d72 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d32:	bf00      	nop
 8008d34:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d38:	4ba2      	ldr	r3, [pc, #648]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d3c:	4aa1      	ldr	r2, [pc, #644]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d3e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d42:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d44:	e01c      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f002 f9ee 	bl	800b130 <RCCEx_PLL2_Config>
 8008d54:	4603      	mov	r3, r0
 8008d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d5a:	e011      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d60:	3328      	adds	r3, #40	@ 0x28
 8008d62:	2100      	movs	r1, #0
 8008d64:	4618      	mov	r0, r3
 8008d66:	f002 fa95 	bl	800b294 <RCCEx_PLL3_Config>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d70:	e006      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d78:	e002      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008d7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d10b      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d88:	4b8e      	ldr	r3, [pc, #568]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d8c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d94:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d98:	4a8a      	ldr	r2, [pc, #552]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d9a:	430b      	orrs	r3, r1
 8008d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d9e:	e003      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008da4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008db4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008db8:	2300      	movs	r3, #0
 8008dba:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008dbe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	d03a      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008dce:	2b30      	cmp	r3, #48	@ 0x30
 8008dd0:	d01f      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008dd2:	2b30      	cmp	r3, #48	@ 0x30
 8008dd4:	d819      	bhi.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d00c      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008dda:	2b20      	cmp	r3, #32
 8008ddc:	d815      	bhi.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d019      	beq.n	8008e16 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008de2:	2b10      	cmp	r3, #16
 8008de4:	d111      	bne.n	8008e0a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de6:	4b77      	ldr	r3, [pc, #476]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dea:	4a76      	ldr	r2, [pc, #472]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008df0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008df2:	e011      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df8:	3308      	adds	r3, #8
 8008dfa:	2102      	movs	r1, #2
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f002 f997 	bl	800b130 <RCCEx_PLL2_Config>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008e08:	e006      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e10:	e002      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008e12:	bf00      	nop
 8008e14:	e000      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008e16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d10a      	bne.n	8008e36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e20:	4b68      	ldr	r3, [pc, #416]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e24:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e2e:	4a65      	ldr	r2, [pc, #404]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e30:	430b      	orrs	r3, r1
 8008e32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e34:	e003      	b.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008e4a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e4e:	2300      	movs	r3, #0
 8008e50:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e54:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	d051      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e68:	d035      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008e6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e6e:	d82e      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e70:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e74:	d031      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008e76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008e7a:	d828      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e80:	d01a      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008e86:	d822      	bhi.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e90:	d007      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008e92:	e01c      	b.n	8008ece <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e94:	4b4b      	ldr	r3, [pc, #300]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e98:	4a4a      	ldr	r2, [pc, #296]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ea0:	e01c      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea6:	3308      	adds	r3, #8
 8008ea8:	2100      	movs	r1, #0
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f002 f940 	bl	800b130 <RCCEx_PLL2_Config>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008eb6:	e011      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ebc:	3328      	adds	r3, #40	@ 0x28
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f002 f9e7 	bl	800b294 <RCCEx_PLL3_Config>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ecc:	e006      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ed4:	e002      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008ed6:	bf00      	nop
 8008ed8:	e000      	b.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008eda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008edc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d10a      	bne.n	8008efa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008ee4:	4b37      	ldr	r3, [pc, #220]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ee6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ee8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ef2:	4a34      	ldr	r2, [pc, #208]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ef4:	430b      	orrs	r3, r1
 8008ef6:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ef8:	e003      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008f0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f12:	2300      	movs	r3, #0
 8008f14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	d056      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f2c:	d033      	beq.n	8008f96 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008f2e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f32:	d82c      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f38:	d02f      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008f3a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f3e:	d826      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f44:	d02b      	beq.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008f46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f4a:	d820      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f4c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f50:	d012      	beq.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008f52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f56:	d81a      	bhi.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d022      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f60:	d115      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f66:	3308      	adds	r3, #8
 8008f68:	2101      	movs	r1, #1
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f002 f8e0 	bl	800b130 <RCCEx_PLL2_Config>
 8008f70:	4603      	mov	r3, r0
 8008f72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f76:	e015      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7c:	3328      	adds	r3, #40	@ 0x28
 8008f7e:	2101      	movs	r1, #1
 8008f80:	4618      	mov	r0, r3
 8008f82:	f002 f987 	bl	800b294 <RCCEx_PLL3_Config>
 8008f86:	4603      	mov	r3, r0
 8008f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f8c:	e00a      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f94:	e006      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f96:	bf00      	nop
 8008f98:	e004      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f9a:	bf00      	nop
 8008f9c:	e002      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f9e:	bf00      	nop
 8008fa0:	e000      	b.n	8008fa4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10d      	bne.n	8008fc8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fac:	4b05      	ldr	r3, [pc, #20]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fba:	4a02      	ldr	r2, [pc, #8]	@ (8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fc0:	e006      	b.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008fc2:	bf00      	nop
 8008fc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008fe6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008fea:	460b      	mov	r3, r1
 8008fec:	4313      	orrs	r3, r2
 8008fee:	d055      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008ffc:	d033      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008ffe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009002:	d82c      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009008:	d02f      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800900a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800900e:	d826      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009010:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009014:	d02b      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009016:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800901a:	d820      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800901c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009020:	d012      	beq.n	8009048 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009026:	d81a      	bhi.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d022      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800902c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009030:	d115      	bne.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009036:	3308      	adds	r3, #8
 8009038:	2101      	movs	r1, #1
 800903a:	4618      	mov	r0, r3
 800903c:	f002 f878 	bl	800b130 <RCCEx_PLL2_Config>
 8009040:	4603      	mov	r3, r0
 8009042:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009046:	e015      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800904c:	3328      	adds	r3, #40	@ 0x28
 800904e:	2101      	movs	r1, #1
 8009050:	4618      	mov	r0, r3
 8009052:	f002 f91f 	bl	800b294 <RCCEx_PLL3_Config>
 8009056:	4603      	mov	r3, r0
 8009058:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800905c:	e00a      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009064:	e006      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009066:	bf00      	nop
 8009068:	e004      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800906a:	bf00      	nop
 800906c:	e002      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800906e:	bf00      	nop
 8009070:	e000      	b.n	8009074 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10b      	bne.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800907c:	4ba3      	ldr	r3, [pc, #652]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800907e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009080:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009088:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800908c:	4a9f      	ldr	r2, [pc, #636]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800908e:	430b      	orrs	r3, r1
 8009090:	6593      	str	r3, [r2, #88]	@ 0x58
 8009092:	e003      	b.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800909c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80090a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090ac:	2300      	movs	r3, #0
 80090ae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090b6:	460b      	mov	r3, r1
 80090b8:	4313      	orrs	r3, r2
 80090ba:	d037      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80090bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c6:	d00e      	beq.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80090c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090cc:	d816      	bhi.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x700>
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d018      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80090d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090d6:	d111      	bne.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090d8:	4b8c      	ldr	r3, [pc, #560]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090dc:	4a8b      	ldr	r2, [pc, #556]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80090e4:	e00f      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090ea:	3308      	adds	r3, #8
 80090ec:	2101      	movs	r1, #1
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 f81e 	bl	800b130 <RCCEx_PLL2_Config>
 80090f4:	4603      	mov	r3, r0
 80090f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80090fa:	e004      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009102:	e000      	b.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10a      	bne.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800910e:	4b7f      	ldr	r3, [pc, #508]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009112:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800911c:	4a7b      	ldr	r2, [pc, #492]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800911e:	430b      	orrs	r3, r1
 8009120:	6513      	str	r3, [r2, #80]	@ 0x50
 8009122:	e003      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009138:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800913c:	2300      	movs	r3, #0
 800913e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009142:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009146:	460b      	mov	r3, r1
 8009148:	4313      	orrs	r3, r2
 800914a:	d039      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800914c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009150:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009152:	2b03      	cmp	r3, #3
 8009154:	d81c      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009156:	a201      	add	r2, pc, #4	@ (adr r2, 800915c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009199 	.word	0x08009199
 8009160:	0800916d 	.word	0x0800916d
 8009164:	0800917b 	.word	0x0800917b
 8009168:	08009199 	.word	0x08009199
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800916c:	4b67      	ldr	r3, [pc, #412]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009170:	4a66      	ldr	r2, [pc, #408]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009178:	e00f      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800917a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800917e:	3308      	adds	r3, #8
 8009180:	2102      	movs	r1, #2
 8009182:	4618      	mov	r0, r3
 8009184:	f001 ffd4 	bl	800b130 <RCCEx_PLL2_Config>
 8009188:	4603      	mov	r3, r0
 800918a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800918e:	e004      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009196:	e000      	b.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800919a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d10a      	bne.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091a2:	4b5a      	ldr	r3, [pc, #360]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091a6:	f023 0103 	bic.w	r1, r3, #3
 80091aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091b0:	4a56      	ldr	r2, [pc, #344]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091b2:	430b      	orrs	r3, r1
 80091b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091b6:	e003      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80091cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80091d0:	2300      	movs	r3, #0
 80091d2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80091d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80091da:	460b      	mov	r3, r1
 80091dc:	4313      	orrs	r3, r2
 80091de:	f000 809f 	beq.w	8009320 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091e2:	4b4b      	ldr	r3, [pc, #300]	@ (8009310 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a4a      	ldr	r2, [pc, #296]	@ (8009310 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80091e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80091ee:	f7f9 fddf 	bl	8002db0 <HAL_GetTick>
 80091f2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091f6:	e00b      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091f8:	f7f9 fdda 	bl	8002db0 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009202:	1ad3      	subs	r3, r2, r3
 8009204:	2b64      	cmp	r3, #100	@ 0x64
 8009206:	d903      	bls.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009208:	2303      	movs	r3, #3
 800920a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800920e:	e005      	b.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009210:	4b3f      	ldr	r3, [pc, #252]	@ (8009310 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009218:	2b00      	cmp	r3, #0
 800921a:	d0ed      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800921c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009220:	2b00      	cmp	r3, #0
 8009222:	d179      	bne.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009224:	4b39      	ldr	r3, [pc, #228]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009226:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009228:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800922c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009230:	4053      	eors	r3, r2
 8009232:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009236:	2b00      	cmp	r3, #0
 8009238:	d015      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800923a:	4b34      	ldr	r3, [pc, #208]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800923c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800923e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009242:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009246:	4b31      	ldr	r3, [pc, #196]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800924a:	4a30      	ldr	r2, [pc, #192]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800924c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009250:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009252:	4b2e      	ldr	r3, [pc, #184]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009256:	4a2d      	ldr	r2, [pc, #180]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800925c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800925e:	4a2b      	ldr	r2, [pc, #172]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009264:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800926e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009272:	d118      	bne.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009274:	f7f9 fd9c 	bl	8002db0 <HAL_GetTick>
 8009278:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800927c:	e00d      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800927e:	f7f9 fd97 	bl	8002db0 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009288:	1ad2      	subs	r2, r2, r3
 800928a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800928e:	429a      	cmp	r2, r3
 8009290:	d903      	bls.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009298:	e005      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800929a:	4b1c      	ldr	r3, [pc, #112]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800929c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800929e:	f003 0302 	and.w	r3, r3, #2
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0eb      	beq.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80092a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d129      	bne.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092be:	d10e      	bne.n	80092de <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80092c0:	4b12      	ldr	r3, [pc, #72]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80092c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092d0:	091a      	lsrs	r2, r3, #4
 80092d2:	4b10      	ldr	r3, [pc, #64]	@ (8009314 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80092d4:	4013      	ands	r3, r2
 80092d6:	4a0d      	ldr	r2, [pc, #52]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092d8:	430b      	orrs	r3, r1
 80092da:	6113      	str	r3, [r2, #16]
 80092dc:	e005      	b.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80092de:	4b0b      	ldr	r3, [pc, #44]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	4a0a      	ldr	r2, [pc, #40]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80092e8:	6113      	str	r3, [r2, #16]
 80092ea:	4b08      	ldr	r3, [pc, #32]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092ec:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092fa:	4a04      	ldr	r2, [pc, #16]	@ (800930c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092fc:	430b      	orrs	r3, r1
 80092fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8009300:	e00e      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800930a:	e009      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800930c:	58024400 	.word	0x58024400
 8009310:	58024800 	.word	0x58024800
 8009314:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009318:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800931c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009328:	f002 0301 	and.w	r3, r2, #1
 800932c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009330:	2300      	movs	r3, #0
 8009332:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009336:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800933a:	460b      	mov	r3, r1
 800933c:	4313      	orrs	r3, r2
 800933e:	f000 8089 	beq.w	8009454 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009348:	2b28      	cmp	r3, #40	@ 0x28
 800934a:	d86b      	bhi.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800934c:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800934e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009352:	bf00      	nop
 8009354:	0800942d 	.word	0x0800942d
 8009358:	08009425 	.word	0x08009425
 800935c:	08009425 	.word	0x08009425
 8009360:	08009425 	.word	0x08009425
 8009364:	08009425 	.word	0x08009425
 8009368:	08009425 	.word	0x08009425
 800936c:	08009425 	.word	0x08009425
 8009370:	08009425 	.word	0x08009425
 8009374:	080093f9 	.word	0x080093f9
 8009378:	08009425 	.word	0x08009425
 800937c:	08009425 	.word	0x08009425
 8009380:	08009425 	.word	0x08009425
 8009384:	08009425 	.word	0x08009425
 8009388:	08009425 	.word	0x08009425
 800938c:	08009425 	.word	0x08009425
 8009390:	08009425 	.word	0x08009425
 8009394:	0800940f 	.word	0x0800940f
 8009398:	08009425 	.word	0x08009425
 800939c:	08009425 	.word	0x08009425
 80093a0:	08009425 	.word	0x08009425
 80093a4:	08009425 	.word	0x08009425
 80093a8:	08009425 	.word	0x08009425
 80093ac:	08009425 	.word	0x08009425
 80093b0:	08009425 	.word	0x08009425
 80093b4:	0800942d 	.word	0x0800942d
 80093b8:	08009425 	.word	0x08009425
 80093bc:	08009425 	.word	0x08009425
 80093c0:	08009425 	.word	0x08009425
 80093c4:	08009425 	.word	0x08009425
 80093c8:	08009425 	.word	0x08009425
 80093cc:	08009425 	.word	0x08009425
 80093d0:	08009425 	.word	0x08009425
 80093d4:	0800942d 	.word	0x0800942d
 80093d8:	08009425 	.word	0x08009425
 80093dc:	08009425 	.word	0x08009425
 80093e0:	08009425 	.word	0x08009425
 80093e4:	08009425 	.word	0x08009425
 80093e8:	08009425 	.word	0x08009425
 80093ec:	08009425 	.word	0x08009425
 80093f0:	08009425 	.word	0x08009425
 80093f4:	0800942d 	.word	0x0800942d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fc:	3308      	adds	r3, #8
 80093fe:	2101      	movs	r1, #1
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fe95 	bl	800b130 <RCCEx_PLL2_Config>
 8009406:	4603      	mov	r3, r0
 8009408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800940c:	e00f      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800940e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009412:	3328      	adds	r3, #40	@ 0x28
 8009414:	2101      	movs	r1, #1
 8009416:	4618      	mov	r0, r3
 8009418:	f001 ff3c 	bl	800b294 <RCCEx_PLL3_Config>
 800941c:	4603      	mov	r3, r0
 800941e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009422:	e004      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800942a:	e000      	b.n	800942e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800942c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800942e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10a      	bne.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009436:	4bbf      	ldr	r3, [pc, #764]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800943a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800943e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009442:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009444:	4abb      	ldr	r2, [pc, #748]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009446:	430b      	orrs	r3, r1
 8009448:	6553      	str	r3, [r2, #84]	@ 0x54
 800944a:	e003      	b.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800944c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	f002 0302 	and.w	r3, r2, #2
 8009460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009464:	2300      	movs	r3, #0
 8009466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800946a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800946e:	460b      	mov	r3, r1
 8009470:	4313      	orrs	r3, r2
 8009472:	d041      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009478:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800947a:	2b05      	cmp	r3, #5
 800947c:	d824      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800947e:	a201      	add	r2, pc, #4	@ (adr r2, 8009484 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009484:	080094d1 	.word	0x080094d1
 8009488:	0800949d 	.word	0x0800949d
 800948c:	080094b3 	.word	0x080094b3
 8009490:	080094d1 	.word	0x080094d1
 8009494:	080094d1 	.word	0x080094d1
 8009498:	080094d1 	.word	0x080094d1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a0:	3308      	adds	r3, #8
 80094a2:	2101      	movs	r1, #1
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 fe43 	bl	800b130 <RCCEx_PLL2_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094b0:	e00f      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094b6:	3328      	adds	r3, #40	@ 0x28
 80094b8:	2101      	movs	r1, #1
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 feea 	bl	800b294 <RCCEx_PLL3_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094c6:	e004      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094ce:	e000      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80094d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10a      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80094da:	4b96      	ldr	r3, [pc, #600]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094de:	f023 0107 	bic.w	r1, r3, #7
 80094e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094e8:	4a92      	ldr	r2, [pc, #584]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094ea:	430b      	orrs	r3, r1
 80094ec:	6553      	str	r3, [r2, #84]	@ 0x54
 80094ee:	e003      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f002 0304 	and.w	r3, r2, #4
 8009504:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009508:	2300      	movs	r3, #0
 800950a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800950e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009512:	460b      	mov	r3, r1
 8009514:	4313      	orrs	r3, r2
 8009516:	d044      	beq.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009520:	2b05      	cmp	r3, #5
 8009522:	d825      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009524:	a201      	add	r2, pc, #4	@ (adr r2, 800952c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	08009579 	.word	0x08009579
 8009530:	08009545 	.word	0x08009545
 8009534:	0800955b 	.word	0x0800955b
 8009538:	08009579 	.word	0x08009579
 800953c:	08009579 	.word	0x08009579
 8009540:	08009579 	.word	0x08009579
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009548:	3308      	adds	r3, #8
 800954a:	2101      	movs	r1, #1
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fdef 	bl	800b130 <RCCEx_PLL2_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009558:	e00f      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955e:	3328      	adds	r3, #40	@ 0x28
 8009560:	2101      	movs	r1, #1
 8009562:	4618      	mov	r0, r3
 8009564:	f001 fe96 	bl	800b294 <RCCEx_PLL3_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800956e:	e004      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009576:	e000      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800957a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10b      	bne.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009582:	4b6c      	ldr	r3, [pc, #432]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009586:	f023 0107 	bic.w	r1, r3, #7
 800958a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800958e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009592:	4a68      	ldr	r2, [pc, #416]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009594:	430b      	orrs	r3, r1
 8009596:	6593      	str	r3, [r2, #88]	@ 0x58
 8009598:	e003      	b.n	80095a2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800959e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095aa:	f002 0320 	and.w	r3, r2, #32
 80095ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095b2:	2300      	movs	r3, #0
 80095b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095bc:	460b      	mov	r3, r1
 80095be:	4313      	orrs	r3, r2
 80095c0:	d055      	beq.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80095c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095ce:	d033      	beq.n	8009638 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80095d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095d4:	d82c      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80095d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095da:	d02f      	beq.n	800963c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80095dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095e0:	d826      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80095e2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095e6:	d02b      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80095e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80095ec:	d820      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80095ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095f2:	d012      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80095f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095f8:	d81a      	bhi.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d022      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80095fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009602:	d115      	bne.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009608:	3308      	adds	r3, #8
 800960a:	2100      	movs	r1, #0
 800960c:	4618      	mov	r0, r3
 800960e:	f001 fd8f 	bl	800b130 <RCCEx_PLL2_Config>
 8009612:	4603      	mov	r3, r0
 8009614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009618:	e015      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961e:	3328      	adds	r3, #40	@ 0x28
 8009620:	2102      	movs	r1, #2
 8009622:	4618      	mov	r0, r3
 8009624:	f001 fe36 	bl	800b294 <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800962e:	e00a      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009630:	2301      	movs	r3, #1
 8009632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009636:	e006      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009638:	bf00      	nop
 800963a:	e004      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800963c:	bf00      	nop
 800963e:	e002      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009640:	bf00      	nop
 8009642:	e000      	b.n	8009646 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009644:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800964a:	2b00      	cmp	r3, #0
 800964c:	d10b      	bne.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800964e:	4b39      	ldr	r3, [pc, #228]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009652:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800965e:	4a35      	ldr	r2, [pc, #212]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009660:	430b      	orrs	r3, r1
 8009662:	6553      	str	r3, [r2, #84]	@ 0x54
 8009664:	e003      	b.n	800966e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800966a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800966e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009676:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800967a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800967e:	2300      	movs	r3, #0
 8009680:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009684:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009688:	460b      	mov	r3, r1
 800968a:	4313      	orrs	r3, r2
 800968c:	d058      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800968e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009692:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009696:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800969a:	d033      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800969c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096a0:	d82c      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096a6:	d02f      	beq.n	8009708 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80096a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ac:	d826      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096b2:	d02b      	beq.n	800970c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80096b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096b8:	d820      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096be:	d012      	beq.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80096c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096c4:	d81a      	bhi.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d022      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80096ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096ce:	d115      	bne.n	80096fc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d4:	3308      	adds	r3, #8
 80096d6:	2100      	movs	r1, #0
 80096d8:	4618      	mov	r0, r3
 80096da:	f001 fd29 	bl	800b130 <RCCEx_PLL2_Config>
 80096de:	4603      	mov	r3, r0
 80096e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80096e4:	e015      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ea:	3328      	adds	r3, #40	@ 0x28
 80096ec:	2102      	movs	r1, #2
 80096ee:	4618      	mov	r0, r3
 80096f0:	f001 fdd0 	bl	800b294 <RCCEx_PLL3_Config>
 80096f4:	4603      	mov	r3, r0
 80096f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80096fa:	e00a      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009702:	e006      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009704:	bf00      	nop
 8009706:	e004      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009708:	bf00      	nop
 800970a:	e002      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800970c:	bf00      	nop
 800970e:	e000      	b.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009710:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10e      	bne.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800971a:	4b06      	ldr	r3, [pc, #24]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800971c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800971e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009722:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009726:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800972a:	4a02      	ldr	r2, [pc, #8]	@ (8009734 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800972c:	430b      	orrs	r3, r1
 800972e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009730:	e006      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009732:	bf00      	nop
 8009734:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800973c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800974c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009750:	2300      	movs	r3, #0
 8009752:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009756:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800975a:	460b      	mov	r3, r1
 800975c:	4313      	orrs	r3, r2
 800975e:	d055      	beq.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009764:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009768:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800976c:	d033      	beq.n	80097d6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800976e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009772:	d82c      	bhi.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009778:	d02f      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800977a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800977e:	d826      	bhi.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009780:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009784:	d02b      	beq.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009786:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800978a:	d820      	bhi.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800978c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009790:	d012      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009792:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009796:	d81a      	bhi.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009798:	2b00      	cmp	r3, #0
 800979a:	d022      	beq.n	80097e2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800979c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097a0:	d115      	bne.n	80097ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a6:	3308      	adds	r3, #8
 80097a8:	2100      	movs	r1, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f001 fcc0 	bl	800b130 <RCCEx_PLL2_Config>
 80097b0:	4603      	mov	r3, r0
 80097b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097b6:	e015      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097bc:	3328      	adds	r3, #40	@ 0x28
 80097be:	2102      	movs	r1, #2
 80097c0:	4618      	mov	r0, r3
 80097c2:	f001 fd67 	bl	800b294 <RCCEx_PLL3_Config>
 80097c6:	4603      	mov	r3, r0
 80097c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097cc:	e00a      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097d4:	e006      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80097d6:	bf00      	nop
 80097d8:	e004      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80097da:	bf00      	nop
 80097dc:	e002      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80097de:	bf00      	nop
 80097e0:	e000      	b.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80097e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d10b      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80097ec:	4ba1      	ldr	r3, [pc, #644]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097f0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80097f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80097fc:	4a9d      	ldr	r2, [pc, #628]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097fe:	430b      	orrs	r3, r1
 8009800:	6593      	str	r3, [r2, #88]	@ 0x58
 8009802:	e003      	b.n	800980c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009808:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800980c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f002 0308 	and.w	r3, r2, #8
 8009818:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800981c:	2300      	movs	r3, #0
 800981e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009822:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009826:	460b      	mov	r3, r1
 8009828:	4313      	orrs	r3, r2
 800982a:	d01e      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800982c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009830:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009834:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009838:	d10c      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800983a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983e:	3328      	adds	r3, #40	@ 0x28
 8009840:	2102      	movs	r1, #2
 8009842:	4618      	mov	r0, r3
 8009844:	f001 fd26 	bl	800b294 <RCCEx_PLL3_Config>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d002      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009854:	4b87      	ldr	r3, [pc, #540]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009858:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800985c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009860:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009864:	4a83      	ldr	r2, [pc, #524]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009866:	430b      	orrs	r3, r1
 8009868:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800986a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800986e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009872:	f002 0310 	and.w	r3, r2, #16
 8009876:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800987a:	2300      	movs	r3, #0
 800987c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009880:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009884:	460b      	mov	r3, r1
 8009886:	4313      	orrs	r3, r2
 8009888:	d01e      	beq.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009892:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009896:	d10c      	bne.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800989c:	3328      	adds	r3, #40	@ 0x28
 800989e:	2102      	movs	r1, #2
 80098a0:	4618      	mov	r0, r3
 80098a2:	f001 fcf7 	bl	800b294 <RCCEx_PLL3_Config>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098b2:	4b70      	ldr	r3, [pc, #448]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098c2:	4a6c      	ldr	r2, [pc, #432]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098c4:	430b      	orrs	r3, r1
 80098c6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80098d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098d8:	2300      	movs	r3, #0
 80098da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098de:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80098e2:	460b      	mov	r3, r1
 80098e4:	4313      	orrs	r3, r2
 80098e6:	d03e      	beq.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80098e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80098f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098f4:	d022      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80098f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098fa:	d81b      	bhi.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d003      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009904:	d00b      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009906:	e015      	b.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800990c:	3308      	adds	r3, #8
 800990e:	2100      	movs	r1, #0
 8009910:	4618      	mov	r0, r3
 8009912:	f001 fc0d 	bl	800b130 <RCCEx_PLL2_Config>
 8009916:	4603      	mov	r3, r0
 8009918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800991c:	e00f      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800991e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009922:	3328      	adds	r3, #40	@ 0x28
 8009924:	2102      	movs	r1, #2
 8009926:	4618      	mov	r0, r3
 8009928:	f001 fcb4 	bl	800b294 <RCCEx_PLL3_Config>
 800992c:	4603      	mov	r3, r0
 800992e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009932:	e004      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800993a:	e000      	b.n	800993e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800993c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800993e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009946:	4b4b      	ldr	r3, [pc, #300]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800994e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009952:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009956:	4a47      	ldr	r2, [pc, #284]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009958:	430b      	orrs	r3, r1
 800995a:	6593      	str	r3, [r2, #88]	@ 0x58
 800995c:	e003      	b.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800995e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800996a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800996e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009972:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009974:	2300      	movs	r3, #0
 8009976:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009978:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800997c:	460b      	mov	r3, r1
 800997e:	4313      	orrs	r3, r2
 8009980:	d03b      	beq.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800998a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800998e:	d01f      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009990:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009994:	d818      	bhi.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800999a:	d003      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800999c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099a0:	d007      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80099a2:	e011      	b.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a4:	4b33      	ldr	r3, [pc, #204]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a8:	4a32      	ldr	r2, [pc, #200]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80099b0:	e00f      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b6:	3328      	adds	r3, #40	@ 0x28
 80099b8:	2101      	movs	r1, #1
 80099ba:	4618      	mov	r0, r3
 80099bc:	f001 fc6a 	bl	800b294 <RCCEx_PLL3_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80099c6:	e004      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099ce:	e000      	b.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80099d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10b      	bne.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099da:	4b26      	ldr	r3, [pc, #152]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099de:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099ea:	4a22      	ldr	r2, [pc, #136]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ec:	430b      	orrs	r3, r1
 80099ee:	6553      	str	r3, [r2, #84]	@ 0x54
 80099f0:	e003      	b.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80099fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a02:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009a06:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a08:	2300      	movs	r3, #0
 8009a0a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a0c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a10:	460b      	mov	r3, r1
 8009a12:	4313      	orrs	r3, r2
 8009a14:	d034      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d003      	beq.n	8009a28 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a24:	d007      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009a26:	e011      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a28:	4b12      	ldr	r3, [pc, #72]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a2c:	4a11      	ldr	r2, [pc, #68]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a34:	e00e      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	2102      	movs	r1, #2
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f001 fb76 	bl	800b130 <RCCEx_PLL2_Config>
 8009a44:	4603      	mov	r3, r0
 8009a46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a4a:	e003      	b.n	8009a54 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10d      	bne.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a5c:	4b05      	ldr	r3, [pc, #20]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a60:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a6a:	4a02      	ldr	r2, [pc, #8]	@ (8009a74 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a6c:	430b      	orrs	r3, r1
 8009a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009a70:	e006      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009a72:	bf00      	nop
 8009a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a88:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a8e:	2300      	movs	r3, #0
 8009a90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a92:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009a96:	460b      	mov	r3, r1
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	d00c      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa0:	3328      	adds	r3, #40	@ 0x28
 8009aa2:	2102      	movs	r1, #2
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 fbf5 	bl	800b294 <RCCEx_PLL3_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009ac2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ac8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009acc:	460b      	mov	r3, r1
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	d038      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ade:	d018      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009ae0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ae4:	d811      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ae6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009aea:	d014      	beq.n	8009b16 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009aec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af0:	d80b      	bhi.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d011      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009af6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009afa:	d106      	bne.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009afc:	4bc3      	ldr	r3, [pc, #780]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b00:	4ac2      	ldr	r2, [pc, #776]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009b08:	e008      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b10:	e004      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b12:	bf00      	nop
 8009b14:	e002      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b16:	bf00      	nop
 8009b18:	e000      	b.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10b      	bne.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b24:	4bb9      	ldr	r3, [pc, #740]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b28:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b34:	4ab5      	ldr	r2, [pc, #724]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b36:	430b      	orrs	r3, r1
 8009b38:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b3a:	e003      	b.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009b50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b52:	2300      	movs	r3, #0
 8009b54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b56:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	d009      	beq.n	8009b74 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009b60:	4baa      	ldr	r3, [pc, #680]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b64:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009b6e:	4aa7      	ldr	r2, [pc, #668]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b70:	430b      	orrs	r3, r1
 8009b72:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009b80:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b82:	2300      	movs	r3, #0
 8009b84:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b86:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	d00a      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009b90:	4b9e      	ldr	r3, [pc, #632]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009ba0:	4a9a      	ldr	r2, [pc, #616]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ba2:	430b      	orrs	r3, r1
 8009ba4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bb8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	d009      	beq.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009bc2:	4b92      	ldr	r3, [pc, #584]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bc6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009bd0:	4a8e      	ldr	r2, [pc, #568]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bd2:	430b      	orrs	r3, r1
 8009bd4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009be2:	643b      	str	r3, [r7, #64]	@ 0x40
 8009be4:	2300      	movs	r3, #0
 8009be6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009be8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009bec:	460b      	mov	r3, r1
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	d00e      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009bf2:	4b86      	ldr	r3, [pc, #536]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bf4:	691b      	ldr	r3, [r3, #16]
 8009bf6:	4a85      	ldr	r2, [pc, #532]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bf8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009bfc:	6113      	str	r3, [r2, #16]
 8009bfe:	4b83      	ldr	r3, [pc, #524]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c00:	6919      	ldr	r1, [r3, #16]
 8009c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c0a:	4a80      	ldr	r2, [pc, #512]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c0c:	430b      	orrs	r3, r1
 8009c0e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c18:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c1e:	2300      	movs	r3, #0
 8009c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c22:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009c26:	460b      	mov	r3, r1
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	d009      	beq.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c2c:	4b77      	ldr	r3, [pc, #476]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c30:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c3a:	4a74      	ldr	r2, [pc, #464]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009c4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c4e:	2300      	movs	r3, #0
 8009c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c52:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009c56:	460b      	mov	r3, r1
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	d00a      	beq.n	8009c72 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c5c:	4b6b      	ldr	r3, [pc, #428]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c60:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009c6c:	4a67      	ldr	r2, [pc, #412]	@ (8009e0c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c6e:	430b      	orrs	r3, r1
 8009c70:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7a:	2100      	movs	r1, #0
 8009c7c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009c7e:	f003 0301 	and.w	r3, r3, #1
 8009c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009c84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	d011      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c92:	3308      	adds	r3, #8
 8009c94:	2100      	movs	r1, #0
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fa4a 	bl	800b130 <RCCEx_PLL2_Config>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009ca2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	6239      	str	r1, [r7, #32]
 8009cbe:	f003 0302 	and.w	r3, r3, #2
 8009cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cc4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	d011      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f001 fa2a 	bl	800b130 <RCCEx_PLL2_Config>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	61b9      	str	r1, [r7, #24]
 8009cfe:	f003 0304 	and.w	r3, r3, #4
 8009d02:	61fb      	str	r3, [r7, #28]
 8009d04:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	d011      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d12:	3308      	adds	r3, #8
 8009d14:	2102      	movs	r1, #2
 8009d16:	4618      	mov	r0, r3
 8009d18:	f001 fa0a 	bl	800b130 <RCCEx_PLL2_Config>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	2100      	movs	r1, #0
 8009d3c:	6139      	str	r1, [r7, #16]
 8009d3e:	f003 0308 	and.w	r3, r3, #8
 8009d42:	617b      	str	r3, [r7, #20]
 8009d44:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	d011      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d52:	3328      	adds	r3, #40	@ 0x28
 8009d54:	2100      	movs	r1, #0
 8009d56:	4618      	mov	r0, r3
 8009d58:	f001 fa9c 	bl	800b294 <RCCEx_PLL3_Config>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009d62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	f003 0310 	and.w	r3, r3, #16
 8009d82:	60fb      	str	r3, [r7, #12]
 8009d84:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009d88:	460b      	mov	r3, r1
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	d011      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d92:	3328      	adds	r3, #40	@ 0x28
 8009d94:	2101      	movs	r1, #1
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 fa7c 	bl	800b294 <RCCEx_PLL3_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	2100      	movs	r1, #0
 8009dbc:	6039      	str	r1, [r7, #0]
 8009dbe:	f003 0320 	and.w	r3, r3, #32
 8009dc2:	607b      	str	r3, [r7, #4]
 8009dc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	d011      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd2:	3328      	adds	r3, #40	@ 0x28
 8009dd4:	2102      	movs	r1, #2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 fa5c 	bl	800b294 <RCCEx_PLL3_Config>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d003      	beq.n	8009df2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009df2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e000      	b.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009e06:	46bd      	mov	sp, r7
 8009e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e0c:	58024400 	.word	0x58024400

08009e10 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b090      	sub	sp, #64	@ 0x40
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009e1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e1e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009e22:	430b      	orrs	r3, r1
 8009e24:	f040 8094 	bne.w	8009f50 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009e28:	4b9e      	ldr	r3, [pc, #632]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e2c:	f003 0307 	and.w	r3, r3, #7
 8009e30:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e34:	2b04      	cmp	r3, #4
 8009e36:	f200 8087 	bhi.w	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e40 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009e55 	.word	0x08009e55
 8009e44:	08009e7d 	.word	0x08009e7d
 8009e48:	08009ea5 	.word	0x08009ea5
 8009e4c:	08009f41 	.word	0x08009f41
 8009e50:	08009ecd 	.word	0x08009ecd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e54:	4b93      	ldr	r3, [pc, #588]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e5c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e60:	d108      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e66:	4618      	mov	r0, r3
 8009e68:	f001 f810 	bl	800ae8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e70:	f000 bd45 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e74:	2300      	movs	r3, #0
 8009e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e78:	f000 bd41 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009e7c:	4b89      	ldr	r3, [pc, #548]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009e84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e88:	d108      	bne.n	8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009e8a:	f107 0318 	add.w	r3, r7, #24
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 fd54 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009e94:	69bb      	ldr	r3, [r7, #24]
 8009e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e98:	f000 bd31 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea0:	f000 bd2d 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ea4:	4b7f      	ldr	r3, [pc, #508]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009eac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009eb0:	d108      	bne.n	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eb2:	f107 030c 	add.w	r3, r7, #12
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 fe94 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ec0:	f000 bd1d 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ec8:	f000 bd19 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009ecc:	4b75      	ldr	r3, [pc, #468]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ece:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ed0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ed4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ed6:	4b73      	ldr	r3, [pc, #460]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0304 	and.w	r3, r3, #4
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d10c      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d109      	bne.n	8009efc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009ee8:	4b6e      	ldr	r3, [pc, #440]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	08db      	lsrs	r3, r3, #3
 8009eee:	f003 0303 	and.w	r3, r3, #3
 8009ef2:	4a6d      	ldr	r2, [pc, #436]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009efa:	e01f      	b.n	8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009efc:	4b69      	ldr	r3, [pc, #420]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f08:	d106      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f10:	d102      	bne.n	8009f18 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f12:	4b66      	ldr	r3, [pc, #408]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f16:	e011      	b.n	8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f18:	4b62      	ldr	r3, [pc, #392]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f24:	d106      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f2c:	d102      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f2e:	4b60      	ldr	r3, [pc, #384]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f32:	e003      	b.n	8009f3c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f34:	2300      	movs	r3, #0
 8009f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f38:	f000 bce1 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f3c:	f000 bcdf 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f40:	4b5c      	ldr	r3, [pc, #368]	@ (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f44:	f000 bcdb 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f4c:	f000 bcd7 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f54:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009f58:	430b      	orrs	r3, r1
 8009f5a:	f040 80ad 	bne.w	800a0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009f5e:	4b51      	ldr	r3, [pc, #324]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f62:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009f66:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f6e:	d056      	beq.n	800a01e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f76:	f200 8090 	bhi.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f7c:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f7e:	f000 8088 	beq.w	800a092 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f84:	2bc0      	cmp	r3, #192	@ 0xc0
 8009f86:	f200 8088 	bhi.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f8c:	2b80      	cmp	r3, #128	@ 0x80
 8009f8e:	d032      	beq.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f92:	2b80      	cmp	r3, #128	@ 0x80
 8009f94:	f200 8081 	bhi.w	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa0:	2b40      	cmp	r3, #64	@ 0x40
 8009fa2:	d014      	beq.n	8009fce <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009fa4:	e079      	b.n	800a09a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fa6:	4b3f      	ldr	r3, [pc, #252]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fb2:	d108      	bne.n	8009fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 ff67 	bl	800ae8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fc2:	f000 bc9c 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fca:	f000 bc98 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009fce:	4b35      	ldr	r3, [pc, #212]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009fd6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009fda:	d108      	bne.n	8009fee <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fdc:	f107 0318 	add.w	r3, r7, #24
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f000 fcab 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009fea:	f000 bc88 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff2:	f000 bc84 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ff6:	4b2b      	ldr	r3, [pc, #172]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ffe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a002:	d108      	bne.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a004:	f107 030c 	add.w	r3, r7, #12
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 fdeb 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a012:	f000 bc74 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a016:	2300      	movs	r3, #0
 800a018:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a01a:	f000 bc70 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a01e:	4b21      	ldr	r3, [pc, #132]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a022:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a026:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a028:	4b1e      	ldr	r3, [pc, #120]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0304 	and.w	r3, r3, #4
 800a030:	2b04      	cmp	r3, #4
 800a032:	d10c      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a036:	2b00      	cmp	r3, #0
 800a038:	d109      	bne.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a03a:	4b1a      	ldr	r3, [pc, #104]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	08db      	lsrs	r3, r3, #3
 800a040:	f003 0303 	and.w	r3, r3, #3
 800a044:	4a18      	ldr	r2, [pc, #96]	@ (800a0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a046:	fa22 f303 	lsr.w	r3, r2, r3
 800a04a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a04c:	e01f      	b.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a04e:	4b15      	ldr	r3, [pc, #84]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a05a:	d106      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a05e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a062:	d102      	bne.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a064:	4b11      	ldr	r3, [pc, #68]	@ (800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a068:	e011      	b.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a06a:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a072:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a076:	d106      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a07a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a07e:	d102      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a080:	4b0b      	ldr	r3, [pc, #44]	@ (800a0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a084:	e003      	b.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a08a:	f000 bc38 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a08e:	f000 bc36 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a092:	4b08      	ldr	r3, [pc, #32]	@ (800a0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a096:	f000 bc32 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a09e:	f000 bc2e 	b.w	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0a2:	bf00      	nop
 800a0a4:	58024400 	.word	0x58024400
 800a0a8:	03d09000 	.word	0x03d09000
 800a0ac:	003d0900 	.word	0x003d0900
 800a0b0:	02dc6c00 	.word	0x02dc6c00
 800a0b4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0bc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a0c0:	430b      	orrs	r3, r1
 800a0c2:	f040 809c 	bne.w	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a0c6:	4b9e      	ldr	r3, [pc, #632]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ca:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a0ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0d6:	d054      	beq.n	800a182 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a0d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a0de:	f200 808b 	bhi.w	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0e4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0e8:	f000 8083 	beq.w	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0ee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a0f2:	f200 8081 	bhi.w	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0f8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a0fc:	d02f      	beq.n	800a15e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a0fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a100:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a104:	d878      	bhi.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d004      	beq.n	800a116 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a112:	d012      	beq.n	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a114:	e070      	b.n	800a1f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a116:	4b8a      	ldr	r3, [pc, #552]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a11e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a122:	d107      	bne.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a124:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 feaf 	bl	800ae8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a12e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a132:	e3e4      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a138:	e3e1      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a13a:	4b81      	ldr	r3, [pc, #516]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a142:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a146:	d107      	bne.n	800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a148:	f107 0318 	add.w	r3, r7, #24
 800a14c:	4618      	mov	r0, r3
 800a14e:	f000 fbf5 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a152:	69bb      	ldr	r3, [r7, #24]
 800a154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a156:	e3d2      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a158:	2300      	movs	r3, #0
 800a15a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a15c:	e3cf      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a15e:	4b78      	ldr	r3, [pc, #480]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a16a:	d107      	bne.n	800a17c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a16c:	f107 030c 	add.w	r3, r7, #12
 800a170:	4618      	mov	r0, r3
 800a172:	f000 fd37 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a17a:	e3c0      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a17c:	2300      	movs	r3, #0
 800a17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a180:	e3bd      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a182:	4b6f      	ldr	r3, [pc, #444]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a186:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a18a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a18c:	4b6c      	ldr	r3, [pc, #432]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f003 0304 	and.w	r3, r3, #4
 800a194:	2b04      	cmp	r3, #4
 800a196:	d10c      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d109      	bne.n	800a1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a19e:	4b68      	ldr	r3, [pc, #416]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	08db      	lsrs	r3, r3, #3
 800a1a4:	f003 0303 	and.w	r3, r3, #3
 800a1a8:	4a66      	ldr	r2, [pc, #408]	@ (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1b0:	e01e      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1b2:	4b63      	ldr	r3, [pc, #396]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1be:	d106      	bne.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1c6:	d102      	bne.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1c8:	4b5f      	ldr	r3, [pc, #380]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1cc:	e010      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a1ce:	4b5c      	ldr	r3, [pc, #368]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a1d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1da:	d106      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1e2:	d102      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a1e4:	4b59      	ldr	r3, [pc, #356]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a1e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1e8:	e002      	b.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a1ee:	e386      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a1f0:	e385      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a1f2:	4b57      	ldr	r3, [pc, #348]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a1f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1f6:	e382      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1fc:	e37f      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a1fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a202:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a206:	430b      	orrs	r3, r1
 800a208:	f040 80a7 	bne.w	800a35a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a20c:	4b4c      	ldr	r3, [pc, #304]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a20e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a210:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a214:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a218:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a21c:	d055      	beq.n	800a2ca <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a220:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a224:	f200 8096 	bhi.w	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a22a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a22e:	f000 8084 	beq.w	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a238:	f200 808c 	bhi.w	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a242:	d030      	beq.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a246:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a24a:	f200 8083 	bhi.w	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a250:	2b00      	cmp	r3, #0
 800a252:	d004      	beq.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a256:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a25a:	d012      	beq.n	800a282 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a25c:	e07a      	b.n	800a354 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a25e:	4b38      	ldr	r3, [pc, #224]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a266:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a26a:	d107      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a26c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a270:	4618      	mov	r0, r3
 800a272:	f000 fe0b 	bl	800ae8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a27a:	e340      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a280:	e33d      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a282:	4b2f      	ldr	r3, [pc, #188]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a28a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a28e:	d107      	bne.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a290:	f107 0318 	add.w	r3, r7, #24
 800a294:	4618      	mov	r0, r3
 800a296:	f000 fb51 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a29e:	e32e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a4:	e32b      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2a6:	4b26      	ldr	r3, [pc, #152]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2b2:	d107      	bne.n	800a2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2b4:	f107 030c 	add.w	r3, r7, #12
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f000 fc93 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2c2:	e31c      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2c8:	e319      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2ca:	4b1d      	ldr	r3, [pc, #116]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a2ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a2d2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f003 0304 	and.w	r3, r3, #4
 800a2dc:	2b04      	cmp	r3, #4
 800a2de:	d10c      	bne.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a2e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d109      	bne.n	800a2fa <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2e6:	4b16      	ldr	r3, [pc, #88]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	08db      	lsrs	r3, r3, #3
 800a2ec:	f003 0303 	and.w	r3, r3, #3
 800a2f0:	4a14      	ldr	r2, [pc, #80]	@ (800a344 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a2f2:	fa22 f303 	lsr.w	r3, r2, r3
 800a2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a2f8:	e01e      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2fa:	4b11      	ldr	r3, [pc, #68]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a306:	d106      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a30a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a30e:	d102      	bne.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a310:	4b0d      	ldr	r3, [pc, #52]	@ (800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a314:	e010      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a316:	4b0a      	ldr	r3, [pc, #40]	@ (800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a31e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a322:	d106      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a326:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a32a:	d102      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a32c:	4b07      	ldr	r3, [pc, #28]	@ (800a34c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a330:	e002      	b.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a336:	e2e2      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a338:	e2e1      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a33a:	4b05      	ldr	r3, [pc, #20]	@ (800a350 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33e:	e2de      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a340:	58024400 	.word	0x58024400
 800a344:	03d09000 	.word	0x03d09000
 800a348:	003d0900 	.word	0x003d0900
 800a34c:	02dc6c00 	.word	0x02dc6c00
 800a350:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a354:	2300      	movs	r3, #0
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a358:	e2d1      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a35a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a35e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a362:	430b      	orrs	r3, r1
 800a364:	f040 809c 	bne.w	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a368:	4b93      	ldr	r3, [pc, #588]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a36a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a36c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a370:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a374:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a378:	d054      	beq.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a37c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a380:	f200 808b 	bhi.w	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a386:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a38a:	f000 8083 	beq.w	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a390:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a394:	f200 8081 	bhi.w	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a39a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a39e:	d02f      	beq.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3a6:	d878      	bhi.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3b4:	d012      	beq.n	800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a3b6:	e070      	b.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3b8:	4b7f      	ldr	r3, [pc, #508]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3c4:	d107      	bne.n	800a3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fd5e 	bl	800ae8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a3d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3d4:	e293      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3da:	e290      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3dc:	4b76      	ldr	r3, [pc, #472]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a3e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a3e8:	d107      	bne.n	800a3fa <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ea:	f107 0318 	add.w	r3, r7, #24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f000 faa4 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3f8:	e281      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3fe:	e27e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a400:	4b6d      	ldr	r3, [pc, #436]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a408:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a40c:	d107      	bne.n	800a41e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a40e:	f107 030c 	add.w	r3, r7, #12
 800a412:	4618      	mov	r0, r3
 800a414:	f000 fbe6 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a41c:	e26f      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a41e:	2300      	movs	r3, #0
 800a420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a422:	e26c      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a424:	4b64      	ldr	r3, [pc, #400]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a428:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a42c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a42e:	4b62      	ldr	r3, [pc, #392]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f003 0304 	and.w	r3, r3, #4
 800a436:	2b04      	cmp	r3, #4
 800a438:	d10c      	bne.n	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a43a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d109      	bne.n	800a454 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a440:	4b5d      	ldr	r3, [pc, #372]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	08db      	lsrs	r3, r3, #3
 800a446:	f003 0303 	and.w	r3, r3, #3
 800a44a:	4a5c      	ldr	r2, [pc, #368]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a44c:	fa22 f303 	lsr.w	r3, r2, r3
 800a450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a452:	e01e      	b.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a454:	4b58      	ldr	r3, [pc, #352]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a45c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a460:	d106      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a464:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a468:	d102      	bne.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a46a:	4b55      	ldr	r3, [pc, #340]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a46c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a46e:	e010      	b.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a470:	4b51      	ldr	r3, [pc, #324]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a478:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a47c:	d106      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a47e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a484:	d102      	bne.n	800a48c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a486:	4b4f      	ldr	r3, [pc, #316]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a48a:	e002      	b.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a48c:	2300      	movs	r3, #0
 800a48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a490:	e235      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a492:	e234      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a494:	4b4c      	ldr	r3, [pc, #304]	@ (800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a496:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a498:	e231      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a49e:	e22e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a4:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a4a8:	430b      	orrs	r3, r1
 800a4aa:	f040 808f 	bne.w	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a4ae:	4b42      	ldr	r3, [pc, #264]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4b2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a4b6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a4b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4be:	d06b      	beq.n	800a598 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4c6:	d874      	bhi.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ca:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4ce:	d056      	beq.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a4d6:	d86c      	bhi.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4da:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a4de:	d03b      	beq.n	800a558 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a4e6:	d864      	bhi.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ee:	d021      	beq.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4f6:	d85c      	bhi.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d004      	beq.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a504:	d004      	beq.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a506:	e054      	b.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a508:	f7fe fa4c 	bl	80089a4 <HAL_RCC_GetPCLK1Freq>
 800a50c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a50e:	e1f6      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a510:	4b29      	ldr	r3, [pc, #164]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a518:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a51c:	d107      	bne.n	800a52e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a51e:	f107 0318 	add.w	r3, r7, #24
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fa0a 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a52c:	e1e7      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a52e:	2300      	movs	r3, #0
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a532:	e1e4      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a534:	4b20      	ldr	r3, [pc, #128]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a53c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a540:	d107      	bne.n	800a552 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a542:	f107 030c 	add.w	r3, r7, #12
 800a546:	4618      	mov	r0, r3
 800a548:	f000 fb4c 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a550:	e1d5      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a552:	2300      	movs	r3, #0
 800a554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a556:	e1d2      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a558:	4b17      	ldr	r3, [pc, #92]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b04      	cmp	r3, #4
 800a562:	d109      	bne.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a564:	4b14      	ldr	r3, [pc, #80]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	08db      	lsrs	r3, r3, #3
 800a56a:	f003 0303 	and.w	r3, r3, #3
 800a56e:	4a13      	ldr	r2, [pc, #76]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a570:	fa22 f303 	lsr.w	r3, r2, r3
 800a574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a576:	e1c2      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a57c:	e1bf      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a57e:	4b0e      	ldr	r3, [pc, #56]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a58a:	d102      	bne.n	800a592 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a58c:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a58e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a590:	e1b5      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a592:	2300      	movs	r3, #0
 800a594:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a596:	e1b2      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a598:	4b07      	ldr	r3, [pc, #28]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5a4:	d102      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a5a6:	4b07      	ldr	r3, [pc, #28]	@ (800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5aa:	e1a8      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b0:	e1a5      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b6:	e1a2      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5b8:	58024400 	.word	0x58024400
 800a5bc:	03d09000 	.word	0x03d09000
 800a5c0:	003d0900 	.word	0x003d0900
 800a5c4:	02dc6c00 	.word	0x02dc6c00
 800a5c8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a5cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5d0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a5d4:	430b      	orrs	r3, r1
 800a5d6:	d173      	bne.n	800a6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a5d8:	4b9c      	ldr	r3, [pc, #624]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a5e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5e8:	d02f      	beq.n	800a64a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5f0:	d863      	bhi.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d004      	beq.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5fe:	d012      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a600:	e05b      	b.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a602:	4b92      	ldr	r3, [pc, #584]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a60a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a60e:	d107      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a610:	f107 0318 	add.w	r3, r7, #24
 800a614:	4618      	mov	r0, r3
 800a616:	f000 f991 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61e:	e16e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a624:	e16b      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a626:	4b89      	ldr	r3, [pc, #548]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a62e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a632:	d107      	bne.n	800a644 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a634:	f107 030c 	add.w	r3, r7, #12
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 fad3 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a642:	e15c      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a644:	2300      	movs	r3, #0
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a648:	e159      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a64a:	4b80      	ldr	r3, [pc, #512]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a64c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a64e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a652:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a654:	4b7d      	ldr	r3, [pc, #500]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f003 0304 	and.w	r3, r3, #4
 800a65c:	2b04      	cmp	r3, #4
 800a65e:	d10c      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a662:	2b00      	cmp	r3, #0
 800a664:	d109      	bne.n	800a67a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a666:	4b79      	ldr	r3, [pc, #484]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	08db      	lsrs	r3, r3, #3
 800a66c:	f003 0303 	and.w	r3, r3, #3
 800a670:	4a77      	ldr	r2, [pc, #476]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a672:	fa22 f303 	lsr.w	r3, r2, r3
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a678:	e01e      	b.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a67a:	4b74      	ldr	r3, [pc, #464]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a686:	d106      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a68a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a68e:	d102      	bne.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a690:	4b70      	ldr	r3, [pc, #448]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a692:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a694:	e010      	b.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a696:	4b6d      	ldr	r3, [pc, #436]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a69e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6a2:	d106      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a6a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6aa:	d102      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6ac:	4b6a      	ldr	r3, [pc, #424]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6b0:	e002      	b.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6b6:	e122      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6b8:	e121      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6be:	e11e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a6c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6c4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a6c8:	430b      	orrs	r3, r1
 800a6ca:	d133      	bne.n	800a734 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a6cc:	4b5f      	ldr	r3, [pc, #380]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6d4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a6d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d004      	beq.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6e2:	d012      	beq.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a6e4:	e023      	b.n	800a72e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6e6:	4b59      	ldr	r3, [pc, #356]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6f2:	d107      	bne.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f000 fbc7 	bl	800ae8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a702:	e0fc      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a704:	2300      	movs	r3, #0
 800a706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a708:	e0f9      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a70a:	4b50      	ldr	r3, [pc, #320]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a712:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a716:	d107      	bne.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a718:	f107 0318 	add.w	r3, r7, #24
 800a71c:	4618      	mov	r0, r3
 800a71e:	f000 f90d 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a726:	e0ea      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a728:	2300      	movs	r3, #0
 800a72a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72c:	e0e7      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a72e:	2300      	movs	r3, #0
 800a730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a732:	e0e4      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a734:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a738:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a73c:	430b      	orrs	r3, r1
 800a73e:	f040 808d 	bne.w	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a742:	4b42      	ldr	r3, [pc, #264]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a746:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a74a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a74e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a752:	d06b      	beq.n	800a82c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a75a:	d874      	bhi.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a762:	d056      	beq.n	800a812 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a766:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a76a:	d86c      	bhi.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a772:	d03b      	beq.n	800a7ec <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a77a:	d864      	bhi.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a782:	d021      	beq.n	800a7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a78a:	d85c      	bhi.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a798:	d004      	beq.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a79a:	e054      	b.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a79c:	f000 f8b8 	bl	800a910 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7a0:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7a2:	e0ac      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7a4:	4b29      	ldr	r3, [pc, #164]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7b0:	d107      	bne.n	800a7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7b2:	f107 0318 	add.w	r3, r7, #24
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 f8c0 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c0:	e09d      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7c6:	e09a      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7c8:	4b20      	ldr	r3, [pc, #128]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7d4:	d107      	bne.n	800a7e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7d6:	f107 030c 	add.w	r3, r7, #12
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 fa02 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e4:	e08b      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ea:	e088      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a7ec:	4b17      	ldr	r3, [pc, #92]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	d109      	bne.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7f8:	4b14      	ldr	r3, [pc, #80]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	08db      	lsrs	r3, r3, #3
 800a7fe:	f003 0303 	and.w	r3, r3, #3
 800a802:	4a13      	ldr	r2, [pc, #76]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a804:	fa22 f303 	lsr.w	r3, r2, r3
 800a808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a80a:	e078      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a80c:	2300      	movs	r3, #0
 800a80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a810:	e075      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a812:	4b0e      	ldr	r3, [pc, #56]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a81e:	d102      	bne.n	800a826 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a820:	4b0c      	ldr	r3, [pc, #48]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a824:	e06b      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a826:	2300      	movs	r3, #0
 800a828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a82a:	e068      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a82c:	4b07      	ldr	r3, [pc, #28]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a834:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a838:	d102      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a83a:	4b07      	ldr	r3, [pc, #28]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a83e:	e05e      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a844:	e05b      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a846:	2300      	movs	r3, #0
 800a848:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a84a:	e058      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a84c:	58024400 	.word	0x58024400
 800a850:	03d09000 	.word	0x03d09000
 800a854:	003d0900 	.word	0x003d0900
 800a858:	02dc6c00 	.word	0x02dc6c00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a85c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a860:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a864:	430b      	orrs	r3, r1
 800a866:	d148      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a868:	4b27      	ldr	r3, [pc, #156]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a86a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a86c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a870:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a874:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a878:	d02a      	beq.n	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a880:	d838      	bhi.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a884:	2b00      	cmp	r3, #0
 800a886:	d004      	beq.n	800a892 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a88e:	d00d      	beq.n	800a8ac <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a890:	e030      	b.n	800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a892:	4b1d      	ldr	r3, [pc, #116]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a89a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a89e:	d102      	bne.n	800a8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a8a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a90c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8a4:	e02b      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8aa:	e028      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8ac:	4b16      	ldr	r3, [pc, #88]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8b8:	d107      	bne.n	800a8ca <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 fae4 	bl	800ae8c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8c8:	e019      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ce:	e016      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8d0:	4b0d      	ldr	r3, [pc, #52]	@ (800a908 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8dc:	d107      	bne.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8de:	f107 0318 	add.w	r3, r7, #24
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f000 f82a 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ec:	e007      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f2:	e004      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f8:	e001      	b.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a8fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a900:	4618      	mov	r0, r3
 800a902:	3740      	adds	r7, #64	@ 0x40
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}
 800a908:	58024400 	.word	0x58024400
 800a90c:	02dc6c00 	.word	0x02dc6c00

0800a910 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a914:	f7fe f816 	bl	8008944 <HAL_RCC_GetHCLKFreq>
 800a918:	4602      	mov	r2, r0
 800a91a:	4b06      	ldr	r3, [pc, #24]	@ (800a934 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a91c:	6a1b      	ldr	r3, [r3, #32]
 800a91e:	091b      	lsrs	r3, r3, #4
 800a920:	f003 0307 	and.w	r3, r3, #7
 800a924:	4904      	ldr	r1, [pc, #16]	@ (800a938 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a926:	5ccb      	ldrb	r3, [r1, r3]
 800a928:	f003 031f 	and.w	r3, r3, #31
 800a92c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a930:	4618      	mov	r0, r3
 800a932:	bd80      	pop	{r7, pc}
 800a934:	58024400 	.word	0x58024400
 800a938:	0800e798 	.word	0x0800e798

0800a93c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b089      	sub	sp, #36	@ 0x24
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a944:	4ba1      	ldr	r3, [pc, #644]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a948:	f003 0303 	and.w	r3, r3, #3
 800a94c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a94e:	4b9f      	ldr	r3, [pc, #636]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a952:	0b1b      	lsrs	r3, r3, #12
 800a954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a958:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a95a:	4b9c      	ldr	r3, [pc, #624]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a95e:	091b      	lsrs	r3, r3, #4
 800a960:	f003 0301 	and.w	r3, r3, #1
 800a964:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a966:	4b99      	ldr	r3, [pc, #612]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a96a:	08db      	lsrs	r3, r3, #3
 800a96c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a970:	693a      	ldr	r2, [r7, #16]
 800a972:	fb02 f303 	mul.w	r3, r2, r3
 800a976:	ee07 3a90 	vmov	s15, r3
 800a97a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a97e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b00      	cmp	r3, #0
 800a986:	f000 8111 	beq.w	800abac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a98a:	69bb      	ldr	r3, [r7, #24]
 800a98c:	2b02      	cmp	r3, #2
 800a98e:	f000 8083 	beq.w	800aa98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	2b02      	cmp	r3, #2
 800a996:	f200 80a1 	bhi.w	800aadc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a99a:	69bb      	ldr	r3, [r7, #24]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d003      	beq.n	800a9a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d056      	beq.n	800aa54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9a6:	e099      	b.n	800aadc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9a8:	4b88      	ldr	r3, [pc, #544]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0320 	and.w	r3, r3, #32
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d02d      	beq.n	800aa10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9b4:	4b85      	ldr	r3, [pc, #532]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	08db      	lsrs	r3, r3, #3
 800a9ba:	f003 0303 	and.w	r3, r3, #3
 800a9be:	4a84      	ldr	r2, [pc, #528]	@ (800abd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	ee07 3a90 	vmov	s15, r3
 800a9cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	ee07 3a90 	vmov	s15, r3
 800a9d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9de:	4b7b      	ldr	r3, [pc, #492]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800a9f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a9f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa0e:	e087      	b.n	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	ee07 3a90 	vmov	s15, r3
 800aa16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800abd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa22:	4b6a      	ldr	r3, [pc, #424]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa32:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa52:	e065      	b.n	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800abdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa66:	4b59      	ldr	r3, [pc, #356]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa76:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa96:	e043      	b.n	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	ee07 3a90 	vmov	s15, r3
 800aa9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aaa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaaa:	4b48      	ldr	r3, [pc, #288]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaba:	ed97 6a03 	vldr	s12, [r7, #12]
 800aabe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aada:	e021      	b.n	800ab20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800abdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aaea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaee:	4b37      	ldr	r3, [pc, #220]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aaf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800abd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab20:	4b2a      	ldr	r3, [pc, #168]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab24:	0a5b      	lsrs	r3, r3, #9
 800ab26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab2a:	ee07 3a90 	vmov	s15, r3
 800ab2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab36:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab3a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab46:	ee17 2a90 	vmov	r2, s15
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab4e:	4b1f      	ldr	r3, [pc, #124]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab52:	0c1b      	lsrs	r3, r3, #16
 800ab54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab58:	ee07 3a90 	vmov	s15, r3
 800ab5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab74:	ee17 2a90 	vmov	r2, s15
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ab7c:	4b13      	ldr	r3, [pc, #76]	@ (800abcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab80:	0e1b      	lsrs	r3, r3, #24
 800ab82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba2:	ee17 2a90 	vmov	r2, s15
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abaa:	e008      	b.n	800abbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	609a      	str	r2, [r3, #8]
}
 800abbe:	bf00      	nop
 800abc0:	3724      	adds	r7, #36	@ 0x24
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr
 800abca:	bf00      	nop
 800abcc:	58024400 	.word	0x58024400
 800abd0:	03d09000 	.word	0x03d09000
 800abd4:	46000000 	.word	0x46000000
 800abd8:	4c742400 	.word	0x4c742400
 800abdc:	4a742400 	.word	0x4a742400
 800abe0:	4c371b00 	.word	0x4c371b00

0800abe4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b089      	sub	sp, #36	@ 0x24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abec:	4ba1      	ldr	r3, [pc, #644]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abf0:	f003 0303 	and.w	r3, r3, #3
 800abf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800abf6:	4b9f      	ldr	r3, [pc, #636]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abfa:	0d1b      	lsrs	r3, r3, #20
 800abfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac02:	4b9c      	ldr	r3, [pc, #624]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac06:	0a1b      	lsrs	r3, r3, #8
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac0e:	4b99      	ldr	r3, [pc, #612]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac12:	08db      	lsrs	r3, r3, #3
 800ac14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	fb02 f303 	mul.w	r3, r2, r3
 800ac1e:	ee07 3a90 	vmov	s15, r3
 800ac22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	f000 8111 	beq.w	800ae54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	f000 8083 	beq.w	800ad40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	f200 80a1 	bhi.w	800ad84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d003      	beq.n	800ac50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d056      	beq.n	800acfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac4e:	e099      	b.n	800ad84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac50:	4b88      	ldr	r3, [pc, #544]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0320 	and.w	r3, r3, #32
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d02d      	beq.n	800acb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac5c:	4b85      	ldr	r3, [pc, #532]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	08db      	lsrs	r3, r3, #3
 800ac62:	f003 0303 	and.w	r3, r3, #3
 800ac66:	4a84      	ldr	r2, [pc, #528]	@ (800ae78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac68:	fa22 f303 	lsr.w	r3, r2, r3
 800ac6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	ee07 3a90 	vmov	s15, r3
 800ac74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac78:	697b      	ldr	r3, [r7, #20]
 800ac7a:	ee07 3a90 	vmov	s15, r3
 800ac7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac86:	4b7b      	ldr	r3, [pc, #492]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ac9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ac9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acb6:	e087      	b.n	800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acb8:	697b      	ldr	r3, [r7, #20]
 800acba:	ee07 3a90 	vmov	s15, r3
 800acbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ae80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800acc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acca:	4b6a      	ldr	r3, [pc, #424]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800accc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acd2:	ee07 3a90 	vmov	s15, r3
 800acd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acda:	ed97 6a03 	vldr	s12, [r7, #12]
 800acde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ace2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ace6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800acfa:	e065      	b.n	800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ae84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0e:	4b59      	ldr	r3, [pc, #356]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad16:	ee07 3a90 	vmov	s15, r3
 800ad1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad3e:	e043      	b.n	800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad52:	4b48      	ldr	r3, [pc, #288]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad5a:	ee07 3a90 	vmov	s15, r3
 800ad5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad82:	e021      	b.n	800adc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ae84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad96:	4b37      	ldr	r3, [pc, #220]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ae7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800adc8:	4b2a      	ldr	r3, [pc, #168]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adcc:	0a5b      	lsrs	r3, r3, #9
 800adce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800adde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ade2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ade6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800adee:	ee17 2a90 	vmov	r2, s15
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800adf6:	4b1f      	ldr	r3, [pc, #124]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfa:	0c1b      	lsrs	r3, r3, #16
 800adfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae00:	ee07 3a90 	vmov	s15, r3
 800ae04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae1c:	ee17 2a90 	vmov	r2, s15
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae24:	4b13      	ldr	r3, [pc, #76]	@ (800ae74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae28:	0e1b      	lsrs	r3, r3, #24
 800ae2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae4a:	ee17 2a90 	vmov	r2, s15
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae52:	e008      	b.n	800ae66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2200      	movs	r2, #0
 800ae64:	609a      	str	r2, [r3, #8]
}
 800ae66:	bf00      	nop
 800ae68:	3724      	adds	r7, #36	@ 0x24
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	58024400 	.word	0x58024400
 800ae78:	03d09000 	.word	0x03d09000
 800ae7c:	46000000 	.word	0x46000000
 800ae80:	4c742400 	.word	0x4c742400
 800ae84:	4a742400 	.word	0x4a742400
 800ae88:	4c371b00 	.word	0x4c371b00

0800ae8c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b089      	sub	sp, #36	@ 0x24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae94:	4ba0      	ldr	r3, [pc, #640]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ae9e:	4b9e      	ldr	r3, [pc, #632]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aea2:	091b      	lsrs	r3, r3, #4
 800aea4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aea8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aeaa:	4b9b      	ldr	r3, [pc, #620]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aeae:	f003 0301 	and.w	r3, r3, #1
 800aeb2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aeb4:	4b98      	ldr	r3, [pc, #608]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb8:	08db      	lsrs	r3, r3, #3
 800aeba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aebe:	693a      	ldr	r2, [r7, #16]
 800aec0:	fb02 f303 	mul.w	r3, r2, r3
 800aec4:	ee07 3a90 	vmov	s15, r3
 800aec8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aecc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800aed0:	697b      	ldr	r3, [r7, #20]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	f000 8111 	beq.w	800b0fa <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800aed8:	69bb      	ldr	r3, [r7, #24]
 800aeda:	2b02      	cmp	r3, #2
 800aedc:	f000 8083 	beq.w	800afe6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	f200 80a1 	bhi.w	800b02a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d003      	beq.n	800aef6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d056      	beq.n	800afa2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800aef4:	e099      	b.n	800b02a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aef6:	4b88      	ldr	r3, [pc, #544]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f003 0320 	and.w	r3, r3, #32
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d02d      	beq.n	800af5e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af02:	4b85      	ldr	r3, [pc, #532]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	08db      	lsrs	r3, r3, #3
 800af08:	f003 0303 	and.w	r3, r3, #3
 800af0c:	4a83      	ldr	r2, [pc, #524]	@ (800b11c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af0e:	fa22 f303 	lsr.w	r3, r2, r3
 800af12:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	ee07 3a90 	vmov	s15, r3
 800af1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af1e:	697b      	ldr	r3, [r7, #20]
 800af20:	ee07 3a90 	vmov	s15, r3
 800af24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2c:	4b7a      	ldr	r3, [pc, #488]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800af40:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b120 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af58:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af5c:	e087      	b.n	800b06e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	ee07 3a90 	vmov	s15, r3
 800af64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af68:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b124 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800af6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af70:	4b69      	ldr	r3, [pc, #420]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af78:	ee07 3a90 	vmov	s15, r3
 800af7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af80:	ed97 6a03 	vldr	s12, [r7, #12]
 800af84:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b120 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afa0:	e065      	b.n	800b06e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	ee07 3a90 	vmov	s15, r3
 800afa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afac:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b128 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800afb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb4:	4b58      	ldr	r3, [pc, #352]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afbc:	ee07 3a90 	vmov	s15, r3
 800afc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc4:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b120 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afe4:	e043      	b.n	800b06e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	ee07 3a90 	vmov	s15, r3
 800afec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b12c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800aff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff8:	4b47      	ldr	r3, [pc, #284]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800affa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800affc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b000:	ee07 3a90 	vmov	s15, r3
 800b004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b008:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b120 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b01c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b020:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b024:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b028:	e021      	b.n	800b06e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	ee07 3a90 	vmov	s15, r3
 800b030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b034:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b124 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b03c:	4b36      	ldr	r3, [pc, #216]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b03e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b044:	ee07 3a90 	vmov	s15, r3
 800b048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b04c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b050:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b120 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b05c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b064:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b06c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b06e:	4b2a      	ldr	r3, [pc, #168]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b072:	0a5b      	lsrs	r3, r3, #9
 800b074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b078:	ee07 3a90 	vmov	s15, r3
 800b07c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b080:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b084:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b088:	edd7 6a07 	vldr	s13, [r7, #28]
 800b08c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b094:	ee17 2a90 	vmov	r2, s15
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b09c:	4b1e      	ldr	r3, [pc, #120]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b09e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a0:	0c1b      	lsrs	r3, r3, #16
 800b0a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0a6:	ee07 3a90 	vmov	s15, r3
 800b0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c2:	ee17 2a90 	vmov	r2, s15
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b0ca:	4b13      	ldr	r3, [pc, #76]	@ (800b118 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0ce:	0e1b      	lsrs	r3, r3, #24
 800b0d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0d4:	ee07 3a90 	vmov	s15, r3
 800b0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f0:	ee17 2a90 	vmov	r2, s15
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b0f8:	e008      	b.n	800b10c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2200      	movs	r2, #0
 800b10a:	609a      	str	r2, [r3, #8]
}
 800b10c:	bf00      	nop
 800b10e:	3724      	adds	r7, #36	@ 0x24
 800b110:	46bd      	mov	sp, r7
 800b112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b116:	4770      	bx	lr
 800b118:	58024400 	.word	0x58024400
 800b11c:	03d09000 	.word	0x03d09000
 800b120:	46000000 	.word	0x46000000
 800b124:	4c742400 	.word	0x4c742400
 800b128:	4a742400 	.word	0x4a742400
 800b12c:	4c371b00 	.word	0x4c371b00

0800b130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b13a:	2300      	movs	r3, #0
 800b13c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b13e:	4b53      	ldr	r3, [pc, #332]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b142:	f003 0303 	and.w	r3, r3, #3
 800b146:	2b03      	cmp	r3, #3
 800b148:	d101      	bne.n	800b14e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e099      	b.n	800b282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b14e:	4b4f      	ldr	r3, [pc, #316]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a4e      	ldr	r2, [pc, #312]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b154:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b15a:	f7f7 fe29 	bl	8002db0 <HAL_GetTick>
 800b15e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b160:	e008      	b.n	800b174 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b162:	f7f7 fe25 	bl	8002db0 <HAL_GetTick>
 800b166:	4602      	mov	r2, r0
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	1ad3      	subs	r3, r2, r3
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d901      	bls.n	800b174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b170:	2303      	movs	r3, #3
 800b172:	e086      	b.n	800b282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b174:	4b45      	ldr	r3, [pc, #276]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1f0      	bne.n	800b162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b180:	4b42      	ldr	r3, [pc, #264]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b184:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	031b      	lsls	r3, r3, #12
 800b18e:	493f      	ldr	r1, [pc, #252]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b190:	4313      	orrs	r3, r2
 800b192:	628b      	str	r3, [r1, #40]	@ 0x28
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	3b01      	subs	r3, #1
 800b19a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	3b01      	subs	r3, #1
 800b1a4:	025b      	lsls	r3, r3, #9
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	041b      	lsls	r3, r3, #16
 800b1b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	3b01      	subs	r3, #1
 800b1be:	061b      	lsls	r3, r3, #24
 800b1c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b1c4:	4931      	ldr	r1, [pc, #196]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1ca:	4b30      	ldr	r3, [pc, #192]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	695b      	ldr	r3, [r3, #20]
 800b1d6:	492d      	ldr	r1, [pc, #180]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b1dc:	4b2b      	ldr	r3, [pc, #172]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e0:	f023 0220 	bic.w	r2, r3, #32
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	4928      	ldr	r1, [pc, #160]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b1ee:	4b27      	ldr	r3, [pc, #156]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b1f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f2:	4a26      	ldr	r2, [pc, #152]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b1f4:	f023 0310 	bic.w	r3, r3, #16
 800b1f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b1fa:	4b24      	ldr	r3, [pc, #144]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b1fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b1fe:	4b24      	ldr	r3, [pc, #144]	@ (800b290 <RCCEx_PLL2_Config+0x160>)
 800b200:	4013      	ands	r3, r2
 800b202:	687a      	ldr	r2, [r7, #4]
 800b204:	69d2      	ldr	r2, [r2, #28]
 800b206:	00d2      	lsls	r2, r2, #3
 800b208:	4920      	ldr	r1, [pc, #128]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b20e:	4b1f      	ldr	r3, [pc, #124]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b212:	4a1e      	ldr	r2, [pc, #120]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b214:	f043 0310 	orr.w	r3, r3, #16
 800b218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b220:	4b1a      	ldr	r3, [pc, #104]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b224:	4a19      	ldr	r2, [pc, #100]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b226:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b22a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b22c:	e00f      	b.n	800b24e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d106      	bne.n	800b242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b234:	4b15      	ldr	r3, [pc, #84]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b238:	4a14      	ldr	r2, [pc, #80]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b23a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b23e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b240:	e005      	b.n	800b24e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b242:	4b12      	ldr	r3, [pc, #72]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b246:	4a11      	ldr	r2, [pc, #68]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b248:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b24c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b24e:	4b0f      	ldr	r3, [pc, #60]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a0e      	ldr	r2, [pc, #56]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b254:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b25a:	f7f7 fda9 	bl	8002db0 <HAL_GetTick>
 800b25e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b260:	e008      	b.n	800b274 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b262:	f7f7 fda5 	bl	8002db0 <HAL_GetTick>
 800b266:	4602      	mov	r2, r0
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	d901      	bls.n	800b274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b270:	2303      	movs	r3, #3
 800b272:	e006      	b.n	800b282 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b274:	4b05      	ldr	r3, [pc, #20]	@ (800b28c <RCCEx_PLL2_Config+0x15c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0f0      	beq.n	800b262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b280:	7bfb      	ldrb	r3, [r7, #15]
}
 800b282:	4618      	mov	r0, r3
 800b284:	3710      	adds	r7, #16
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	58024400 	.word	0x58024400
 800b290:	ffff0007 	.word	0xffff0007

0800b294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2a2:	4b53      	ldr	r3, [pc, #332]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b2a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2a6:	f003 0303 	and.w	r3, r3, #3
 800b2aa:	2b03      	cmp	r3, #3
 800b2ac:	d101      	bne.n	800b2b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e099      	b.n	800b3e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2b2:	4b4f      	ldr	r3, [pc, #316]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a4e      	ldr	r2, [pc, #312]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b2b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2be:	f7f7 fd77 	bl	8002db0 <HAL_GetTick>
 800b2c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2c4:	e008      	b.n	800b2d8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2c6:	f7f7 fd73 	bl	8002db0 <HAL_GetTick>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d901      	bls.n	800b2d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e086      	b.n	800b3e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2d8:	4b45      	ldr	r3, [pc, #276]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d1f0      	bne.n	800b2c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b2e4:	4b42      	ldr	r3, [pc, #264]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	051b      	lsls	r3, r3, #20
 800b2f2:	493f      	ldr	r1, [pc, #252]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	685b      	ldr	r3, [r3, #4]
 800b2fc:	3b01      	subs	r3, #1
 800b2fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	3b01      	subs	r3, #1
 800b308:	025b      	lsls	r3, r3, #9
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	431a      	orrs	r2, r3
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	3b01      	subs	r3, #1
 800b314:	041b      	lsls	r3, r3, #16
 800b316:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b31a:	431a      	orrs	r2, r3
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	3b01      	subs	r3, #1
 800b322:	061b      	lsls	r3, r3, #24
 800b324:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b328:	4931      	ldr	r1, [pc, #196]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b32a:	4313      	orrs	r3, r2
 800b32c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b32e:	4b30      	ldr	r3, [pc, #192]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b332:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	492d      	ldr	r1, [pc, #180]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b340:	4b2b      	ldr	r3, [pc, #172]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b344:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	4928      	ldr	r1, [pc, #160]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b352:	4b27      	ldr	r3, [pc, #156]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b356:	4a26      	ldr	r2, [pc, #152]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b358:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b35c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b35e:	4b24      	ldr	r3, [pc, #144]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b360:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b362:	4b24      	ldr	r3, [pc, #144]	@ (800b3f4 <RCCEx_PLL3_Config+0x160>)
 800b364:	4013      	ands	r3, r2
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	69d2      	ldr	r2, [r2, #28]
 800b36a:	00d2      	lsls	r2, r2, #3
 800b36c:	4920      	ldr	r1, [pc, #128]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b36e:	4313      	orrs	r3, r2
 800b370:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b372:	4b1f      	ldr	r3, [pc, #124]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b376:	4a1e      	ldr	r2, [pc, #120]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d106      	bne.n	800b392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b384:	4b1a      	ldr	r3, [pc, #104]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b388:	4a19      	ldr	r2, [pc, #100]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b38a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b38e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b390:	e00f      	b.n	800b3b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d106      	bne.n	800b3a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b398:	4b15      	ldr	r3, [pc, #84]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b39a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b39c:	4a14      	ldr	r2, [pc, #80]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b39e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3a2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3a4:	e005      	b.n	800b3b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3a6:	4b12      	ldr	r3, [pc, #72]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3aa:	4a11      	ldr	r2, [pc, #68]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3b2:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a0e      	ldr	r2, [pc, #56]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b3b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3be:	f7f7 fcf7 	bl	8002db0 <HAL_GetTick>
 800b3c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3c4:	e008      	b.n	800b3d8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3c6:	f7f7 fcf3 	bl	8002db0 <HAL_GetTick>
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	1ad3      	subs	r3, r2, r3
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	d901      	bls.n	800b3d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b3d4:	2303      	movs	r3, #3
 800b3d6:	e006      	b.n	800b3e6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3d8:	4b05      	ldr	r3, [pc, #20]	@ (800b3f0 <RCCEx_PLL3_Config+0x15c>)
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d0f0      	beq.n	800b3c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	58024400 	.word	0x58024400
 800b3f4:	ffff0007 	.word	0xffff0007

0800b3f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b082      	sub	sp, #8
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b406:	2301      	movs	r3, #1
 800b408:	e049      	b.n	800b49e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b410:	b2db      	uxtb	r3, r3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d106      	bne.n	800b424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2200      	movs	r2, #0
 800b41a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7f7 f990 	bl	8002744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	3304      	adds	r3, #4
 800b434:	4619      	mov	r1, r3
 800b436:	4610      	mov	r0, r2
 800b438:	f000 fe34 	bl	800c0a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2201      	movs	r2, #1
 800b450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2201      	movs	r2, #1
 800b458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	2201      	movs	r2, #1
 800b480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2201      	movs	r2, #1
 800b488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b49c:	2300      	movs	r3, #0
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3708      	adds	r7, #8
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}

0800b4a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b4a6:	b580      	push	{r7, lr}
 800b4a8:	b082      	sub	sp, #8
 800b4aa:	af00      	add	r7, sp, #0
 800b4ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d101      	bne.n	800b4b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	e049      	b.n	800b54c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d106      	bne.n	800b4d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 f841 	bl	800b554 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f000 fddd 	bl	800c0a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2201      	movs	r2, #1
 800b516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2201      	movs	r2, #1
 800b546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3708      	adds	r7, #8
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b55c:	bf00      	nop
 800b55e:	370c      	adds	r7, #12
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr

0800b568 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <HAL_TIM_PWM_Start+0x24>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b57e:	b2db      	uxtb	r3, r3
 800b580:	2b01      	cmp	r3, #1
 800b582:	bf14      	ite	ne
 800b584:	2301      	movne	r3, #1
 800b586:	2300      	moveq	r3, #0
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	e03c      	b.n	800b606 <HAL_TIM_PWM_Start+0x9e>
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d109      	bne.n	800b5a6 <HAL_TIM_PWM_Start+0x3e>
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	bf14      	ite	ne
 800b59e:	2301      	movne	r3, #1
 800b5a0:	2300      	moveq	r3, #0
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	e02f      	b.n	800b606 <HAL_TIM_PWM_Start+0x9e>
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d109      	bne.n	800b5c0 <HAL_TIM_PWM_Start+0x58>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	2b01      	cmp	r3, #1
 800b5b6:	bf14      	ite	ne
 800b5b8:	2301      	movne	r3, #1
 800b5ba:	2300      	moveq	r3, #0
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	e022      	b.n	800b606 <HAL_TIM_PWM_Start+0x9e>
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	2b0c      	cmp	r3, #12
 800b5c4:	d109      	bne.n	800b5da <HAL_TIM_PWM_Start+0x72>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	bf14      	ite	ne
 800b5d2:	2301      	movne	r3, #1
 800b5d4:	2300      	moveq	r3, #0
 800b5d6:	b2db      	uxtb	r3, r3
 800b5d8:	e015      	b.n	800b606 <HAL_TIM_PWM_Start+0x9e>
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b10      	cmp	r3, #16
 800b5de:	d109      	bne.n	800b5f4 <HAL_TIM_PWM_Start+0x8c>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	bf14      	ite	ne
 800b5ec:	2301      	movne	r3, #1
 800b5ee:	2300      	moveq	r3, #0
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	e008      	b.n	800b606 <HAL_TIM_PWM_Start+0x9e>
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b5fa:	b2db      	uxtb	r3, r3
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	bf14      	ite	ne
 800b600:	2301      	movne	r3, #1
 800b602:	2300      	moveq	r3, #0
 800b604:	b2db      	uxtb	r3, r3
 800b606:	2b00      	cmp	r3, #0
 800b608:	d001      	beq.n	800b60e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	e0a1      	b.n	800b752 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d104      	bne.n	800b61e <HAL_TIM_PWM_Start+0xb6>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2202      	movs	r2, #2
 800b618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b61c:	e023      	b.n	800b666 <HAL_TIM_PWM_Start+0xfe>
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	2b04      	cmp	r3, #4
 800b622:	d104      	bne.n	800b62e <HAL_TIM_PWM_Start+0xc6>
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b62c:	e01b      	b.n	800b666 <HAL_TIM_PWM_Start+0xfe>
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	2b08      	cmp	r3, #8
 800b632:	d104      	bne.n	800b63e <HAL_TIM_PWM_Start+0xd6>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2202      	movs	r2, #2
 800b638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b63c:	e013      	b.n	800b666 <HAL_TIM_PWM_Start+0xfe>
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	2b0c      	cmp	r3, #12
 800b642:	d104      	bne.n	800b64e <HAL_TIM_PWM_Start+0xe6>
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2202      	movs	r2, #2
 800b648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b64c:	e00b      	b.n	800b666 <HAL_TIM_PWM_Start+0xfe>
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b10      	cmp	r3, #16
 800b652:	d104      	bne.n	800b65e <HAL_TIM_PWM_Start+0xf6>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b65c:	e003      	b.n	800b666 <HAL_TIM_PWM_Start+0xfe>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2202      	movs	r2, #2
 800b662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	2201      	movs	r2, #1
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f001 f92c 	bl	800c8cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a38      	ldr	r2, [pc, #224]	@ (800b75c <HAL_TIM_PWM_Start+0x1f4>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d013      	beq.n	800b6a6 <HAL_TIM_PWM_Start+0x13e>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a37      	ldr	r2, [pc, #220]	@ (800b760 <HAL_TIM_PWM_Start+0x1f8>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d00e      	beq.n	800b6a6 <HAL_TIM_PWM_Start+0x13e>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a35      	ldr	r2, [pc, #212]	@ (800b764 <HAL_TIM_PWM_Start+0x1fc>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d009      	beq.n	800b6a6 <HAL_TIM_PWM_Start+0x13e>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4a34      	ldr	r2, [pc, #208]	@ (800b768 <HAL_TIM_PWM_Start+0x200>)
 800b698:	4293      	cmp	r3, r2
 800b69a:	d004      	beq.n	800b6a6 <HAL_TIM_PWM_Start+0x13e>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a32      	ldr	r2, [pc, #200]	@ (800b76c <HAL_TIM_PWM_Start+0x204>)
 800b6a2:	4293      	cmp	r3, r2
 800b6a4:	d101      	bne.n	800b6aa <HAL_TIM_PWM_Start+0x142>
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e000      	b.n	800b6ac <HAL_TIM_PWM_Start+0x144>
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d007      	beq.n	800b6c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b6be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4a25      	ldr	r2, [pc, #148]	@ (800b75c <HAL_TIM_PWM_Start+0x1f4>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d022      	beq.n	800b710 <HAL_TIM_PWM_Start+0x1a8>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6d2:	d01d      	beq.n	800b710 <HAL_TIM_PWM_Start+0x1a8>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4a25      	ldr	r2, [pc, #148]	@ (800b770 <HAL_TIM_PWM_Start+0x208>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d018      	beq.n	800b710 <HAL_TIM_PWM_Start+0x1a8>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	4a24      	ldr	r2, [pc, #144]	@ (800b774 <HAL_TIM_PWM_Start+0x20c>)
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	d013      	beq.n	800b710 <HAL_TIM_PWM_Start+0x1a8>
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a22      	ldr	r2, [pc, #136]	@ (800b778 <HAL_TIM_PWM_Start+0x210>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	d00e      	beq.n	800b710 <HAL_TIM_PWM_Start+0x1a8>
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	4a1a      	ldr	r2, [pc, #104]	@ (800b760 <HAL_TIM_PWM_Start+0x1f8>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d009      	beq.n	800b710 <HAL_TIM_PWM_Start+0x1a8>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	4a1e      	ldr	r2, [pc, #120]	@ (800b77c <HAL_TIM_PWM_Start+0x214>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d004      	beq.n	800b710 <HAL_TIM_PWM_Start+0x1a8>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	4a16      	ldr	r2, [pc, #88]	@ (800b764 <HAL_TIM_PWM_Start+0x1fc>)
 800b70c:	4293      	cmp	r3, r2
 800b70e:	d115      	bne.n	800b73c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	689a      	ldr	r2, [r3, #8]
 800b716:	4b1a      	ldr	r3, [pc, #104]	@ (800b780 <HAL_TIM_PWM_Start+0x218>)
 800b718:	4013      	ands	r3, r2
 800b71a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b06      	cmp	r3, #6
 800b720:	d015      	beq.n	800b74e <HAL_TIM_PWM_Start+0x1e6>
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b728:	d011      	beq.n	800b74e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f042 0201 	orr.w	r2, r2, #1
 800b738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b73a:	e008      	b.n	800b74e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681a      	ldr	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f042 0201 	orr.w	r2, r2, #1
 800b74a:	601a      	str	r2, [r3, #0]
 800b74c:	e000      	b.n	800b750 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b74e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b750:	2300      	movs	r3, #0
}
 800b752:	4618      	mov	r0, r3
 800b754:	3710      	adds	r7, #16
 800b756:	46bd      	mov	sp, r7
 800b758:	bd80      	pop	{r7, pc}
 800b75a:	bf00      	nop
 800b75c:	40010000 	.word	0x40010000
 800b760:	40010400 	.word	0x40010400
 800b764:	40014000 	.word	0x40014000
 800b768:	40014400 	.word	0x40014400
 800b76c:	40014800 	.word	0x40014800
 800b770:	40000400 	.word	0x40000400
 800b774:	40000800 	.word	0x40000800
 800b778:	40000c00 	.word	0x40000c00
 800b77c:	40001800 	.word	0x40001800
 800b780:	00010007 	.word	0x00010007

0800b784 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b086      	sub	sp, #24
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d101      	bne.n	800b798 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b794:	2301      	movs	r3, #1
 800b796:	e08f      	b.n	800b8b8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d106      	bne.n	800b7b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f7f6 ffeb 	bl	8002788 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6899      	ldr	r1, [r3, #8]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681a      	ldr	r2, [r3, #0]
 800b7c4:	4b3e      	ldr	r3, [pc, #248]	@ (800b8c0 <HAL_TIM_Encoder_Init+0x13c>)
 800b7c6:	400b      	ands	r3, r1
 800b7c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	3304      	adds	r3, #4
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	f000 fc65 	bl	800c0a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	6a1b      	ldr	r3, [r3, #32]
 800b7f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	697a      	ldr	r2, [r7, #20]
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b7fc:	693a      	ldr	r2, [r7, #16]
 800b7fe:	4b31      	ldr	r3, [pc, #196]	@ (800b8c4 <HAL_TIM_Encoder_Init+0x140>)
 800b800:	4013      	ands	r3, r2
 800b802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	689a      	ldr	r2, [r3, #8]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	699b      	ldr	r3, [r3, #24]
 800b80c:	021b      	lsls	r3, r3, #8
 800b80e:	4313      	orrs	r3, r2
 800b810:	693a      	ldr	r2, [r7, #16]
 800b812:	4313      	orrs	r3, r2
 800b814:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	4b2b      	ldr	r3, [pc, #172]	@ (800b8c8 <HAL_TIM_Encoder_Init+0x144>)
 800b81a:	4013      	ands	r3, r2
 800b81c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b81e:	693a      	ldr	r2, [r7, #16]
 800b820:	4b2a      	ldr	r3, [pc, #168]	@ (800b8cc <HAL_TIM_Encoder_Init+0x148>)
 800b822:	4013      	ands	r3, r2
 800b824:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	68da      	ldr	r2, [r3, #12]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	021b      	lsls	r3, r3, #8
 800b830:	4313      	orrs	r3, r2
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	4313      	orrs	r3, r2
 800b836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	011a      	lsls	r2, r3, #4
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	6a1b      	ldr	r3, [r3, #32]
 800b842:	031b      	lsls	r3, r3, #12
 800b844:	4313      	orrs	r3, r2
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	4313      	orrs	r3, r2
 800b84a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b852:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b85a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	685a      	ldr	r2, [r3, #4]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	695b      	ldr	r3, [r3, #20]
 800b864:	011b      	lsls	r3, r3, #4
 800b866:	4313      	orrs	r3, r2
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	4313      	orrs	r3, r2
 800b86c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	693a      	ldr	r2, [r7, #16]
 800b87c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	68fa      	ldr	r2, [r7, #12]
 800b884:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2201      	movs	r2, #1
 800b88a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2201      	movs	r2, #1
 800b892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2201      	movs	r2, #1
 800b89a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2201      	movs	r2, #1
 800b8a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b8b6:	2300      	movs	r3, #0
}
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	3718      	adds	r7, #24
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	fffebff8 	.word	0xfffebff8
 800b8c4:	fffffcfc 	.word	0xfffffcfc
 800b8c8:	fffff3f3 	.word	0xfffff3f3
 800b8cc:	ffff0f0f 	.word	0xffff0f0f

0800b8d0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
 800b8d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b8e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b8e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b8f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b8f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d110      	bne.n	800b922 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d102      	bne.n	800b90c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b906:	7b7b      	ldrb	r3, [r7, #13]
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d001      	beq.n	800b910 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800b90c:	2301      	movs	r3, #1
 800b90e:	e089      	b.n	800ba24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2202      	movs	r2, #2
 800b914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2202      	movs	r2, #2
 800b91c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b920:	e031      	b.n	800b986 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	2b04      	cmp	r3, #4
 800b926:	d110      	bne.n	800b94a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b928:	7bbb      	ldrb	r3, [r7, #14]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d102      	bne.n	800b934 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b92e:	7b3b      	ldrb	r3, [r7, #12]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d001      	beq.n	800b938 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	e075      	b.n	800ba24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	2202      	movs	r2, #2
 800b944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b948:	e01d      	b.n	800b986 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b94a:	7bfb      	ldrb	r3, [r7, #15]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d108      	bne.n	800b962 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b950:	7bbb      	ldrb	r3, [r7, #14]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d105      	bne.n	800b962 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b956:	7b7b      	ldrb	r3, [r7, #13]
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d102      	bne.n	800b962 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b95c:	7b3b      	ldrb	r3, [r7, #12]
 800b95e:	2b01      	cmp	r3, #1
 800b960:	d001      	beq.n	800b966 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800b962:	2301      	movs	r3, #1
 800b964:	e05e      	b.n	800ba24 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2202      	movs	r2, #2
 800b96a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2202      	movs	r2, #2
 800b972:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2202      	movs	r2, #2
 800b97a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2202      	movs	r2, #2
 800b982:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <HAL_TIM_Encoder_Start_IT+0xc4>
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	2b04      	cmp	r3, #4
 800b990:	d010      	beq.n	800b9b4 <HAL_TIM_Encoder_Start_IT+0xe4>
 800b992:	e01f      	b.n	800b9d4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	2201      	movs	r2, #1
 800b99a:	2100      	movs	r1, #0
 800b99c:	4618      	mov	r0, r3
 800b99e:	f000 ff95 	bl	800c8cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68da      	ldr	r2, [r3, #12]
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f042 0202 	orr.w	r2, r2, #2
 800b9b0:	60da      	str	r2, [r3, #12]
      break;
 800b9b2:	e02e      	b.n	800ba12 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	2104      	movs	r1, #4
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 ff85 	bl	800c8cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68da      	ldr	r2, [r3, #12]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f042 0204 	orr.w	r2, r2, #4
 800b9d0:	60da      	str	r2, [r3, #12]
      break;
 800b9d2:	e01e      	b.n	800ba12 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 ff75 	bl	800c8cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	2104      	movs	r1, #4
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 ff6e 	bl	800c8cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68da      	ldr	r2, [r3, #12]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f042 0202 	orr.w	r2, r2, #2
 800b9fe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68da      	ldr	r2, [r3, #12]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f042 0204 	orr.w	r2, r2, #4
 800ba0e:	60da      	str	r2, [r3, #12]
      break;
 800ba10:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f042 0201 	orr.w	r2, r2, #1
 800ba20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d020      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f003 0302 	and.w	r3, r3, #2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d01b      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f06f 0202 	mvn.w	r2, #2
 800ba60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7f5 fe42 	bl	8001700 <HAL_TIM_IC_CaptureCallback>
 800ba7c:	e005      	b.n	800ba8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 faf2 	bl	800c068 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 faf9 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f003 0304 	and.w	r3, r3, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d020      	beq.n	800badc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d01b      	beq.n	800badc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f06f 0204 	mvn.w	r2, #4
 800baac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2202      	movs	r2, #2
 800bab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7f5 fe1c 	bl	8001700 <HAL_TIM_IC_CaptureCallback>
 800bac8:	e005      	b.n	800bad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 facc 	bl	800c068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 fad3 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f003 0308 	and.w	r3, r3, #8
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d020      	beq.n	800bb28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f003 0308 	and.w	r3, r3, #8
 800baec:	2b00      	cmp	r3, #0
 800baee:	d01b      	beq.n	800bb28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f06f 0208 	mvn.w	r2, #8
 800baf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2204      	movs	r2, #4
 800bafe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	f003 0303 	and.w	r3, r3, #3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f7f5 fdf6 	bl	8001700 <HAL_TIM_IC_CaptureCallback>
 800bb14:	e005      	b.n	800bb22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 faa6 	bl	800c068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 faad 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f003 0310 	and.w	r3, r3, #16
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d020      	beq.n	800bb74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f003 0310 	and.w	r3, r3, #16
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01b      	beq.n	800bb74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f06f 0210 	mvn.w	r2, #16
 800bb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2208      	movs	r2, #8
 800bb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7f5 fdd0 	bl	8001700 <HAL_TIM_IC_CaptureCallback>
 800bb60:	e005      	b.n	800bb6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 fa80 	bl	800c068 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fa87 	bl	800c07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00c      	beq.n	800bb98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f06f 0201 	mvn.w	r2, #1
 800bb90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 fa5e 	bl	800c054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d104      	bne.n	800bbac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00c      	beq.n	800bbc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d007      	beq.n	800bbc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bbbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 ffbf 	bl	800cb44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00c      	beq.n	800bbea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d007      	beq.n	800bbea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bbe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 ffb7 	bl	800cb58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00c      	beq.n	800bc0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d007      	beq.n	800bc0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bc06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 fa41 	bl	800c090 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f003 0320 	and.w	r3, r3, #32
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00c      	beq.n	800bc32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f003 0320 	and.w	r3, r3, #32
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d007      	beq.n	800bc32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f06f 0220 	mvn.w	r2, #32
 800bc2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 ff7f 	bl	800cb30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc32:	bf00      	nop
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
	...

0800bc3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b086      	sub	sp, #24
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc52:	2b01      	cmp	r3, #1
 800bc54:	d101      	bne.n	800bc5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bc56:	2302      	movs	r3, #2
 800bc58:	e0ff      	b.n	800be5a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b14      	cmp	r3, #20
 800bc66:	f200 80f0 	bhi.w	800be4a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bc6a:	a201      	add	r2, pc, #4	@ (adr r2, 800bc70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc70:	0800bcc5 	.word	0x0800bcc5
 800bc74:	0800be4b 	.word	0x0800be4b
 800bc78:	0800be4b 	.word	0x0800be4b
 800bc7c:	0800be4b 	.word	0x0800be4b
 800bc80:	0800bd05 	.word	0x0800bd05
 800bc84:	0800be4b 	.word	0x0800be4b
 800bc88:	0800be4b 	.word	0x0800be4b
 800bc8c:	0800be4b 	.word	0x0800be4b
 800bc90:	0800bd47 	.word	0x0800bd47
 800bc94:	0800be4b 	.word	0x0800be4b
 800bc98:	0800be4b 	.word	0x0800be4b
 800bc9c:	0800be4b 	.word	0x0800be4b
 800bca0:	0800bd87 	.word	0x0800bd87
 800bca4:	0800be4b 	.word	0x0800be4b
 800bca8:	0800be4b 	.word	0x0800be4b
 800bcac:	0800be4b 	.word	0x0800be4b
 800bcb0:	0800bdc9 	.word	0x0800bdc9
 800bcb4:	0800be4b 	.word	0x0800be4b
 800bcb8:	0800be4b 	.word	0x0800be4b
 800bcbc:	0800be4b 	.word	0x0800be4b
 800bcc0:	0800be09 	.word	0x0800be09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	68b9      	ldr	r1, [r7, #8]
 800bcca:	4618      	mov	r0, r3
 800bccc:	f000 fa8a 	bl	800c1e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	699a      	ldr	r2, [r3, #24]
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	f042 0208 	orr.w	r2, r2, #8
 800bcde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	699a      	ldr	r2, [r3, #24]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f022 0204 	bic.w	r2, r2, #4
 800bcee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	6999      	ldr	r1, [r3, #24]
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	691a      	ldr	r2, [r3, #16]
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	619a      	str	r2, [r3, #24]
      break;
 800bd02:	e0a5      	b.n	800be50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	68b9      	ldr	r1, [r7, #8]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f000 fafa 	bl	800c304 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	699a      	ldr	r2, [r3, #24]
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	699a      	ldr	r2, [r3, #24]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	6999      	ldr	r1, [r3, #24]
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	021a      	lsls	r2, r3, #8
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	430a      	orrs	r2, r1
 800bd42:	619a      	str	r2, [r3, #24]
      break;
 800bd44:	e084      	b.n	800be50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	f000 fb63 	bl	800c418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	69da      	ldr	r2, [r3, #28]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f042 0208 	orr.w	r2, r2, #8
 800bd60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	69da      	ldr	r2, [r3, #28]
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f022 0204 	bic.w	r2, r2, #4
 800bd70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	69d9      	ldr	r1, [r3, #28]
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	691a      	ldr	r2, [r3, #16]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	430a      	orrs	r2, r1
 800bd82:	61da      	str	r2, [r3, #28]
      break;
 800bd84:	e064      	b.n	800be50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	68b9      	ldr	r1, [r7, #8]
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	f000 fbcb 	bl	800c528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	69da      	ldr	r2, [r3, #28]
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bda0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	69da      	ldr	r2, [r3, #28]
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bdb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	69d9      	ldr	r1, [r3, #28]
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	691b      	ldr	r3, [r3, #16]
 800bdbc:	021a      	lsls	r2, r3, #8
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	61da      	str	r2, [r3, #28]
      break;
 800bdc6:	e043      	b.n	800be50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	68b9      	ldr	r1, [r7, #8]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f000 fc14 	bl	800c5fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f042 0208 	orr.w	r2, r2, #8
 800bde2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f022 0204 	bic.w	r2, r2, #4
 800bdf2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	691a      	ldr	r2, [r3, #16]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	430a      	orrs	r2, r1
 800be04:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800be06:	e023      	b.n	800be50 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68b9      	ldr	r1, [r7, #8]
 800be0e:	4618      	mov	r0, r3
 800be10:	f000 fc58 	bl	800c6c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be22:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be32:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	021a      	lsls	r2, r3, #8
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	430a      	orrs	r2, r1
 800be46:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800be48:	e002      	b.n	800be50 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800be4a:	2301      	movs	r3, #1
 800be4c:	75fb      	strb	r3, [r7, #23]
      break;
 800be4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800be58:	7dfb      	ldrb	r3, [r7, #23]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop

0800be64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be64:	b580      	push	{r7, lr}
 800be66:	b084      	sub	sp, #16
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
 800be6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be6e:	2300      	movs	r3, #0
 800be70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d101      	bne.n	800be80 <HAL_TIM_ConfigClockSource+0x1c>
 800be7c:	2302      	movs	r3, #2
 800be7e:	e0dc      	b.n	800c03a <HAL_TIM_ConfigClockSource+0x1d6>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2202      	movs	r2, #2
 800be8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	689b      	ldr	r3, [r3, #8]
 800be96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800be98:	68ba      	ldr	r2, [r7, #8]
 800be9a:	4b6a      	ldr	r3, [pc, #424]	@ (800c044 <HAL_TIM_ConfigClockSource+0x1e0>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a64      	ldr	r2, [pc, #400]	@ (800c048 <HAL_TIM_ConfigClockSource+0x1e4>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	f000 80a9 	beq.w	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800bebc:	4a62      	ldr	r2, [pc, #392]	@ (800c048 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	f200 80ae 	bhi.w	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bec4:	4a61      	ldr	r2, [pc, #388]	@ (800c04c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	f000 80a1 	beq.w	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800becc:	4a5f      	ldr	r2, [pc, #380]	@ (800c04c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	f200 80a6 	bhi.w	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bed4:	4a5e      	ldr	r2, [pc, #376]	@ (800c050 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	f000 8099 	beq.w	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800bedc:	4a5c      	ldr	r2, [pc, #368]	@ (800c050 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	f200 809e 	bhi.w	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bee4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bee8:	f000 8091 	beq.w	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800beec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bef0:	f200 8096 	bhi.w	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bef4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bef8:	f000 8089 	beq.w	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800befc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bf00:	f200 808e 	bhi.w	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf08:	d03e      	beq.n	800bf88 <HAL_TIM_ConfigClockSource+0x124>
 800bf0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf0e:	f200 8087 	bhi.w	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf16:	f000 8086 	beq.w	800c026 <HAL_TIM_ConfigClockSource+0x1c2>
 800bf1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf1e:	d87f      	bhi.n	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf20:	2b70      	cmp	r3, #112	@ 0x70
 800bf22:	d01a      	beq.n	800bf5a <HAL_TIM_ConfigClockSource+0xf6>
 800bf24:	2b70      	cmp	r3, #112	@ 0x70
 800bf26:	d87b      	bhi.n	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf28:	2b60      	cmp	r3, #96	@ 0x60
 800bf2a:	d050      	beq.n	800bfce <HAL_TIM_ConfigClockSource+0x16a>
 800bf2c:	2b60      	cmp	r3, #96	@ 0x60
 800bf2e:	d877      	bhi.n	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf30:	2b50      	cmp	r3, #80	@ 0x50
 800bf32:	d03c      	beq.n	800bfae <HAL_TIM_ConfigClockSource+0x14a>
 800bf34:	2b50      	cmp	r3, #80	@ 0x50
 800bf36:	d873      	bhi.n	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf38:	2b40      	cmp	r3, #64	@ 0x40
 800bf3a:	d058      	beq.n	800bfee <HAL_TIM_ConfigClockSource+0x18a>
 800bf3c:	2b40      	cmp	r3, #64	@ 0x40
 800bf3e:	d86f      	bhi.n	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf40:	2b30      	cmp	r3, #48	@ 0x30
 800bf42:	d064      	beq.n	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf44:	2b30      	cmp	r3, #48	@ 0x30
 800bf46:	d86b      	bhi.n	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf48:	2b20      	cmp	r3, #32
 800bf4a:	d060      	beq.n	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf4c:	2b20      	cmp	r3, #32
 800bf4e:	d867      	bhi.n	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d05c      	beq.n	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf54:	2b10      	cmp	r3, #16
 800bf56:	d05a      	beq.n	800c00e <HAL_TIM_ConfigClockSource+0x1aa>
 800bf58:	e062      	b.n	800c020 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf6a:	f000 fc8f 	bl	800c88c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bf7c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	609a      	str	r2, [r3, #8]
      break;
 800bf86:	e04f      	b.n	800c028 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf98:	f000 fc78 	bl	800c88c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	689a      	ldr	r2, [r3, #8]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bfaa:	609a      	str	r2, [r3, #8]
      break;
 800bfac:	e03c      	b.n	800c028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfba:	461a      	mov	r2, r3
 800bfbc:	f000 fbe8 	bl	800c790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2150      	movs	r1, #80	@ 0x50
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 fc42 	bl	800c850 <TIM_ITRx_SetConfig>
      break;
 800bfcc:	e02c      	b.n	800c028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfda:	461a      	mov	r2, r3
 800bfdc:	f000 fc07 	bl	800c7ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2160      	movs	r1, #96	@ 0x60
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f000 fc32 	bl	800c850 <TIM_ITRx_SetConfig>
      break;
 800bfec:	e01c      	b.n	800c028 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bffa:	461a      	mov	r2, r3
 800bffc:	f000 fbc8 	bl	800c790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2140      	movs	r1, #64	@ 0x40
 800c006:	4618      	mov	r0, r3
 800c008:	f000 fc22 	bl	800c850 <TIM_ITRx_SetConfig>
      break;
 800c00c:	e00c      	b.n	800c028 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	4619      	mov	r1, r3
 800c018:	4610      	mov	r0, r2
 800c01a:	f000 fc19 	bl	800c850 <TIM_ITRx_SetConfig>
      break;
 800c01e:	e003      	b.n	800c028 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	73fb      	strb	r3, [r7, #15]
      break;
 800c024:	e000      	b.n	800c028 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c026:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2200      	movs	r2, #0
 800c034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c038:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03a:	4618      	mov	r0, r3
 800c03c:	3710      	adds	r7, #16
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}
 800c042:	bf00      	nop
 800c044:	ffceff88 	.word	0xffceff88
 800c048:	00100040 	.word	0x00100040
 800c04c:	00100030 	.word	0x00100030
 800c050:	00100020 	.word	0x00100020

0800c054 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c066:	4770      	bx	lr

0800c068 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c068:	b480      	push	{r7}
 800c06a:	b083      	sub	sp, #12
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c070:	bf00      	nop
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c084:	bf00      	nop
 800c086:	370c      	adds	r7, #12
 800c088:	46bd      	mov	sp, r7
 800c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08e:	4770      	bx	lr

0800c090 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c098:	bf00      	nop
 800c09a:	370c      	adds	r7, #12
 800c09c:	46bd      	mov	sp, r7
 800c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a2:	4770      	bx	lr

0800c0a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a43      	ldr	r2, [pc, #268]	@ (800c1c4 <TIM_Base_SetConfig+0x120>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d013      	beq.n	800c0e4 <TIM_Base_SetConfig+0x40>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0c2:	d00f      	beq.n	800c0e4 <TIM_Base_SetConfig+0x40>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a40      	ldr	r2, [pc, #256]	@ (800c1c8 <TIM_Base_SetConfig+0x124>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d00b      	beq.n	800c0e4 <TIM_Base_SetConfig+0x40>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a3f      	ldr	r2, [pc, #252]	@ (800c1cc <TIM_Base_SetConfig+0x128>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d007      	beq.n	800c0e4 <TIM_Base_SetConfig+0x40>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a3e      	ldr	r2, [pc, #248]	@ (800c1d0 <TIM_Base_SetConfig+0x12c>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d003      	beq.n	800c0e4 <TIM_Base_SetConfig+0x40>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a3d      	ldr	r2, [pc, #244]	@ (800c1d4 <TIM_Base_SetConfig+0x130>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d108      	bne.n	800c0f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	68fa      	ldr	r2, [r7, #12]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a32      	ldr	r2, [pc, #200]	@ (800c1c4 <TIM_Base_SetConfig+0x120>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d01f      	beq.n	800c13e <TIM_Base_SetConfig+0x9a>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c104:	d01b      	beq.n	800c13e <TIM_Base_SetConfig+0x9a>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a2f      	ldr	r2, [pc, #188]	@ (800c1c8 <TIM_Base_SetConfig+0x124>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d017      	beq.n	800c13e <TIM_Base_SetConfig+0x9a>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a2e      	ldr	r2, [pc, #184]	@ (800c1cc <TIM_Base_SetConfig+0x128>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d013      	beq.n	800c13e <TIM_Base_SetConfig+0x9a>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a2d      	ldr	r2, [pc, #180]	@ (800c1d0 <TIM_Base_SetConfig+0x12c>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d00f      	beq.n	800c13e <TIM_Base_SetConfig+0x9a>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a2c      	ldr	r2, [pc, #176]	@ (800c1d4 <TIM_Base_SetConfig+0x130>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d00b      	beq.n	800c13e <TIM_Base_SetConfig+0x9a>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a2b      	ldr	r2, [pc, #172]	@ (800c1d8 <TIM_Base_SetConfig+0x134>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d007      	beq.n	800c13e <TIM_Base_SetConfig+0x9a>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a2a      	ldr	r2, [pc, #168]	@ (800c1dc <TIM_Base_SetConfig+0x138>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d003      	beq.n	800c13e <TIM_Base_SetConfig+0x9a>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a29      	ldr	r2, [pc, #164]	@ (800c1e0 <TIM_Base_SetConfig+0x13c>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d108      	bne.n	800c150 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	68db      	ldr	r3, [r3, #12]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	695b      	ldr	r3, [r3, #20]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	689a      	ldr	r2, [r3, #8]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	4a14      	ldr	r2, [pc, #80]	@ (800c1c4 <TIM_Base_SetConfig+0x120>)
 800c172:	4293      	cmp	r3, r2
 800c174:	d00f      	beq.n	800c196 <TIM_Base_SetConfig+0xf2>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a16      	ldr	r2, [pc, #88]	@ (800c1d4 <TIM_Base_SetConfig+0x130>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d00b      	beq.n	800c196 <TIM_Base_SetConfig+0xf2>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a15      	ldr	r2, [pc, #84]	@ (800c1d8 <TIM_Base_SetConfig+0x134>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d007      	beq.n	800c196 <TIM_Base_SetConfig+0xf2>
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a14      	ldr	r2, [pc, #80]	@ (800c1dc <TIM_Base_SetConfig+0x138>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d003      	beq.n	800c196 <TIM_Base_SetConfig+0xf2>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a13      	ldr	r2, [pc, #76]	@ (800c1e0 <TIM_Base_SetConfig+0x13c>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d103      	bne.n	800c19e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	691a      	ldr	r2, [r3, #16]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f043 0204 	orr.w	r2, r3, #4
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	601a      	str	r2, [r3, #0]
}
 800c1b6:	bf00      	nop
 800c1b8:	3714      	adds	r7, #20
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	40010000 	.word	0x40010000
 800c1c8:	40000400 	.word	0x40000400
 800c1cc:	40000800 	.word	0x40000800
 800c1d0:	40000c00 	.word	0x40000c00
 800c1d4:	40010400 	.word	0x40010400
 800c1d8:	40014000 	.word	0x40014000
 800c1dc:	40014400 	.word	0x40014400
 800c1e0:	40014800 	.word	0x40014800

0800c1e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b087      	sub	sp, #28
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6a1b      	ldr	r3, [r3, #32]
 800c1f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	6a1b      	ldr	r3, [r3, #32]
 800c1f8:	f023 0201 	bic.w	r2, r3, #1
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	699b      	ldr	r3, [r3, #24]
 800c20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	4b37      	ldr	r3, [pc, #220]	@ (800c2ec <TIM_OC1_SetConfig+0x108>)
 800c210:	4013      	ands	r3, r2
 800c212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f023 0303 	bic.w	r3, r3, #3
 800c21a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	4313      	orrs	r3, r2
 800c224:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	f023 0302 	bic.w	r3, r3, #2
 800c22c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	697a      	ldr	r2, [r7, #20]
 800c234:	4313      	orrs	r3, r2
 800c236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4a2d      	ldr	r2, [pc, #180]	@ (800c2f0 <TIM_OC1_SetConfig+0x10c>)
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d00f      	beq.n	800c260 <TIM_OC1_SetConfig+0x7c>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	4a2c      	ldr	r2, [pc, #176]	@ (800c2f4 <TIM_OC1_SetConfig+0x110>)
 800c244:	4293      	cmp	r3, r2
 800c246:	d00b      	beq.n	800c260 <TIM_OC1_SetConfig+0x7c>
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	4a2b      	ldr	r2, [pc, #172]	@ (800c2f8 <TIM_OC1_SetConfig+0x114>)
 800c24c:	4293      	cmp	r3, r2
 800c24e:	d007      	beq.n	800c260 <TIM_OC1_SetConfig+0x7c>
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a2a      	ldr	r2, [pc, #168]	@ (800c2fc <TIM_OC1_SetConfig+0x118>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d003      	beq.n	800c260 <TIM_OC1_SetConfig+0x7c>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a29      	ldr	r2, [pc, #164]	@ (800c300 <TIM_OC1_SetConfig+0x11c>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d10c      	bne.n	800c27a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f023 0308 	bic.w	r3, r3, #8
 800c266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	697a      	ldr	r2, [r7, #20]
 800c26e:	4313      	orrs	r3, r2
 800c270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f023 0304 	bic.w	r3, r3, #4
 800c278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a1c      	ldr	r2, [pc, #112]	@ (800c2f0 <TIM_OC1_SetConfig+0x10c>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d00f      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xbe>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a1b      	ldr	r2, [pc, #108]	@ (800c2f4 <TIM_OC1_SetConfig+0x110>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d00b      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xbe>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a1a      	ldr	r2, [pc, #104]	@ (800c2f8 <TIM_OC1_SetConfig+0x114>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d007      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xbe>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4a19      	ldr	r2, [pc, #100]	@ (800c2fc <TIM_OC1_SetConfig+0x118>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d003      	beq.n	800c2a2 <TIM_OC1_SetConfig+0xbe>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4a18      	ldr	r2, [pc, #96]	@ (800c300 <TIM_OC1_SetConfig+0x11c>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d111      	bne.n	800c2c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c2a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c2b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	4313      	orrs	r3, r2
 800c2ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	699b      	ldr	r3, [r3, #24]
 800c2c0:	693a      	ldr	r2, [r7, #16]
 800c2c2:	4313      	orrs	r3, r2
 800c2c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	68fa      	ldr	r2, [r7, #12]
 800c2d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	685a      	ldr	r2, [r3, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	621a      	str	r2, [r3, #32]
}
 800c2e0:	bf00      	nop
 800c2e2:	371c      	adds	r7, #28
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	fffeff8f 	.word	0xfffeff8f
 800c2f0:	40010000 	.word	0x40010000
 800c2f4:	40010400 	.word	0x40010400
 800c2f8:	40014000 	.word	0x40014000
 800c2fc:	40014400 	.word	0x40014400
 800c300:	40014800 	.word	0x40014800

0800c304 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	f023 0210 	bic.w	r2, r3, #16
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4b34      	ldr	r3, [pc, #208]	@ (800c400 <TIM_OC2_SetConfig+0xfc>)
 800c330:	4013      	ands	r3, r2
 800c332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c33a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	021b      	lsls	r3, r3, #8
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	4313      	orrs	r3, r2
 800c346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	f023 0320 	bic.w	r3, r3, #32
 800c34e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	689b      	ldr	r3, [r3, #8]
 800c354:	011b      	lsls	r3, r3, #4
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	4313      	orrs	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	4a29      	ldr	r2, [pc, #164]	@ (800c404 <TIM_OC2_SetConfig+0x100>)
 800c360:	4293      	cmp	r3, r2
 800c362:	d003      	beq.n	800c36c <TIM_OC2_SetConfig+0x68>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	4a28      	ldr	r2, [pc, #160]	@ (800c408 <TIM_OC2_SetConfig+0x104>)
 800c368:	4293      	cmp	r3, r2
 800c36a:	d10d      	bne.n	800c388 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c372:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	68db      	ldr	r3, [r3, #12]
 800c378:	011b      	lsls	r3, r3, #4
 800c37a:	697a      	ldr	r2, [r7, #20]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c386:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a1e      	ldr	r2, [pc, #120]	@ (800c404 <TIM_OC2_SetConfig+0x100>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d00f      	beq.n	800c3b0 <TIM_OC2_SetConfig+0xac>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a1d      	ldr	r2, [pc, #116]	@ (800c408 <TIM_OC2_SetConfig+0x104>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d00b      	beq.n	800c3b0 <TIM_OC2_SetConfig+0xac>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	4a1c      	ldr	r2, [pc, #112]	@ (800c40c <TIM_OC2_SetConfig+0x108>)
 800c39c:	4293      	cmp	r3, r2
 800c39e:	d007      	beq.n	800c3b0 <TIM_OC2_SetConfig+0xac>
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4a1b      	ldr	r2, [pc, #108]	@ (800c410 <TIM_OC2_SetConfig+0x10c>)
 800c3a4:	4293      	cmp	r3, r2
 800c3a6:	d003      	beq.n	800c3b0 <TIM_OC2_SetConfig+0xac>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a1a      	ldr	r2, [pc, #104]	@ (800c414 <TIM_OC2_SetConfig+0x110>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d113      	bne.n	800c3d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c3b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c3be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	695b      	ldr	r3, [r3, #20]
 800c3c4:	009b      	lsls	r3, r3, #2
 800c3c6:	693a      	ldr	r2, [r7, #16]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	693a      	ldr	r2, [r7, #16]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	693a      	ldr	r2, [r7, #16]
 800c3dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	685a      	ldr	r2, [r3, #4]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	621a      	str	r2, [r3, #32]
}
 800c3f2:	bf00      	nop
 800c3f4:	371c      	adds	r7, #28
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	feff8fff 	.word	0xfeff8fff
 800c404:	40010000 	.word	0x40010000
 800c408:	40010400 	.word	0x40010400
 800c40c:	40014000 	.word	0x40014000
 800c410:	40014400 	.word	0x40014400
 800c414:	40014800 	.word	0x40014800

0800c418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6a1b      	ldr	r3, [r3, #32]
 800c426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6a1b      	ldr	r3, [r3, #32]
 800c42c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	69db      	ldr	r3, [r3, #28]
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	4b33      	ldr	r3, [pc, #204]	@ (800c510 <TIM_OC3_SetConfig+0xf8>)
 800c444:	4013      	ands	r3, r2
 800c446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f023 0303 	bic.w	r3, r3, #3
 800c44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	4313      	orrs	r3, r2
 800c458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	021b      	lsls	r3, r3, #8
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a28      	ldr	r2, [pc, #160]	@ (800c514 <TIM_OC3_SetConfig+0xfc>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d003      	beq.n	800c47e <TIM_OC3_SetConfig+0x66>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a27      	ldr	r2, [pc, #156]	@ (800c518 <TIM_OC3_SetConfig+0x100>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d10d      	bne.n	800c49a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c484:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	021b      	lsls	r3, r3, #8
 800c48c:	697a      	ldr	r2, [r7, #20]
 800c48e:	4313      	orrs	r3, r2
 800c490:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c498:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	4a1d      	ldr	r2, [pc, #116]	@ (800c514 <TIM_OC3_SetConfig+0xfc>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d00f      	beq.n	800c4c2 <TIM_OC3_SetConfig+0xaa>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c518 <TIM_OC3_SetConfig+0x100>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	d00b      	beq.n	800c4c2 <TIM_OC3_SetConfig+0xaa>
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	4a1b      	ldr	r2, [pc, #108]	@ (800c51c <TIM_OC3_SetConfig+0x104>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	d007      	beq.n	800c4c2 <TIM_OC3_SetConfig+0xaa>
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a1a      	ldr	r2, [pc, #104]	@ (800c520 <TIM_OC3_SetConfig+0x108>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d003      	beq.n	800c4c2 <TIM_OC3_SetConfig+0xaa>
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	4a19      	ldr	r2, [pc, #100]	@ (800c524 <TIM_OC3_SetConfig+0x10c>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d113      	bne.n	800c4ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c4c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c4d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	011b      	lsls	r3, r3, #4
 800c4d8:	693a      	ldr	r2, [r7, #16]
 800c4da:	4313      	orrs	r3, r2
 800c4dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	699b      	ldr	r3, [r3, #24]
 800c4e2:	011b      	lsls	r3, r3, #4
 800c4e4:	693a      	ldr	r2, [r7, #16]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	685a      	ldr	r2, [r3, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	697a      	ldr	r2, [r7, #20]
 800c502:	621a      	str	r2, [r3, #32]
}
 800c504:	bf00      	nop
 800c506:	371c      	adds	r7, #28
 800c508:	46bd      	mov	sp, r7
 800c50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50e:	4770      	bx	lr
 800c510:	fffeff8f 	.word	0xfffeff8f
 800c514:	40010000 	.word	0x40010000
 800c518:	40010400 	.word	0x40010400
 800c51c:	40014000 	.word	0x40014000
 800c520:	40014400 	.word	0x40014400
 800c524:	40014800 	.word	0x40014800

0800c528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	6a1b      	ldr	r3, [r3, #32]
 800c53c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	69db      	ldr	r3, [r3, #28]
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c550:	68fa      	ldr	r2, [r7, #12]
 800c552:	4b24      	ldr	r3, [pc, #144]	@ (800c5e4 <TIM_OC4_SetConfig+0xbc>)
 800c554:	4013      	ands	r3, r2
 800c556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	021b      	lsls	r3, r3, #8
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4313      	orrs	r3, r2
 800c56a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c56c:	693b      	ldr	r3, [r7, #16]
 800c56e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	031b      	lsls	r3, r3, #12
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	4a19      	ldr	r2, [pc, #100]	@ (800c5e8 <TIM_OC4_SetConfig+0xc0>)
 800c584:	4293      	cmp	r3, r2
 800c586:	d00f      	beq.n	800c5a8 <TIM_OC4_SetConfig+0x80>
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4a18      	ldr	r2, [pc, #96]	@ (800c5ec <TIM_OC4_SetConfig+0xc4>)
 800c58c:	4293      	cmp	r3, r2
 800c58e:	d00b      	beq.n	800c5a8 <TIM_OC4_SetConfig+0x80>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4a17      	ldr	r2, [pc, #92]	@ (800c5f0 <TIM_OC4_SetConfig+0xc8>)
 800c594:	4293      	cmp	r3, r2
 800c596:	d007      	beq.n	800c5a8 <TIM_OC4_SetConfig+0x80>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4a16      	ldr	r2, [pc, #88]	@ (800c5f4 <TIM_OC4_SetConfig+0xcc>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d003      	beq.n	800c5a8 <TIM_OC4_SetConfig+0x80>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	4a15      	ldr	r2, [pc, #84]	@ (800c5f8 <TIM_OC4_SetConfig+0xd0>)
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d109      	bne.n	800c5bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	695b      	ldr	r3, [r3, #20]
 800c5b4:	019b      	lsls	r3, r3, #6
 800c5b6:	697a      	ldr	r2, [r7, #20]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	697a      	ldr	r2, [r7, #20]
 800c5c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	68fa      	ldr	r2, [r7, #12]
 800c5c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	685a      	ldr	r2, [r3, #4]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	693a      	ldr	r2, [r7, #16]
 800c5d4:	621a      	str	r2, [r3, #32]
}
 800c5d6:	bf00      	nop
 800c5d8:	371c      	adds	r7, #28
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	feff8fff 	.word	0xfeff8fff
 800c5e8:	40010000 	.word	0x40010000
 800c5ec:	40010400 	.word	0x40010400
 800c5f0:	40014000 	.word	0x40014000
 800c5f4:	40014400 	.word	0x40014400
 800c5f8:	40014800 	.word	0x40014800

0800c5fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b087      	sub	sp, #28
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6a1b      	ldr	r3, [r3, #32]
 800c60a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a1b      	ldr	r3, [r3, #32]
 800c610:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4b21      	ldr	r3, [pc, #132]	@ (800c6ac <TIM_OC5_SetConfig+0xb0>)
 800c628:	4013      	ands	r3, r2
 800c62a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	68fa      	ldr	r2, [r7, #12]
 800c632:	4313      	orrs	r3, r2
 800c634:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c63c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	041b      	lsls	r3, r3, #16
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	4313      	orrs	r3, r2
 800c648:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a18      	ldr	r2, [pc, #96]	@ (800c6b0 <TIM_OC5_SetConfig+0xb4>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d00f      	beq.n	800c672 <TIM_OC5_SetConfig+0x76>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a17      	ldr	r2, [pc, #92]	@ (800c6b4 <TIM_OC5_SetConfig+0xb8>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d00b      	beq.n	800c672 <TIM_OC5_SetConfig+0x76>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a16      	ldr	r2, [pc, #88]	@ (800c6b8 <TIM_OC5_SetConfig+0xbc>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d007      	beq.n	800c672 <TIM_OC5_SetConfig+0x76>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a15      	ldr	r2, [pc, #84]	@ (800c6bc <TIM_OC5_SetConfig+0xc0>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d003      	beq.n	800c672 <TIM_OC5_SetConfig+0x76>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	4a14      	ldr	r2, [pc, #80]	@ (800c6c0 <TIM_OC5_SetConfig+0xc4>)
 800c66e:	4293      	cmp	r3, r2
 800c670:	d109      	bne.n	800c686 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c678:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	695b      	ldr	r3, [r3, #20]
 800c67e:	021b      	lsls	r3, r3, #8
 800c680:	697a      	ldr	r2, [r7, #20]
 800c682:	4313      	orrs	r3, r2
 800c684:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	693a      	ldr	r2, [r7, #16]
 800c69e:	621a      	str	r2, [r3, #32]
}
 800c6a0:	bf00      	nop
 800c6a2:	371c      	adds	r7, #28
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	fffeff8f 	.word	0xfffeff8f
 800c6b0:	40010000 	.word	0x40010000
 800c6b4:	40010400 	.word	0x40010400
 800c6b8:	40014000 	.word	0x40014000
 800c6bc:	40014400 	.word	0x40014400
 800c6c0:	40014800 	.word	0x40014800

0800c6c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b087      	sub	sp, #28
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6a1b      	ldr	r3, [r3, #32]
 800c6d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	4b22      	ldr	r3, [pc, #136]	@ (800c778 <TIM_OC6_SetConfig+0xb4>)
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	021b      	lsls	r3, r3, #8
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	051b      	lsls	r3, r3, #20
 800c70e:	693a      	ldr	r2, [r7, #16]
 800c710:	4313      	orrs	r3, r2
 800c712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a19      	ldr	r2, [pc, #100]	@ (800c77c <TIM_OC6_SetConfig+0xb8>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d00f      	beq.n	800c73c <TIM_OC6_SetConfig+0x78>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a18      	ldr	r2, [pc, #96]	@ (800c780 <TIM_OC6_SetConfig+0xbc>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d00b      	beq.n	800c73c <TIM_OC6_SetConfig+0x78>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a17      	ldr	r2, [pc, #92]	@ (800c784 <TIM_OC6_SetConfig+0xc0>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d007      	beq.n	800c73c <TIM_OC6_SetConfig+0x78>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a16      	ldr	r2, [pc, #88]	@ (800c788 <TIM_OC6_SetConfig+0xc4>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d003      	beq.n	800c73c <TIM_OC6_SetConfig+0x78>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a15      	ldr	r2, [pc, #84]	@ (800c78c <TIM_OC6_SetConfig+0xc8>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d109      	bne.n	800c750 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c742:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	029b      	lsls	r3, r3, #10
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	685a      	ldr	r2, [r3, #4]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	621a      	str	r2, [r3, #32]
}
 800c76a:	bf00      	nop
 800c76c:	371c      	adds	r7, #28
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	feff8fff 	.word	0xfeff8fff
 800c77c:	40010000 	.word	0x40010000
 800c780:	40010400 	.word	0x40010400
 800c784:	40014000 	.word	0x40014000
 800c788:	40014400 	.word	0x40014400
 800c78c:	40014800 	.word	0x40014800

0800c790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c790:	b480      	push	{r7}
 800c792:	b087      	sub	sp, #28
 800c794:	af00      	add	r7, sp, #0
 800c796:	60f8      	str	r0, [r7, #12]
 800c798:	60b9      	str	r1, [r7, #8]
 800c79a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	6a1b      	ldr	r3, [r3, #32]
 800c7a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6a1b      	ldr	r3, [r3, #32]
 800c7a6:	f023 0201 	bic.w	r2, r3, #1
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c7ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	011b      	lsls	r3, r3, #4
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	f023 030a 	bic.w	r3, r3, #10
 800c7cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c7ce:	697a      	ldr	r2, [r7, #20]
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	621a      	str	r2, [r3, #32]
}
 800c7e2:	bf00      	nop
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr

0800c7ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c7ee:	b480      	push	{r7}
 800c7f0:	b087      	sub	sp, #28
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	60f8      	str	r0, [r7, #12]
 800c7f6:	60b9      	str	r1, [r7, #8]
 800c7f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6a1b      	ldr	r3, [r3, #32]
 800c804:	f023 0210 	bic.w	r2, r3, #16
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	031b      	lsls	r3, r3, #12
 800c81e:	693a      	ldr	r2, [r7, #16]
 800c820:	4313      	orrs	r3, r2
 800c822:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c82a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	011b      	lsls	r3, r3, #4
 800c830:	697a      	ldr	r2, [r7, #20]
 800c832:	4313      	orrs	r3, r2
 800c834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	693a      	ldr	r2, [r7, #16]
 800c83a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	697a      	ldr	r2, [r7, #20]
 800c840:	621a      	str	r2, [r3, #32]
}
 800c842:	bf00      	nop
 800c844:	371c      	adds	r7, #28
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr
	...

0800c850 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c850:	b480      	push	{r7}
 800c852:	b085      	sub	sp, #20
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
 800c858:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	689b      	ldr	r3, [r3, #8]
 800c85e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	4b09      	ldr	r3, [pc, #36]	@ (800c888 <TIM_ITRx_SetConfig+0x38>)
 800c864:	4013      	ands	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	f043 0307 	orr.w	r3, r3, #7
 800c872:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	68fa      	ldr	r2, [r7, #12]
 800c878:	609a      	str	r2, [r3, #8]
}
 800c87a:	bf00      	nop
 800c87c:	3714      	adds	r7, #20
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr
 800c886:	bf00      	nop
 800c888:	ffcfff8f 	.word	0xffcfff8f

0800c88c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c88c:	b480      	push	{r7}
 800c88e:	b087      	sub	sp, #28
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
 800c898:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c8a0:	697b      	ldr	r3, [r7, #20]
 800c8a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c8a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	021a      	lsls	r2, r3, #8
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	431a      	orrs	r2, r3
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	697a      	ldr	r2, [r7, #20]
 800c8be:	609a      	str	r2, [r3, #8]
}
 800c8c0:	bf00      	nop
 800c8c2:	371c      	adds	r7, #28
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b087      	sub	sp, #28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	f003 031f 	and.w	r3, r3, #31
 800c8de:	2201      	movs	r2, #1
 800c8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	6a1a      	ldr	r2, [r3, #32]
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	43db      	mvns	r3, r3
 800c8ee:	401a      	ands	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	6a1a      	ldr	r2, [r3, #32]
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	f003 031f 	and.w	r3, r3, #31
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	fa01 f303 	lsl.w	r3, r1, r3
 800c904:	431a      	orrs	r2, r3
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	621a      	str	r2, [r3, #32]
}
 800c90a:	bf00      	nop
 800c90c:	371c      	adds	r7, #28
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
	...

0800c918 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d101      	bne.n	800c930 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c92c:	2302      	movs	r3, #2
 800c92e:	e06d      	b.n	800ca0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2201      	movs	r2, #1
 800c934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2202      	movs	r2, #2
 800c93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	685b      	ldr	r3, [r3, #4]
 800c946:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	4a30      	ldr	r2, [pc, #192]	@ (800ca18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c956:	4293      	cmp	r3, r2
 800c958:	d004      	beq.n	800c964 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a2f      	ldr	r2, [pc, #188]	@ (800ca1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c960:	4293      	cmp	r3, r2
 800c962:	d108      	bne.n	800c976 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c96a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	4313      	orrs	r3, r2
 800c974:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c97c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68fa      	ldr	r2, [r7, #12]
 800c984:	4313      	orrs	r3, r2
 800c986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	68fa      	ldr	r2, [r7, #12]
 800c98e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	4a20      	ldr	r2, [pc, #128]	@ (800ca18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d022      	beq.n	800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9a2:	d01d      	beq.n	800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a1d      	ldr	r2, [pc, #116]	@ (800ca20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c9aa:	4293      	cmp	r3, r2
 800c9ac:	d018      	beq.n	800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4a1c      	ldr	r2, [pc, #112]	@ (800ca24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d013      	beq.n	800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4a1a      	ldr	r2, [pc, #104]	@ (800ca28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d00e      	beq.n	800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a15      	ldr	r2, [pc, #84]	@ (800ca1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d009      	beq.n	800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a16      	ldr	r2, [pc, #88]	@ (800ca2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d004      	beq.n	800c9e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a15      	ldr	r2, [pc, #84]	@ (800ca30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c9dc:	4293      	cmp	r3, r2
 800c9de:	d10c      	bne.n	800c9fa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c9e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	68ba      	ldr	r2, [r7, #8]
 800c9ee:	4313      	orrs	r3, r2
 800c9f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68ba      	ldr	r2, [r7, #8]
 800c9f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3714      	adds	r7, #20
 800ca10:	46bd      	mov	sp, r7
 800ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca16:	4770      	bx	lr
 800ca18:	40010000 	.word	0x40010000
 800ca1c:	40010400 	.word	0x40010400
 800ca20:	40000400 	.word	0x40000400
 800ca24:	40000800 	.word	0x40000800
 800ca28:	40000c00 	.word	0x40000c00
 800ca2c:	40001800 	.word	0x40001800
 800ca30:	40014000 	.word	0x40014000

0800ca34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d101      	bne.n	800ca50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	e065      	b.n	800cb1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	68db      	ldr	r3, [r3, #12]
 800ca62:	4313      	orrs	r3, r2
 800ca64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	4313      	orrs	r3, r2
 800ca72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	4313      	orrs	r3, r2
 800ca9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	695b      	ldr	r3, [r3, #20]
 800caa8:	4313      	orrs	r3, r2
 800caaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cab6:	4313      	orrs	r3, r2
 800cab8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	041b      	lsls	r3, r3, #16
 800cac6:	4313      	orrs	r3, r2
 800cac8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	4a16      	ldr	r2, [pc, #88]	@ (800cb28 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800cad0:	4293      	cmp	r3, r2
 800cad2:	d004      	beq.n	800cade <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	4a14      	ldr	r2, [pc, #80]	@ (800cb2c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d115      	bne.n	800cb0a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cae8:	051b      	lsls	r3, r3, #20
 800caea:	4313      	orrs	r3, r2
 800caec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	69db      	ldr	r3, [r3, #28]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	6a1b      	ldr	r3, [r3, #32]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb1a:	2300      	movs	r3, #0
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3714      	adds	r7, #20
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr
 800cb28:	40010000 	.word	0x40010000
 800cb2c:	40010400 	.word	0x40010400

0800cb30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb4c:	bf00      	nop
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b083      	sub	sp, #12
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb60:	bf00      	nop
 800cb62:	370c      	adds	r7, #12
 800cb64:	46bd      	mov	sp, r7
 800cb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6a:	4770      	bx	lr

0800cb6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b082      	sub	sp, #8
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d101      	bne.n	800cb7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	e042      	b.n	800cc04 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d106      	bne.n	800cb96 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f7f5 fea5 	bl	80028e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2224      	movs	r2, #36	@ 0x24
 800cb9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f022 0201 	bic.w	r2, r2, #1
 800cbac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d002      	beq.n	800cbbc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 fd90 	bl	800d6dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f825 	bl	800cc0c <UART_SetConfig>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	d101      	bne.n	800cbcc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e01b      	b.n	800cc04 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	685a      	ldr	r2, [r3, #4]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	689a      	ldr	r2, [r3, #8]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cbea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f042 0201 	orr.w	r2, r2, #1
 800cbfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 fe0f 	bl	800d820 <UART_CheckIdleState>
 800cc02:	4603      	mov	r3, r0
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cc0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc10:	b092      	sub	sp, #72	@ 0x48
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cc16:	2300      	movs	r3, #0
 800cc18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	689a      	ldr	r2, [r3, #8]
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	431a      	orrs	r2, r3
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	695b      	ldr	r3, [r3, #20]
 800cc2a:	431a      	orrs	r2, r3
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	69db      	ldr	r3, [r3, #28]
 800cc30:	4313      	orrs	r3, r2
 800cc32:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	4bbe      	ldr	r3, [pc, #760]	@ (800cf34 <UART_SetConfig+0x328>)
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	697a      	ldr	r2, [r7, #20]
 800cc40:	6812      	ldr	r2, [r2, #0]
 800cc42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc44:	430b      	orrs	r3, r1
 800cc46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cc48:	697b      	ldr	r3, [r7, #20]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	68da      	ldr	r2, [r3, #12]
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	430a      	orrs	r2, r1
 800cc5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cc5e:	697b      	ldr	r3, [r7, #20]
 800cc60:	699b      	ldr	r3, [r3, #24]
 800cc62:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	4ab3      	ldr	r2, [pc, #716]	@ (800cf38 <UART_SetConfig+0x32c>)
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d004      	beq.n	800cc78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cc6e:	697b      	ldr	r3, [r7, #20]
 800cc70:	6a1b      	ldr	r3, [r3, #32]
 800cc72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc74:	4313      	orrs	r3, r2
 800cc76:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	689a      	ldr	r2, [r3, #8]
 800cc7e:	4baf      	ldr	r3, [pc, #700]	@ (800cf3c <UART_SetConfig+0x330>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	6812      	ldr	r2, [r2, #0]
 800cc86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cc88:	430b      	orrs	r3, r1
 800cc8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cc8c:	697b      	ldr	r3, [r7, #20]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc92:	f023 010f 	bic.w	r1, r3, #15
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	430a      	orrs	r2, r1
 800cca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4aa6      	ldr	r2, [pc, #664]	@ (800cf40 <UART_SetConfig+0x334>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d177      	bne.n	800cd9c <UART_SetConfig+0x190>
 800ccac:	4ba5      	ldr	r3, [pc, #660]	@ (800cf44 <UART_SetConfig+0x338>)
 800ccae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ccb4:	2b28      	cmp	r3, #40	@ 0x28
 800ccb6:	d86d      	bhi.n	800cd94 <UART_SetConfig+0x188>
 800ccb8:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc0 <UART_SetConfig+0xb4>)
 800ccba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccbe:	bf00      	nop
 800ccc0:	0800cd65 	.word	0x0800cd65
 800ccc4:	0800cd95 	.word	0x0800cd95
 800ccc8:	0800cd95 	.word	0x0800cd95
 800cccc:	0800cd95 	.word	0x0800cd95
 800ccd0:	0800cd95 	.word	0x0800cd95
 800ccd4:	0800cd95 	.word	0x0800cd95
 800ccd8:	0800cd95 	.word	0x0800cd95
 800ccdc:	0800cd95 	.word	0x0800cd95
 800cce0:	0800cd6d 	.word	0x0800cd6d
 800cce4:	0800cd95 	.word	0x0800cd95
 800cce8:	0800cd95 	.word	0x0800cd95
 800ccec:	0800cd95 	.word	0x0800cd95
 800ccf0:	0800cd95 	.word	0x0800cd95
 800ccf4:	0800cd95 	.word	0x0800cd95
 800ccf8:	0800cd95 	.word	0x0800cd95
 800ccfc:	0800cd95 	.word	0x0800cd95
 800cd00:	0800cd75 	.word	0x0800cd75
 800cd04:	0800cd95 	.word	0x0800cd95
 800cd08:	0800cd95 	.word	0x0800cd95
 800cd0c:	0800cd95 	.word	0x0800cd95
 800cd10:	0800cd95 	.word	0x0800cd95
 800cd14:	0800cd95 	.word	0x0800cd95
 800cd18:	0800cd95 	.word	0x0800cd95
 800cd1c:	0800cd95 	.word	0x0800cd95
 800cd20:	0800cd7d 	.word	0x0800cd7d
 800cd24:	0800cd95 	.word	0x0800cd95
 800cd28:	0800cd95 	.word	0x0800cd95
 800cd2c:	0800cd95 	.word	0x0800cd95
 800cd30:	0800cd95 	.word	0x0800cd95
 800cd34:	0800cd95 	.word	0x0800cd95
 800cd38:	0800cd95 	.word	0x0800cd95
 800cd3c:	0800cd95 	.word	0x0800cd95
 800cd40:	0800cd85 	.word	0x0800cd85
 800cd44:	0800cd95 	.word	0x0800cd95
 800cd48:	0800cd95 	.word	0x0800cd95
 800cd4c:	0800cd95 	.word	0x0800cd95
 800cd50:	0800cd95 	.word	0x0800cd95
 800cd54:	0800cd95 	.word	0x0800cd95
 800cd58:	0800cd95 	.word	0x0800cd95
 800cd5c:	0800cd95 	.word	0x0800cd95
 800cd60:	0800cd8d 	.word	0x0800cd8d
 800cd64:	2301      	movs	r3, #1
 800cd66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6a:	e222      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cd6c:	2304      	movs	r3, #4
 800cd6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd72:	e21e      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cd74:	2308      	movs	r3, #8
 800cd76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd7a:	e21a      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cd7c:	2310      	movs	r3, #16
 800cd7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd82:	e216      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cd84:	2320      	movs	r3, #32
 800cd86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd8a:	e212      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cd8c:	2340      	movs	r3, #64	@ 0x40
 800cd8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd92:	e20e      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cd94:	2380      	movs	r3, #128	@ 0x80
 800cd96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd9a:	e20a      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a69      	ldr	r2, [pc, #420]	@ (800cf48 <UART_SetConfig+0x33c>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d130      	bne.n	800ce08 <UART_SetConfig+0x1fc>
 800cda6:	4b67      	ldr	r3, [pc, #412]	@ (800cf44 <UART_SetConfig+0x338>)
 800cda8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cdaa:	f003 0307 	and.w	r3, r3, #7
 800cdae:	2b05      	cmp	r3, #5
 800cdb0:	d826      	bhi.n	800ce00 <UART_SetConfig+0x1f4>
 800cdb2:	a201      	add	r2, pc, #4	@ (adr r2, 800cdb8 <UART_SetConfig+0x1ac>)
 800cdb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb8:	0800cdd1 	.word	0x0800cdd1
 800cdbc:	0800cdd9 	.word	0x0800cdd9
 800cdc0:	0800cde1 	.word	0x0800cde1
 800cdc4:	0800cde9 	.word	0x0800cde9
 800cdc8:	0800cdf1 	.word	0x0800cdf1
 800cdcc:	0800cdf9 	.word	0x0800cdf9
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdd6:	e1ec      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cdd8:	2304      	movs	r3, #4
 800cdda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdde:	e1e8      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cde0:	2308      	movs	r3, #8
 800cde2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cde6:	e1e4      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cde8:	2310      	movs	r3, #16
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdee:	e1e0      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cdf0:	2320      	movs	r3, #32
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf6:	e1dc      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cdf8:	2340      	movs	r3, #64	@ 0x40
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfe:	e1d8      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce00:	2380      	movs	r3, #128	@ 0x80
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce06:	e1d4      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce08:	697b      	ldr	r3, [r7, #20]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a4f      	ldr	r2, [pc, #316]	@ (800cf4c <UART_SetConfig+0x340>)
 800ce0e:	4293      	cmp	r3, r2
 800ce10:	d130      	bne.n	800ce74 <UART_SetConfig+0x268>
 800ce12:	4b4c      	ldr	r3, [pc, #304]	@ (800cf44 <UART_SetConfig+0x338>)
 800ce14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce16:	f003 0307 	and.w	r3, r3, #7
 800ce1a:	2b05      	cmp	r3, #5
 800ce1c:	d826      	bhi.n	800ce6c <UART_SetConfig+0x260>
 800ce1e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce24 <UART_SetConfig+0x218>)
 800ce20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce24:	0800ce3d 	.word	0x0800ce3d
 800ce28:	0800ce45 	.word	0x0800ce45
 800ce2c:	0800ce4d 	.word	0x0800ce4d
 800ce30:	0800ce55 	.word	0x0800ce55
 800ce34:	0800ce5d 	.word	0x0800ce5d
 800ce38:	0800ce65 	.word	0x0800ce65
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce42:	e1b6      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce44:	2304      	movs	r3, #4
 800ce46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce4a:	e1b2      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce4c:	2308      	movs	r3, #8
 800ce4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce52:	e1ae      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce54:	2310      	movs	r3, #16
 800ce56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce5a:	e1aa      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce5c:	2320      	movs	r3, #32
 800ce5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce62:	e1a6      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce64:	2340      	movs	r3, #64	@ 0x40
 800ce66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce6a:	e1a2      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce6c:	2380      	movs	r3, #128	@ 0x80
 800ce6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ce72:	e19e      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ce74:	697b      	ldr	r3, [r7, #20]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4a35      	ldr	r2, [pc, #212]	@ (800cf50 <UART_SetConfig+0x344>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d130      	bne.n	800cee0 <UART_SetConfig+0x2d4>
 800ce7e:	4b31      	ldr	r3, [pc, #196]	@ (800cf44 <UART_SetConfig+0x338>)
 800ce80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce82:	f003 0307 	and.w	r3, r3, #7
 800ce86:	2b05      	cmp	r3, #5
 800ce88:	d826      	bhi.n	800ced8 <UART_SetConfig+0x2cc>
 800ce8a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce90 <UART_SetConfig+0x284>)
 800ce8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce90:	0800cea9 	.word	0x0800cea9
 800ce94:	0800ceb1 	.word	0x0800ceb1
 800ce98:	0800ceb9 	.word	0x0800ceb9
 800ce9c:	0800cec1 	.word	0x0800cec1
 800cea0:	0800cec9 	.word	0x0800cec9
 800cea4:	0800ced1 	.word	0x0800ced1
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceae:	e180      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ceb0:	2304      	movs	r3, #4
 800ceb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceb6:	e17c      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ceb8:	2308      	movs	r3, #8
 800ceba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cebe:	e178      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cec0:	2310      	movs	r3, #16
 800cec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec6:	e174      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cec8:	2320      	movs	r3, #32
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cece:	e170      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ced0:	2340      	movs	r3, #64	@ 0x40
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced6:	e16c      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800ced8:	2380      	movs	r3, #128	@ 0x80
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cede:	e168      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	4a1b      	ldr	r2, [pc, #108]	@ (800cf54 <UART_SetConfig+0x348>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d142      	bne.n	800cf70 <UART_SetConfig+0x364>
 800ceea:	4b16      	ldr	r3, [pc, #88]	@ (800cf44 <UART_SetConfig+0x338>)
 800ceec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ceee:	f003 0307 	and.w	r3, r3, #7
 800cef2:	2b05      	cmp	r3, #5
 800cef4:	d838      	bhi.n	800cf68 <UART_SetConfig+0x35c>
 800cef6:	a201      	add	r2, pc, #4	@ (adr r2, 800cefc <UART_SetConfig+0x2f0>)
 800cef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cefc:	0800cf15 	.word	0x0800cf15
 800cf00:	0800cf1d 	.word	0x0800cf1d
 800cf04:	0800cf25 	.word	0x0800cf25
 800cf08:	0800cf2d 	.word	0x0800cf2d
 800cf0c:	0800cf59 	.word	0x0800cf59
 800cf10:	0800cf61 	.word	0x0800cf61
 800cf14:	2300      	movs	r3, #0
 800cf16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1a:	e14a      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cf1c:	2304      	movs	r3, #4
 800cf1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf22:	e146      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cf24:	2308      	movs	r3, #8
 800cf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2a:	e142      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cf2c:	2310      	movs	r3, #16
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf32:	e13e      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cf34:	cfff69f3 	.word	0xcfff69f3
 800cf38:	58000c00 	.word	0x58000c00
 800cf3c:	11fff4ff 	.word	0x11fff4ff
 800cf40:	40011000 	.word	0x40011000
 800cf44:	58024400 	.word	0x58024400
 800cf48:	40004400 	.word	0x40004400
 800cf4c:	40004800 	.word	0x40004800
 800cf50:	40004c00 	.word	0x40004c00
 800cf54:	40005000 	.word	0x40005000
 800cf58:	2320      	movs	r3, #32
 800cf5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf5e:	e128      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cf60:	2340      	movs	r3, #64	@ 0x40
 800cf62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf66:	e124      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cf68:	2380      	movs	r3, #128	@ 0x80
 800cf6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf6e:	e120      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4acb      	ldr	r2, [pc, #812]	@ (800d2a4 <UART_SetConfig+0x698>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d176      	bne.n	800d068 <UART_SetConfig+0x45c>
 800cf7a:	4bcb      	ldr	r3, [pc, #812]	@ (800d2a8 <UART_SetConfig+0x69c>)
 800cf7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cf82:	2b28      	cmp	r3, #40	@ 0x28
 800cf84:	d86c      	bhi.n	800d060 <UART_SetConfig+0x454>
 800cf86:	a201      	add	r2, pc, #4	@ (adr r2, 800cf8c <UART_SetConfig+0x380>)
 800cf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8c:	0800d031 	.word	0x0800d031
 800cf90:	0800d061 	.word	0x0800d061
 800cf94:	0800d061 	.word	0x0800d061
 800cf98:	0800d061 	.word	0x0800d061
 800cf9c:	0800d061 	.word	0x0800d061
 800cfa0:	0800d061 	.word	0x0800d061
 800cfa4:	0800d061 	.word	0x0800d061
 800cfa8:	0800d061 	.word	0x0800d061
 800cfac:	0800d039 	.word	0x0800d039
 800cfb0:	0800d061 	.word	0x0800d061
 800cfb4:	0800d061 	.word	0x0800d061
 800cfb8:	0800d061 	.word	0x0800d061
 800cfbc:	0800d061 	.word	0x0800d061
 800cfc0:	0800d061 	.word	0x0800d061
 800cfc4:	0800d061 	.word	0x0800d061
 800cfc8:	0800d061 	.word	0x0800d061
 800cfcc:	0800d041 	.word	0x0800d041
 800cfd0:	0800d061 	.word	0x0800d061
 800cfd4:	0800d061 	.word	0x0800d061
 800cfd8:	0800d061 	.word	0x0800d061
 800cfdc:	0800d061 	.word	0x0800d061
 800cfe0:	0800d061 	.word	0x0800d061
 800cfe4:	0800d061 	.word	0x0800d061
 800cfe8:	0800d061 	.word	0x0800d061
 800cfec:	0800d049 	.word	0x0800d049
 800cff0:	0800d061 	.word	0x0800d061
 800cff4:	0800d061 	.word	0x0800d061
 800cff8:	0800d061 	.word	0x0800d061
 800cffc:	0800d061 	.word	0x0800d061
 800d000:	0800d061 	.word	0x0800d061
 800d004:	0800d061 	.word	0x0800d061
 800d008:	0800d061 	.word	0x0800d061
 800d00c:	0800d051 	.word	0x0800d051
 800d010:	0800d061 	.word	0x0800d061
 800d014:	0800d061 	.word	0x0800d061
 800d018:	0800d061 	.word	0x0800d061
 800d01c:	0800d061 	.word	0x0800d061
 800d020:	0800d061 	.word	0x0800d061
 800d024:	0800d061 	.word	0x0800d061
 800d028:	0800d061 	.word	0x0800d061
 800d02c:	0800d059 	.word	0x0800d059
 800d030:	2301      	movs	r3, #1
 800d032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d036:	e0bc      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d038:	2304      	movs	r3, #4
 800d03a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d03e:	e0b8      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d040:	2308      	movs	r3, #8
 800d042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d046:	e0b4      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d048:	2310      	movs	r3, #16
 800d04a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d04e:	e0b0      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d050:	2320      	movs	r3, #32
 800d052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d056:	e0ac      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d058:	2340      	movs	r3, #64	@ 0x40
 800d05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05e:	e0a8      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d060:	2380      	movs	r3, #128	@ 0x80
 800d062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d066:	e0a4      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	4a8f      	ldr	r2, [pc, #572]	@ (800d2ac <UART_SetConfig+0x6a0>)
 800d06e:	4293      	cmp	r3, r2
 800d070:	d130      	bne.n	800d0d4 <UART_SetConfig+0x4c8>
 800d072:	4b8d      	ldr	r3, [pc, #564]	@ (800d2a8 <UART_SetConfig+0x69c>)
 800d074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d076:	f003 0307 	and.w	r3, r3, #7
 800d07a:	2b05      	cmp	r3, #5
 800d07c:	d826      	bhi.n	800d0cc <UART_SetConfig+0x4c0>
 800d07e:	a201      	add	r2, pc, #4	@ (adr r2, 800d084 <UART_SetConfig+0x478>)
 800d080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d084:	0800d09d 	.word	0x0800d09d
 800d088:	0800d0a5 	.word	0x0800d0a5
 800d08c:	0800d0ad 	.word	0x0800d0ad
 800d090:	0800d0b5 	.word	0x0800d0b5
 800d094:	0800d0bd 	.word	0x0800d0bd
 800d098:	0800d0c5 	.word	0x0800d0c5
 800d09c:	2300      	movs	r3, #0
 800d09e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a2:	e086      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d0a4:	2304      	movs	r3, #4
 800d0a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0aa:	e082      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d0ac:	2308      	movs	r3, #8
 800d0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b2:	e07e      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d0b4:	2310      	movs	r3, #16
 800d0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ba:	e07a      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d0bc:	2320      	movs	r3, #32
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c2:	e076      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d0c4:	2340      	movs	r3, #64	@ 0x40
 800d0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ca:	e072      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d0cc:	2380      	movs	r3, #128	@ 0x80
 800d0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0d2:	e06e      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	4a75      	ldr	r2, [pc, #468]	@ (800d2b0 <UART_SetConfig+0x6a4>)
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d130      	bne.n	800d140 <UART_SetConfig+0x534>
 800d0de:	4b72      	ldr	r3, [pc, #456]	@ (800d2a8 <UART_SetConfig+0x69c>)
 800d0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0e2:	f003 0307 	and.w	r3, r3, #7
 800d0e6:	2b05      	cmp	r3, #5
 800d0e8:	d826      	bhi.n	800d138 <UART_SetConfig+0x52c>
 800d0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d0f0 <UART_SetConfig+0x4e4>)
 800d0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0f0:	0800d109 	.word	0x0800d109
 800d0f4:	0800d111 	.word	0x0800d111
 800d0f8:	0800d119 	.word	0x0800d119
 800d0fc:	0800d121 	.word	0x0800d121
 800d100:	0800d129 	.word	0x0800d129
 800d104:	0800d131 	.word	0x0800d131
 800d108:	2300      	movs	r3, #0
 800d10a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10e:	e050      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d110:	2304      	movs	r3, #4
 800d112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d116:	e04c      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d118:	2308      	movs	r3, #8
 800d11a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d11e:	e048      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d120:	2310      	movs	r3, #16
 800d122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d126:	e044      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d128:	2320      	movs	r3, #32
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12e:	e040      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d130:	2340      	movs	r3, #64	@ 0x40
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d136:	e03c      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d138:	2380      	movs	r3, #128	@ 0x80
 800d13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d13e:	e038      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d140:	697b      	ldr	r3, [r7, #20]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4a5b      	ldr	r2, [pc, #364]	@ (800d2b4 <UART_SetConfig+0x6a8>)
 800d146:	4293      	cmp	r3, r2
 800d148:	d130      	bne.n	800d1ac <UART_SetConfig+0x5a0>
 800d14a:	4b57      	ldr	r3, [pc, #348]	@ (800d2a8 <UART_SetConfig+0x69c>)
 800d14c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d14e:	f003 0307 	and.w	r3, r3, #7
 800d152:	2b05      	cmp	r3, #5
 800d154:	d826      	bhi.n	800d1a4 <UART_SetConfig+0x598>
 800d156:	a201      	add	r2, pc, #4	@ (adr r2, 800d15c <UART_SetConfig+0x550>)
 800d158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15c:	0800d175 	.word	0x0800d175
 800d160:	0800d17d 	.word	0x0800d17d
 800d164:	0800d185 	.word	0x0800d185
 800d168:	0800d18d 	.word	0x0800d18d
 800d16c:	0800d195 	.word	0x0800d195
 800d170:	0800d19d 	.word	0x0800d19d
 800d174:	2302      	movs	r3, #2
 800d176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d17a:	e01a      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d17c:	2304      	movs	r3, #4
 800d17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d182:	e016      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d184:	2308      	movs	r3, #8
 800d186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d18a:	e012      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d18c:	2310      	movs	r3, #16
 800d18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d192:	e00e      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d194:	2320      	movs	r3, #32
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19a:	e00a      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d19c:	2340      	movs	r3, #64	@ 0x40
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a2:	e006      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d1a4:	2380      	movs	r3, #128	@ 0x80
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1aa:	e002      	b.n	800d1b2 <UART_SetConfig+0x5a6>
 800d1ac:	2380      	movs	r3, #128	@ 0x80
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	4a3f      	ldr	r2, [pc, #252]	@ (800d2b4 <UART_SetConfig+0x6a8>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	f040 80f8 	bne.w	800d3ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d1be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d1c2:	2b20      	cmp	r3, #32
 800d1c4:	dc46      	bgt.n	800d254 <UART_SetConfig+0x648>
 800d1c6:	2b02      	cmp	r3, #2
 800d1c8:	f2c0 8082 	blt.w	800d2d0 <UART_SetConfig+0x6c4>
 800d1cc:	3b02      	subs	r3, #2
 800d1ce:	2b1e      	cmp	r3, #30
 800d1d0:	d87e      	bhi.n	800d2d0 <UART_SetConfig+0x6c4>
 800d1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1d8 <UART_SetConfig+0x5cc>)
 800d1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d8:	0800d25b 	.word	0x0800d25b
 800d1dc:	0800d2d1 	.word	0x0800d2d1
 800d1e0:	0800d263 	.word	0x0800d263
 800d1e4:	0800d2d1 	.word	0x0800d2d1
 800d1e8:	0800d2d1 	.word	0x0800d2d1
 800d1ec:	0800d2d1 	.word	0x0800d2d1
 800d1f0:	0800d273 	.word	0x0800d273
 800d1f4:	0800d2d1 	.word	0x0800d2d1
 800d1f8:	0800d2d1 	.word	0x0800d2d1
 800d1fc:	0800d2d1 	.word	0x0800d2d1
 800d200:	0800d2d1 	.word	0x0800d2d1
 800d204:	0800d2d1 	.word	0x0800d2d1
 800d208:	0800d2d1 	.word	0x0800d2d1
 800d20c:	0800d2d1 	.word	0x0800d2d1
 800d210:	0800d283 	.word	0x0800d283
 800d214:	0800d2d1 	.word	0x0800d2d1
 800d218:	0800d2d1 	.word	0x0800d2d1
 800d21c:	0800d2d1 	.word	0x0800d2d1
 800d220:	0800d2d1 	.word	0x0800d2d1
 800d224:	0800d2d1 	.word	0x0800d2d1
 800d228:	0800d2d1 	.word	0x0800d2d1
 800d22c:	0800d2d1 	.word	0x0800d2d1
 800d230:	0800d2d1 	.word	0x0800d2d1
 800d234:	0800d2d1 	.word	0x0800d2d1
 800d238:	0800d2d1 	.word	0x0800d2d1
 800d23c:	0800d2d1 	.word	0x0800d2d1
 800d240:	0800d2d1 	.word	0x0800d2d1
 800d244:	0800d2d1 	.word	0x0800d2d1
 800d248:	0800d2d1 	.word	0x0800d2d1
 800d24c:	0800d2d1 	.word	0x0800d2d1
 800d250:	0800d2c3 	.word	0x0800d2c3
 800d254:	2b40      	cmp	r3, #64	@ 0x40
 800d256:	d037      	beq.n	800d2c8 <UART_SetConfig+0x6bc>
 800d258:	e03a      	b.n	800d2d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d25a:	f7fd fb59 	bl	800a910 <HAL_RCCEx_GetD3PCLK1Freq>
 800d25e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d260:	e03c      	b.n	800d2dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d262:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d266:	4618      	mov	r0, r3
 800d268:	f7fd fb68 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d270:	e034      	b.n	800d2dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d272:	f107 0318 	add.w	r3, r7, #24
 800d276:	4618      	mov	r0, r3
 800d278:	f7fd fcb4 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d280:	e02c      	b.n	800d2dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d282:	4b09      	ldr	r3, [pc, #36]	@ (800d2a8 <UART_SetConfig+0x69c>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f003 0320 	and.w	r3, r3, #32
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d016      	beq.n	800d2bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d28e:	4b06      	ldr	r3, [pc, #24]	@ (800d2a8 <UART_SetConfig+0x69c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	08db      	lsrs	r3, r3, #3
 800d294:	f003 0303 	and.w	r3, r3, #3
 800d298:	4a07      	ldr	r2, [pc, #28]	@ (800d2b8 <UART_SetConfig+0x6ac>)
 800d29a:	fa22 f303 	lsr.w	r3, r2, r3
 800d29e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d2a0:	e01c      	b.n	800d2dc <UART_SetConfig+0x6d0>
 800d2a2:	bf00      	nop
 800d2a4:	40011400 	.word	0x40011400
 800d2a8:	58024400 	.word	0x58024400
 800d2ac:	40007800 	.word	0x40007800
 800d2b0:	40007c00 	.word	0x40007c00
 800d2b4:	58000c00 	.word	0x58000c00
 800d2b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d2bc:	4b9d      	ldr	r3, [pc, #628]	@ (800d534 <UART_SetConfig+0x928>)
 800d2be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2c0:	e00c      	b.n	800d2dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d2c2:	4b9d      	ldr	r3, [pc, #628]	@ (800d538 <UART_SetConfig+0x92c>)
 800d2c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2c6:	e009      	b.n	800d2dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2ce:	e005      	b.n	800d2dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d2da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d2dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f000 81de 	beq.w	800d6a0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d2e4:	697b      	ldr	r3, [r7, #20]
 800d2e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2e8:	4a94      	ldr	r2, [pc, #592]	@ (800d53c <UART_SetConfig+0x930>)
 800d2ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d2f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	4613      	mov	r3, r2
 800d2fe:	005b      	lsls	r3, r3, #1
 800d300:	4413      	add	r3, r2
 800d302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d304:	429a      	cmp	r2, r3
 800d306:	d305      	bcc.n	800d314 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d30e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d310:	429a      	cmp	r2, r3
 800d312:	d903      	bls.n	800d31c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d314:	2301      	movs	r3, #1
 800d316:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d31a:	e1c1      	b.n	800d6a0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d31c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d31e:	2200      	movs	r2, #0
 800d320:	60bb      	str	r3, [r7, #8]
 800d322:	60fa      	str	r2, [r7, #12]
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d328:	4a84      	ldr	r2, [pc, #528]	@ (800d53c <UART_SetConfig+0x930>)
 800d32a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d32e:	b29b      	uxth	r3, r3
 800d330:	2200      	movs	r2, #0
 800d332:	603b      	str	r3, [r7, #0]
 800d334:	607a      	str	r2, [r7, #4]
 800d336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d33a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d33e:	f7f3 f81f 	bl	8000380 <__aeabi_uldivmod>
 800d342:	4602      	mov	r2, r0
 800d344:	460b      	mov	r3, r1
 800d346:	4610      	mov	r0, r2
 800d348:	4619      	mov	r1, r3
 800d34a:	f04f 0200 	mov.w	r2, #0
 800d34e:	f04f 0300 	mov.w	r3, #0
 800d352:	020b      	lsls	r3, r1, #8
 800d354:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d358:	0202      	lsls	r2, r0, #8
 800d35a:	6979      	ldr	r1, [r7, #20]
 800d35c:	6849      	ldr	r1, [r1, #4]
 800d35e:	0849      	lsrs	r1, r1, #1
 800d360:	2000      	movs	r0, #0
 800d362:	460c      	mov	r4, r1
 800d364:	4605      	mov	r5, r0
 800d366:	eb12 0804 	adds.w	r8, r2, r4
 800d36a:	eb43 0905 	adc.w	r9, r3, r5
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	2200      	movs	r2, #0
 800d374:	469a      	mov	sl, r3
 800d376:	4693      	mov	fp, r2
 800d378:	4652      	mov	r2, sl
 800d37a:	465b      	mov	r3, fp
 800d37c:	4640      	mov	r0, r8
 800d37e:	4649      	mov	r1, r9
 800d380:	f7f2 fffe 	bl	8000380 <__aeabi_uldivmod>
 800d384:	4602      	mov	r2, r0
 800d386:	460b      	mov	r3, r1
 800d388:	4613      	mov	r3, r2
 800d38a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d38c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d392:	d308      	bcc.n	800d3a6 <UART_SetConfig+0x79a>
 800d394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d39a:	d204      	bcs.n	800d3a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3a2:	60da      	str	r2, [r3, #12]
 800d3a4:	e17c      	b.n	800d6a0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d3ac:	e178      	b.n	800d6a0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	69db      	ldr	r3, [r3, #28]
 800d3b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d3b6:	f040 80c5 	bne.w	800d544 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d3ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d3be:	2b20      	cmp	r3, #32
 800d3c0:	dc48      	bgt.n	800d454 <UART_SetConfig+0x848>
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	db7b      	blt.n	800d4be <UART_SetConfig+0x8b2>
 800d3c6:	2b20      	cmp	r3, #32
 800d3c8:	d879      	bhi.n	800d4be <UART_SetConfig+0x8b2>
 800d3ca:	a201      	add	r2, pc, #4	@ (adr r2, 800d3d0 <UART_SetConfig+0x7c4>)
 800d3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d0:	0800d45b 	.word	0x0800d45b
 800d3d4:	0800d463 	.word	0x0800d463
 800d3d8:	0800d4bf 	.word	0x0800d4bf
 800d3dc:	0800d4bf 	.word	0x0800d4bf
 800d3e0:	0800d46b 	.word	0x0800d46b
 800d3e4:	0800d4bf 	.word	0x0800d4bf
 800d3e8:	0800d4bf 	.word	0x0800d4bf
 800d3ec:	0800d4bf 	.word	0x0800d4bf
 800d3f0:	0800d47b 	.word	0x0800d47b
 800d3f4:	0800d4bf 	.word	0x0800d4bf
 800d3f8:	0800d4bf 	.word	0x0800d4bf
 800d3fc:	0800d4bf 	.word	0x0800d4bf
 800d400:	0800d4bf 	.word	0x0800d4bf
 800d404:	0800d4bf 	.word	0x0800d4bf
 800d408:	0800d4bf 	.word	0x0800d4bf
 800d40c:	0800d4bf 	.word	0x0800d4bf
 800d410:	0800d48b 	.word	0x0800d48b
 800d414:	0800d4bf 	.word	0x0800d4bf
 800d418:	0800d4bf 	.word	0x0800d4bf
 800d41c:	0800d4bf 	.word	0x0800d4bf
 800d420:	0800d4bf 	.word	0x0800d4bf
 800d424:	0800d4bf 	.word	0x0800d4bf
 800d428:	0800d4bf 	.word	0x0800d4bf
 800d42c:	0800d4bf 	.word	0x0800d4bf
 800d430:	0800d4bf 	.word	0x0800d4bf
 800d434:	0800d4bf 	.word	0x0800d4bf
 800d438:	0800d4bf 	.word	0x0800d4bf
 800d43c:	0800d4bf 	.word	0x0800d4bf
 800d440:	0800d4bf 	.word	0x0800d4bf
 800d444:	0800d4bf 	.word	0x0800d4bf
 800d448:	0800d4bf 	.word	0x0800d4bf
 800d44c:	0800d4bf 	.word	0x0800d4bf
 800d450:	0800d4b1 	.word	0x0800d4b1
 800d454:	2b40      	cmp	r3, #64	@ 0x40
 800d456:	d02e      	beq.n	800d4b6 <UART_SetConfig+0x8aa>
 800d458:	e031      	b.n	800d4be <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d45a:	f7fb faa3 	bl	80089a4 <HAL_RCC_GetPCLK1Freq>
 800d45e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d460:	e033      	b.n	800d4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d462:	f7fb fab5 	bl	80089d0 <HAL_RCC_GetPCLK2Freq>
 800d466:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d468:	e02f      	b.n	800d4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d46a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fd fa64 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d478:	e027      	b.n	800d4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d47a:	f107 0318 	add.w	r3, r7, #24
 800d47e:	4618      	mov	r0, r3
 800d480:	f7fd fbb0 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d488:	e01f      	b.n	800d4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d48a:	4b2d      	ldr	r3, [pc, #180]	@ (800d540 <UART_SetConfig+0x934>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f003 0320 	and.w	r3, r3, #32
 800d492:	2b00      	cmp	r3, #0
 800d494:	d009      	beq.n	800d4aa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d496:	4b2a      	ldr	r3, [pc, #168]	@ (800d540 <UART_SetConfig+0x934>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	08db      	lsrs	r3, r3, #3
 800d49c:	f003 0303 	and.w	r3, r3, #3
 800d4a0:	4a24      	ldr	r2, [pc, #144]	@ (800d534 <UART_SetConfig+0x928>)
 800d4a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d4a8:	e00f      	b.n	800d4ca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d4aa:	4b22      	ldr	r3, [pc, #136]	@ (800d534 <UART_SetConfig+0x928>)
 800d4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4ae:	e00c      	b.n	800d4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4b0:	4b21      	ldr	r3, [pc, #132]	@ (800d538 <UART_SetConfig+0x92c>)
 800d4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4b4:	e009      	b.n	800d4ca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4bc:	e005      	b.n	800d4ca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d4c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d4ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	f000 80e7 	beq.w	800d6a0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d6:	4a19      	ldr	r2, [pc, #100]	@ (800d53c <UART_SetConfig+0x930>)
 800d4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4e4:	005a      	lsls	r2, r3, #1
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	685b      	ldr	r3, [r3, #4]
 800d4ea:	085b      	lsrs	r3, r3, #1
 800d4ec:	441a      	add	r2, r3
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	685b      	ldr	r3, [r3, #4]
 800d4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d4f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4fa:	2b0f      	cmp	r3, #15
 800d4fc:	d916      	bls.n	800d52c <UART_SetConfig+0x920>
 800d4fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d504:	d212      	bcs.n	800d52c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d508:	b29b      	uxth	r3, r3
 800d50a:	f023 030f 	bic.w	r3, r3, #15
 800d50e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d512:	085b      	lsrs	r3, r3, #1
 800d514:	b29b      	uxth	r3, r3
 800d516:	f003 0307 	and.w	r3, r3, #7
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d51e:	4313      	orrs	r3, r2
 800d520:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d528:	60da      	str	r2, [r3, #12]
 800d52a:	e0b9      	b.n	800d6a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d532:	e0b5      	b.n	800d6a0 <UART_SetConfig+0xa94>
 800d534:	03d09000 	.word	0x03d09000
 800d538:	003d0900 	.word	0x003d0900
 800d53c:	0800e7b0 	.word	0x0800e7b0
 800d540:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d544:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d548:	2b20      	cmp	r3, #32
 800d54a:	dc49      	bgt.n	800d5e0 <UART_SetConfig+0x9d4>
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	db7c      	blt.n	800d64a <UART_SetConfig+0xa3e>
 800d550:	2b20      	cmp	r3, #32
 800d552:	d87a      	bhi.n	800d64a <UART_SetConfig+0xa3e>
 800d554:	a201      	add	r2, pc, #4	@ (adr r2, 800d55c <UART_SetConfig+0x950>)
 800d556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d55a:	bf00      	nop
 800d55c:	0800d5e7 	.word	0x0800d5e7
 800d560:	0800d5ef 	.word	0x0800d5ef
 800d564:	0800d64b 	.word	0x0800d64b
 800d568:	0800d64b 	.word	0x0800d64b
 800d56c:	0800d5f7 	.word	0x0800d5f7
 800d570:	0800d64b 	.word	0x0800d64b
 800d574:	0800d64b 	.word	0x0800d64b
 800d578:	0800d64b 	.word	0x0800d64b
 800d57c:	0800d607 	.word	0x0800d607
 800d580:	0800d64b 	.word	0x0800d64b
 800d584:	0800d64b 	.word	0x0800d64b
 800d588:	0800d64b 	.word	0x0800d64b
 800d58c:	0800d64b 	.word	0x0800d64b
 800d590:	0800d64b 	.word	0x0800d64b
 800d594:	0800d64b 	.word	0x0800d64b
 800d598:	0800d64b 	.word	0x0800d64b
 800d59c:	0800d617 	.word	0x0800d617
 800d5a0:	0800d64b 	.word	0x0800d64b
 800d5a4:	0800d64b 	.word	0x0800d64b
 800d5a8:	0800d64b 	.word	0x0800d64b
 800d5ac:	0800d64b 	.word	0x0800d64b
 800d5b0:	0800d64b 	.word	0x0800d64b
 800d5b4:	0800d64b 	.word	0x0800d64b
 800d5b8:	0800d64b 	.word	0x0800d64b
 800d5bc:	0800d64b 	.word	0x0800d64b
 800d5c0:	0800d64b 	.word	0x0800d64b
 800d5c4:	0800d64b 	.word	0x0800d64b
 800d5c8:	0800d64b 	.word	0x0800d64b
 800d5cc:	0800d64b 	.word	0x0800d64b
 800d5d0:	0800d64b 	.word	0x0800d64b
 800d5d4:	0800d64b 	.word	0x0800d64b
 800d5d8:	0800d64b 	.word	0x0800d64b
 800d5dc:	0800d63d 	.word	0x0800d63d
 800d5e0:	2b40      	cmp	r3, #64	@ 0x40
 800d5e2:	d02e      	beq.n	800d642 <UART_SetConfig+0xa36>
 800d5e4:	e031      	b.n	800d64a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5e6:	f7fb f9dd 	bl	80089a4 <HAL_RCC_GetPCLK1Freq>
 800d5ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5ec:	e033      	b.n	800d656 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5ee:	f7fb f9ef 	bl	80089d0 <HAL_RCC_GetPCLK2Freq>
 800d5f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5f4:	e02f      	b.n	800d656 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fd f99e 	bl	800a93c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d604:	e027      	b.n	800d656 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d606:	f107 0318 	add.w	r3, r7, #24
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fd faea 	bl	800abe4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d614:	e01f      	b.n	800d656 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d616:	4b2d      	ldr	r3, [pc, #180]	@ (800d6cc <UART_SetConfig+0xac0>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f003 0320 	and.w	r3, r3, #32
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d009      	beq.n	800d636 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d622:	4b2a      	ldr	r3, [pc, #168]	@ (800d6cc <UART_SetConfig+0xac0>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	08db      	lsrs	r3, r3, #3
 800d628:	f003 0303 	and.w	r3, r3, #3
 800d62c:	4a28      	ldr	r2, [pc, #160]	@ (800d6d0 <UART_SetConfig+0xac4>)
 800d62e:	fa22 f303 	lsr.w	r3, r2, r3
 800d632:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d634:	e00f      	b.n	800d656 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d636:	4b26      	ldr	r3, [pc, #152]	@ (800d6d0 <UART_SetConfig+0xac4>)
 800d638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d63a:	e00c      	b.n	800d656 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d63c:	4b25      	ldr	r3, [pc, #148]	@ (800d6d4 <UART_SetConfig+0xac8>)
 800d63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d640:	e009      	b.n	800d656 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d642:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d648:	e005      	b.n	800d656 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d64a:	2300      	movs	r3, #0
 800d64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d64e:	2301      	movs	r3, #1
 800d650:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d654:	bf00      	nop
    }

    if (pclk != 0U)
 800d656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d021      	beq.n	800d6a0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d660:	4a1d      	ldr	r2, [pc, #116]	@ (800d6d8 <UART_SetConfig+0xacc>)
 800d662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d666:	461a      	mov	r2, r3
 800d668:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d66a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	085b      	lsrs	r3, r3, #1
 800d674:	441a      	add	r2, r3
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d67e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d682:	2b0f      	cmp	r3, #15
 800d684:	d909      	bls.n	800d69a <UART_SetConfig+0xa8e>
 800d686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d68c:	d205      	bcs.n	800d69a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d690:	b29a      	uxth	r2, r3
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	60da      	str	r2, [r3, #12]
 800d698:	e002      	b.n	800d6a0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d6a8:	697b      	ldr	r3, [r7, #20]
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d6bc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3748      	adds	r7, #72	@ 0x48
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6ca:	bf00      	nop
 800d6cc:	58024400 	.word	0x58024400
 800d6d0:	03d09000 	.word	0x03d09000
 800d6d4:	003d0900 	.word	0x003d0900
 800d6d8:	0800e7b0 	.word	0x0800e7b0

0800d6dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b083      	sub	sp, #12
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e8:	f003 0308 	and.w	r3, r3, #8
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d00a      	beq.n	800d706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	430a      	orrs	r2, r1
 800d704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d70a:	f003 0301 	and.w	r3, r3, #1
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d00a      	beq.n	800d728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	430a      	orrs	r2, r1
 800d726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d72c:	f003 0302 	and.w	r3, r3, #2
 800d730:	2b00      	cmp	r3, #0
 800d732:	d00a      	beq.n	800d74a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	685b      	ldr	r3, [r3, #4]
 800d73a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	430a      	orrs	r2, r1
 800d748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d74e:	f003 0304 	and.w	r3, r3, #4
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00a      	beq.n	800d76c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	685b      	ldr	r3, [r3, #4]
 800d75c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	430a      	orrs	r2, r1
 800d76a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d770:	f003 0310 	and.w	r3, r3, #16
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00a      	beq.n	800d78e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	430a      	orrs	r2, r1
 800d78c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d792:	f003 0320 	and.w	r3, r3, #32
 800d796:	2b00      	cmp	r3, #0
 800d798:	d00a      	beq.n	800d7b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	430a      	orrs	r2, r1
 800d7ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d01a      	beq.n	800d7f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	430a      	orrs	r2, r1
 800d7d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d7da:	d10a      	bne.n	800d7f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00a      	beq.n	800d814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	430a      	orrs	r2, r1
 800d812:	605a      	str	r2, [r3, #4]
  }
}
 800d814:	bf00      	nop
 800d816:	370c      	adds	r7, #12
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b098      	sub	sp, #96	@ 0x60
 800d824:	af02      	add	r7, sp, #8
 800d826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2200      	movs	r2, #0
 800d82c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d830:	f7f5 fabe 	bl	8002db0 <HAL_GetTick>
 800d834:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	f003 0308 	and.w	r3, r3, #8
 800d840:	2b08      	cmp	r3, #8
 800d842:	d12f      	bne.n	800d8a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d844:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d84c:	2200      	movs	r2, #0
 800d84e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f88e 	bl	800d974 <UART_WaitOnFlagUntilTimeout>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d022      	beq.n	800d8a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d866:	e853 3f00 	ldrex	r3, [r3]
 800d86a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d872:	653b      	str	r3, [r7, #80]	@ 0x50
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	461a      	mov	r2, r3
 800d87a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d87c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d87e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d880:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d882:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d884:	e841 2300 	strex	r3, r2, [r1]
 800d888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d88a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1e6      	bne.n	800d85e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2220      	movs	r2, #32
 800d894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e063      	b.n	800d96c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	f003 0304 	and.w	r3, r3, #4
 800d8ae:	2b04      	cmp	r3, #4
 800d8b0:	d149      	bne.n	800d946 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d8b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f857 	bl	800d974 <UART_WaitOnFlagUntilTimeout>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d03c      	beq.n	800d946 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d4:	e853 3f00 	ldrex	r3, [r3]
 800d8d8:	623b      	str	r3, [r7, #32]
   return(result);
 800d8da:	6a3b      	ldr	r3, [r7, #32]
 800d8dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	461a      	mov	r2, r3
 800d8e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d8ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d8f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d8f2:	e841 2300 	strex	r3, r2, [r1]
 800d8f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1e6      	bne.n	800d8cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3308      	adds	r3, #8
 800d904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	e853 3f00 	ldrex	r3, [r3]
 800d90c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f023 0301 	bic.w	r3, r3, #1
 800d914:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	3308      	adds	r3, #8
 800d91c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d91e:	61fa      	str	r2, [r7, #28]
 800d920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d922:	69b9      	ldr	r1, [r7, #24]
 800d924:	69fa      	ldr	r2, [r7, #28]
 800d926:	e841 2300 	strex	r3, r2, [r1]
 800d92a:	617b      	str	r3, [r7, #20]
   return(result);
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d1e5      	bne.n	800d8fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	2220      	movs	r2, #32
 800d936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2200      	movs	r2, #0
 800d93e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d942:	2303      	movs	r3, #3
 800d944:	e012      	b.n	800d96c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	2220      	movs	r2, #32
 800d94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2220      	movs	r2, #32
 800d952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	2200      	movs	r2, #0
 800d95a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	2200      	movs	r2, #0
 800d960:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d96a:	2300      	movs	r3, #0
}
 800d96c:	4618      	mov	r0, r3
 800d96e:	3758      	adds	r7, #88	@ 0x58
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b084      	sub	sp, #16
 800d978:	af00      	add	r7, sp, #0
 800d97a:	60f8      	str	r0, [r7, #12]
 800d97c:	60b9      	str	r1, [r7, #8]
 800d97e:	603b      	str	r3, [r7, #0]
 800d980:	4613      	mov	r3, r2
 800d982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d984:	e04f      	b.n	800da26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d98c:	d04b      	beq.n	800da26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d98e:	f7f5 fa0f 	bl	8002db0 <HAL_GetTick>
 800d992:	4602      	mov	r2, r0
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	1ad3      	subs	r3, r2, r3
 800d998:	69ba      	ldr	r2, [r7, #24]
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d302      	bcc.n	800d9a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d101      	bne.n	800d9a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d9a4:	2303      	movs	r3, #3
 800d9a6:	e04e      	b.n	800da46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f003 0304 	and.w	r3, r3, #4
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d037      	beq.n	800da26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	2b80      	cmp	r3, #128	@ 0x80
 800d9ba:	d034      	beq.n	800da26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	2b40      	cmp	r3, #64	@ 0x40
 800d9c0:	d031      	beq.n	800da26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	69db      	ldr	r3, [r3, #28]
 800d9c8:	f003 0308 	and.w	r3, r3, #8
 800d9cc:	2b08      	cmp	r3, #8
 800d9ce:	d110      	bne.n	800d9f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2208      	movs	r2, #8
 800d9d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d9d8:	68f8      	ldr	r0, [r7, #12]
 800d9da:	f000 f839 	bl	800da50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2208      	movs	r2, #8
 800d9e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e029      	b.n	800da46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	69db      	ldr	r3, [r3, #28]
 800d9f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d9fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800da00:	d111      	bne.n	800da26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800da0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f000 f81f 	bl	800da50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2220      	movs	r2, #32
 800da16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800da22:	2303      	movs	r3, #3
 800da24:	e00f      	b.n	800da46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	69da      	ldr	r2, [r3, #28]
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	4013      	ands	r3, r2
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	429a      	cmp	r2, r3
 800da34:	bf0c      	ite	eq
 800da36:	2301      	moveq	r3, #1
 800da38:	2300      	movne	r3, #0
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	461a      	mov	r2, r3
 800da3e:	79fb      	ldrb	r3, [r7, #7]
 800da40:	429a      	cmp	r2, r3
 800da42:	d0a0      	beq.n	800d986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3710      	adds	r7, #16
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}
	...

0800da50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da50:	b480      	push	{r7}
 800da52:	b095      	sub	sp, #84	@ 0x54
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da76:	643b      	str	r3, [r7, #64]	@ 0x40
 800da78:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da7e:	e841 2300 	strex	r3, r2, [r1]
 800da82:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1e6      	bne.n	800da58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	3308      	adds	r3, #8
 800da90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da92:	6a3b      	ldr	r3, [r7, #32]
 800da94:	e853 3f00 	ldrex	r3, [r3]
 800da98:	61fb      	str	r3, [r7, #28]
   return(result);
 800da9a:	69fa      	ldr	r2, [r7, #28]
 800da9c:	4b1e      	ldr	r3, [pc, #120]	@ (800db18 <UART_EndRxTransfer+0xc8>)
 800da9e:	4013      	ands	r3, r2
 800daa0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	3308      	adds	r3, #8
 800daa8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800daaa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800daac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dab2:	e841 2300 	strex	r3, r2, [r1]
 800dab6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1e5      	bne.n	800da8a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d118      	bne.n	800daf8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	e853 3f00 	ldrex	r3, [r3]
 800dad2:	60bb      	str	r3, [r7, #8]
   return(result);
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	f023 0310 	bic.w	r3, r3, #16
 800dada:	647b      	str	r3, [r7, #68]	@ 0x44
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	461a      	mov	r2, r3
 800dae2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dae4:	61bb      	str	r3, [r7, #24]
 800dae6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae8:	6979      	ldr	r1, [r7, #20]
 800daea:	69ba      	ldr	r2, [r7, #24]
 800daec:	e841 2300 	strex	r3, r2, [r1]
 800daf0:	613b      	str	r3, [r7, #16]
   return(result);
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1e6      	bne.n	800dac6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2220      	movs	r2, #32
 800dafc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	2200      	movs	r2, #0
 800db0a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800db0c:	bf00      	nop
 800db0e:	3754      	adds	r7, #84	@ 0x54
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	effffffe 	.word	0xeffffffe

0800db1c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db2a:	2b01      	cmp	r3, #1
 800db2c:	d101      	bne.n	800db32 <HAL_UARTEx_DisableFifoMode+0x16>
 800db2e:	2302      	movs	r3, #2
 800db30:	e027      	b.n	800db82 <HAL_UARTEx_DisableFifoMode+0x66>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	2201      	movs	r2, #1
 800db36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2224      	movs	r2, #36	@ 0x24
 800db3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	f022 0201 	bic.w	r2, r2, #1
 800db58:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800db60:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2200      	movs	r2, #0
 800db66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	68fa      	ldr	r2, [r7, #12]
 800db6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	2220      	movs	r2, #32
 800db74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	2200      	movs	r2, #0
 800db7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	3714      	adds	r7, #20
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr

0800db8e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800db8e:	b580      	push	{r7, lr}
 800db90:	b084      	sub	sp, #16
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
 800db96:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d101      	bne.n	800dba6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dba2:	2302      	movs	r3, #2
 800dba4:	e02d      	b.n	800dc02 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2224      	movs	r2, #36	@ 0x24
 800dbb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	f022 0201 	bic.w	r2, r2, #1
 800dbcc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	683a      	ldr	r2, [r7, #0]
 800dbde:	430a      	orrs	r2, r1
 800dbe0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f000 f850 	bl	800dc88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2220      	movs	r2, #32
 800dbf4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc00:	2300      	movs	r3, #0
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	3710      	adds	r7, #16
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}

0800dc0a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dc0a:	b580      	push	{r7, lr}
 800dc0c:	b084      	sub	sp, #16
 800dc0e:	af00      	add	r7, sp, #0
 800dc10:	6078      	str	r0, [r7, #4]
 800dc12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d101      	bne.n	800dc22 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800dc1e:	2302      	movs	r3, #2
 800dc20:	e02d      	b.n	800dc7e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2201      	movs	r2, #1
 800dc26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2224      	movs	r2, #36	@ 0x24
 800dc2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f022 0201 	bic.w	r2, r2, #1
 800dc48:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	689b      	ldr	r3, [r3, #8]
 800dc50:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	683a      	ldr	r2, [r7, #0]
 800dc5a:	430a      	orrs	r2, r1
 800dc5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 f812 	bl	800dc88 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2220      	movs	r2, #32
 800dc70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2200      	movs	r2, #0
 800dc78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dc7c:	2300      	movs	r3, #0
}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
	...

0800dc88 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b085      	sub	sp, #20
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d108      	bne.n	800dcaa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800dca8:	e031      	b.n	800dd0e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800dcaa:	2310      	movs	r3, #16
 800dcac:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800dcae:	2310      	movs	r3, #16
 800dcb0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	0e5b      	lsrs	r3, r3, #25
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	f003 0307 	and.w	r3, r3, #7
 800dcc0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	0f5b      	lsrs	r3, r3, #29
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	f003 0307 	and.w	r3, r3, #7
 800dcd0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dcd2:	7bbb      	ldrb	r3, [r7, #14]
 800dcd4:	7b3a      	ldrb	r2, [r7, #12]
 800dcd6:	4911      	ldr	r1, [pc, #68]	@ (800dd1c <UARTEx_SetNbDataToProcess+0x94>)
 800dcd8:	5c8a      	ldrb	r2, [r1, r2]
 800dcda:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800dcde:	7b3a      	ldrb	r2, [r7, #12]
 800dce0:	490f      	ldr	r1, [pc, #60]	@ (800dd20 <UARTEx_SetNbDataToProcess+0x98>)
 800dce2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800dce4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dcf0:	7bfb      	ldrb	r3, [r7, #15]
 800dcf2:	7b7a      	ldrb	r2, [r7, #13]
 800dcf4:	4909      	ldr	r1, [pc, #36]	@ (800dd1c <UARTEx_SetNbDataToProcess+0x94>)
 800dcf6:	5c8a      	ldrb	r2, [r1, r2]
 800dcf8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800dcfc:	7b7a      	ldrb	r2, [r7, #13]
 800dcfe:	4908      	ldr	r1, [pc, #32]	@ (800dd20 <UARTEx_SetNbDataToProcess+0x98>)
 800dd00:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800dd02:	fb93 f3f2 	sdiv	r3, r3, r2
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800dd0e:	bf00      	nop
 800dd10:	3714      	adds	r7, #20
 800dd12:	46bd      	mov	sp, r7
 800dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	0800e7c8 	.word	0x0800e7c8
 800dd20:	0800e7d0 	.word	0x0800e7d0

0800dd24 <sniprintf>:
 800dd24:	b40c      	push	{r2, r3}
 800dd26:	b530      	push	{r4, r5, lr}
 800dd28:	4b17      	ldr	r3, [pc, #92]	@ (800dd88 <sniprintf+0x64>)
 800dd2a:	1e0c      	subs	r4, r1, #0
 800dd2c:	681d      	ldr	r5, [r3, #0]
 800dd2e:	b09d      	sub	sp, #116	@ 0x74
 800dd30:	da08      	bge.n	800dd44 <sniprintf+0x20>
 800dd32:	238b      	movs	r3, #139	@ 0x8b
 800dd34:	602b      	str	r3, [r5, #0]
 800dd36:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3a:	b01d      	add	sp, #116	@ 0x74
 800dd3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd40:	b002      	add	sp, #8
 800dd42:	4770      	bx	lr
 800dd44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dd48:	f8ad 3014 	strh.w	r3, [sp, #20]
 800dd4c:	bf14      	ite	ne
 800dd4e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dd52:	4623      	moveq	r3, r4
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	9307      	str	r3, [sp, #28]
 800dd58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800dd5c:	9002      	str	r0, [sp, #8]
 800dd5e:	9006      	str	r0, [sp, #24]
 800dd60:	f8ad 3016 	strh.w	r3, [sp, #22]
 800dd64:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800dd66:	ab21      	add	r3, sp, #132	@ 0x84
 800dd68:	a902      	add	r1, sp, #8
 800dd6a:	4628      	mov	r0, r5
 800dd6c:	9301      	str	r3, [sp, #4]
 800dd6e:	f000 f9b5 	bl	800e0dc <_svfiprintf_r>
 800dd72:	1c43      	adds	r3, r0, #1
 800dd74:	bfbc      	itt	lt
 800dd76:	238b      	movlt	r3, #139	@ 0x8b
 800dd78:	602b      	strlt	r3, [r5, #0]
 800dd7a:	2c00      	cmp	r4, #0
 800dd7c:	d0dd      	beq.n	800dd3a <sniprintf+0x16>
 800dd7e:	9b02      	ldr	r3, [sp, #8]
 800dd80:	2200      	movs	r2, #0
 800dd82:	701a      	strb	r2, [r3, #0]
 800dd84:	e7d9      	b.n	800dd3a <sniprintf+0x16>
 800dd86:	bf00      	nop
 800dd88:	2400002c 	.word	0x2400002c

0800dd8c <siprintf>:
 800dd8c:	b40e      	push	{r1, r2, r3}
 800dd8e:	b500      	push	{lr}
 800dd90:	b09c      	sub	sp, #112	@ 0x70
 800dd92:	ab1d      	add	r3, sp, #116	@ 0x74
 800dd94:	9002      	str	r0, [sp, #8]
 800dd96:	9006      	str	r0, [sp, #24]
 800dd98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800dd9c:	4809      	ldr	r0, [pc, #36]	@ (800ddc4 <siprintf+0x38>)
 800dd9e:	9107      	str	r1, [sp, #28]
 800dda0:	9104      	str	r1, [sp, #16]
 800dda2:	4909      	ldr	r1, [pc, #36]	@ (800ddc8 <siprintf+0x3c>)
 800dda4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dda8:	9105      	str	r1, [sp, #20]
 800ddaa:	6800      	ldr	r0, [r0, #0]
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	a902      	add	r1, sp, #8
 800ddb0:	f000 f994 	bl	800e0dc <_svfiprintf_r>
 800ddb4:	9b02      	ldr	r3, [sp, #8]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	b01c      	add	sp, #112	@ 0x70
 800ddbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddc0:	b003      	add	sp, #12
 800ddc2:	4770      	bx	lr
 800ddc4:	2400002c 	.word	0x2400002c
 800ddc8:	ffff0208 	.word	0xffff0208

0800ddcc <memset>:
 800ddcc:	4402      	add	r2, r0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d100      	bne.n	800ddd6 <memset+0xa>
 800ddd4:	4770      	bx	lr
 800ddd6:	f803 1b01 	strb.w	r1, [r3], #1
 800ddda:	e7f9      	b.n	800ddd0 <memset+0x4>

0800dddc <__errno>:
 800dddc:	4b01      	ldr	r3, [pc, #4]	@ (800dde4 <__errno+0x8>)
 800ddde:	6818      	ldr	r0, [r3, #0]
 800dde0:	4770      	bx	lr
 800dde2:	bf00      	nop
 800dde4:	2400002c 	.word	0x2400002c

0800dde8 <__libc_init_array>:
 800dde8:	b570      	push	{r4, r5, r6, lr}
 800ddea:	4d0d      	ldr	r5, [pc, #52]	@ (800de20 <__libc_init_array+0x38>)
 800ddec:	4c0d      	ldr	r4, [pc, #52]	@ (800de24 <__libc_init_array+0x3c>)
 800ddee:	1b64      	subs	r4, r4, r5
 800ddf0:	10a4      	asrs	r4, r4, #2
 800ddf2:	2600      	movs	r6, #0
 800ddf4:	42a6      	cmp	r6, r4
 800ddf6:	d109      	bne.n	800de0c <__libc_init_array+0x24>
 800ddf8:	4d0b      	ldr	r5, [pc, #44]	@ (800de28 <__libc_init_array+0x40>)
 800ddfa:	4c0c      	ldr	r4, [pc, #48]	@ (800de2c <__libc_init_array+0x44>)
 800ddfc:	f000 fc66 	bl	800e6cc <_init>
 800de00:	1b64      	subs	r4, r4, r5
 800de02:	10a4      	asrs	r4, r4, #2
 800de04:	2600      	movs	r6, #0
 800de06:	42a6      	cmp	r6, r4
 800de08:	d105      	bne.n	800de16 <__libc_init_array+0x2e>
 800de0a:	bd70      	pop	{r4, r5, r6, pc}
 800de0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de10:	4798      	blx	r3
 800de12:	3601      	adds	r6, #1
 800de14:	e7ee      	b.n	800ddf4 <__libc_init_array+0xc>
 800de16:	f855 3b04 	ldr.w	r3, [r5], #4
 800de1a:	4798      	blx	r3
 800de1c:	3601      	adds	r6, #1
 800de1e:	e7f2      	b.n	800de06 <__libc_init_array+0x1e>
 800de20:	0800e814 	.word	0x0800e814
 800de24:	0800e814 	.word	0x0800e814
 800de28:	0800e814 	.word	0x0800e814
 800de2c:	0800e818 	.word	0x0800e818

0800de30 <__retarget_lock_acquire_recursive>:
 800de30:	4770      	bx	lr

0800de32 <__retarget_lock_release_recursive>:
 800de32:	4770      	bx	lr

0800de34 <_free_r>:
 800de34:	b538      	push	{r3, r4, r5, lr}
 800de36:	4605      	mov	r5, r0
 800de38:	2900      	cmp	r1, #0
 800de3a:	d041      	beq.n	800dec0 <_free_r+0x8c>
 800de3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de40:	1f0c      	subs	r4, r1, #4
 800de42:	2b00      	cmp	r3, #0
 800de44:	bfb8      	it	lt
 800de46:	18e4      	addlt	r4, r4, r3
 800de48:	f000 f8e0 	bl	800e00c <__malloc_lock>
 800de4c:	4a1d      	ldr	r2, [pc, #116]	@ (800dec4 <_free_r+0x90>)
 800de4e:	6813      	ldr	r3, [r2, #0]
 800de50:	b933      	cbnz	r3, 800de60 <_free_r+0x2c>
 800de52:	6063      	str	r3, [r4, #4]
 800de54:	6014      	str	r4, [r2, #0]
 800de56:	4628      	mov	r0, r5
 800de58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de5c:	f000 b8dc 	b.w	800e018 <__malloc_unlock>
 800de60:	42a3      	cmp	r3, r4
 800de62:	d908      	bls.n	800de76 <_free_r+0x42>
 800de64:	6820      	ldr	r0, [r4, #0]
 800de66:	1821      	adds	r1, r4, r0
 800de68:	428b      	cmp	r3, r1
 800de6a:	bf01      	itttt	eq
 800de6c:	6819      	ldreq	r1, [r3, #0]
 800de6e:	685b      	ldreq	r3, [r3, #4]
 800de70:	1809      	addeq	r1, r1, r0
 800de72:	6021      	streq	r1, [r4, #0]
 800de74:	e7ed      	b.n	800de52 <_free_r+0x1e>
 800de76:	461a      	mov	r2, r3
 800de78:	685b      	ldr	r3, [r3, #4]
 800de7a:	b10b      	cbz	r3, 800de80 <_free_r+0x4c>
 800de7c:	42a3      	cmp	r3, r4
 800de7e:	d9fa      	bls.n	800de76 <_free_r+0x42>
 800de80:	6811      	ldr	r1, [r2, #0]
 800de82:	1850      	adds	r0, r2, r1
 800de84:	42a0      	cmp	r0, r4
 800de86:	d10b      	bne.n	800dea0 <_free_r+0x6c>
 800de88:	6820      	ldr	r0, [r4, #0]
 800de8a:	4401      	add	r1, r0
 800de8c:	1850      	adds	r0, r2, r1
 800de8e:	4283      	cmp	r3, r0
 800de90:	6011      	str	r1, [r2, #0]
 800de92:	d1e0      	bne.n	800de56 <_free_r+0x22>
 800de94:	6818      	ldr	r0, [r3, #0]
 800de96:	685b      	ldr	r3, [r3, #4]
 800de98:	6053      	str	r3, [r2, #4]
 800de9a:	4408      	add	r0, r1
 800de9c:	6010      	str	r0, [r2, #0]
 800de9e:	e7da      	b.n	800de56 <_free_r+0x22>
 800dea0:	d902      	bls.n	800dea8 <_free_r+0x74>
 800dea2:	230c      	movs	r3, #12
 800dea4:	602b      	str	r3, [r5, #0]
 800dea6:	e7d6      	b.n	800de56 <_free_r+0x22>
 800dea8:	6820      	ldr	r0, [r4, #0]
 800deaa:	1821      	adds	r1, r4, r0
 800deac:	428b      	cmp	r3, r1
 800deae:	bf04      	itt	eq
 800deb0:	6819      	ldreq	r1, [r3, #0]
 800deb2:	685b      	ldreq	r3, [r3, #4]
 800deb4:	6063      	str	r3, [r4, #4]
 800deb6:	bf04      	itt	eq
 800deb8:	1809      	addeq	r1, r1, r0
 800deba:	6021      	streq	r1, [r4, #0]
 800debc:	6054      	str	r4, [r2, #4]
 800debe:	e7ca      	b.n	800de56 <_free_r+0x22>
 800dec0:	bd38      	pop	{r3, r4, r5, pc}
 800dec2:	bf00      	nop
 800dec4:	2400047c 	.word	0x2400047c

0800dec8 <sbrk_aligned>:
 800dec8:	b570      	push	{r4, r5, r6, lr}
 800deca:	4e0f      	ldr	r6, [pc, #60]	@ (800df08 <sbrk_aligned+0x40>)
 800decc:	460c      	mov	r4, r1
 800dece:	6831      	ldr	r1, [r6, #0]
 800ded0:	4605      	mov	r5, r0
 800ded2:	b911      	cbnz	r1, 800deda <sbrk_aligned+0x12>
 800ded4:	f000 fba6 	bl	800e624 <_sbrk_r>
 800ded8:	6030      	str	r0, [r6, #0]
 800deda:	4621      	mov	r1, r4
 800dedc:	4628      	mov	r0, r5
 800dede:	f000 fba1 	bl	800e624 <_sbrk_r>
 800dee2:	1c43      	adds	r3, r0, #1
 800dee4:	d103      	bne.n	800deee <sbrk_aligned+0x26>
 800dee6:	f04f 34ff 	mov.w	r4, #4294967295
 800deea:	4620      	mov	r0, r4
 800deec:	bd70      	pop	{r4, r5, r6, pc}
 800deee:	1cc4      	adds	r4, r0, #3
 800def0:	f024 0403 	bic.w	r4, r4, #3
 800def4:	42a0      	cmp	r0, r4
 800def6:	d0f8      	beq.n	800deea <sbrk_aligned+0x22>
 800def8:	1a21      	subs	r1, r4, r0
 800defa:	4628      	mov	r0, r5
 800defc:	f000 fb92 	bl	800e624 <_sbrk_r>
 800df00:	3001      	adds	r0, #1
 800df02:	d1f2      	bne.n	800deea <sbrk_aligned+0x22>
 800df04:	e7ef      	b.n	800dee6 <sbrk_aligned+0x1e>
 800df06:	bf00      	nop
 800df08:	24000478 	.word	0x24000478

0800df0c <_malloc_r>:
 800df0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df10:	1ccd      	adds	r5, r1, #3
 800df12:	f025 0503 	bic.w	r5, r5, #3
 800df16:	3508      	adds	r5, #8
 800df18:	2d0c      	cmp	r5, #12
 800df1a:	bf38      	it	cc
 800df1c:	250c      	movcc	r5, #12
 800df1e:	2d00      	cmp	r5, #0
 800df20:	4606      	mov	r6, r0
 800df22:	db01      	blt.n	800df28 <_malloc_r+0x1c>
 800df24:	42a9      	cmp	r1, r5
 800df26:	d904      	bls.n	800df32 <_malloc_r+0x26>
 800df28:	230c      	movs	r3, #12
 800df2a:	6033      	str	r3, [r6, #0]
 800df2c:	2000      	movs	r0, #0
 800df2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e008 <_malloc_r+0xfc>
 800df36:	f000 f869 	bl	800e00c <__malloc_lock>
 800df3a:	f8d8 3000 	ldr.w	r3, [r8]
 800df3e:	461c      	mov	r4, r3
 800df40:	bb44      	cbnz	r4, 800df94 <_malloc_r+0x88>
 800df42:	4629      	mov	r1, r5
 800df44:	4630      	mov	r0, r6
 800df46:	f7ff ffbf 	bl	800dec8 <sbrk_aligned>
 800df4a:	1c43      	adds	r3, r0, #1
 800df4c:	4604      	mov	r4, r0
 800df4e:	d158      	bne.n	800e002 <_malloc_r+0xf6>
 800df50:	f8d8 4000 	ldr.w	r4, [r8]
 800df54:	4627      	mov	r7, r4
 800df56:	2f00      	cmp	r7, #0
 800df58:	d143      	bne.n	800dfe2 <_malloc_r+0xd6>
 800df5a:	2c00      	cmp	r4, #0
 800df5c:	d04b      	beq.n	800dff6 <_malloc_r+0xea>
 800df5e:	6823      	ldr	r3, [r4, #0]
 800df60:	4639      	mov	r1, r7
 800df62:	4630      	mov	r0, r6
 800df64:	eb04 0903 	add.w	r9, r4, r3
 800df68:	f000 fb5c 	bl	800e624 <_sbrk_r>
 800df6c:	4581      	cmp	r9, r0
 800df6e:	d142      	bne.n	800dff6 <_malloc_r+0xea>
 800df70:	6821      	ldr	r1, [r4, #0]
 800df72:	1a6d      	subs	r5, r5, r1
 800df74:	4629      	mov	r1, r5
 800df76:	4630      	mov	r0, r6
 800df78:	f7ff ffa6 	bl	800dec8 <sbrk_aligned>
 800df7c:	3001      	adds	r0, #1
 800df7e:	d03a      	beq.n	800dff6 <_malloc_r+0xea>
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	442b      	add	r3, r5
 800df84:	6023      	str	r3, [r4, #0]
 800df86:	f8d8 3000 	ldr.w	r3, [r8]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	bb62      	cbnz	r2, 800dfe8 <_malloc_r+0xdc>
 800df8e:	f8c8 7000 	str.w	r7, [r8]
 800df92:	e00f      	b.n	800dfb4 <_malloc_r+0xa8>
 800df94:	6822      	ldr	r2, [r4, #0]
 800df96:	1b52      	subs	r2, r2, r5
 800df98:	d420      	bmi.n	800dfdc <_malloc_r+0xd0>
 800df9a:	2a0b      	cmp	r2, #11
 800df9c:	d917      	bls.n	800dfce <_malloc_r+0xc2>
 800df9e:	1961      	adds	r1, r4, r5
 800dfa0:	42a3      	cmp	r3, r4
 800dfa2:	6025      	str	r5, [r4, #0]
 800dfa4:	bf18      	it	ne
 800dfa6:	6059      	strne	r1, [r3, #4]
 800dfa8:	6863      	ldr	r3, [r4, #4]
 800dfaa:	bf08      	it	eq
 800dfac:	f8c8 1000 	streq.w	r1, [r8]
 800dfb0:	5162      	str	r2, [r4, r5]
 800dfb2:	604b      	str	r3, [r1, #4]
 800dfb4:	4630      	mov	r0, r6
 800dfb6:	f000 f82f 	bl	800e018 <__malloc_unlock>
 800dfba:	f104 000b 	add.w	r0, r4, #11
 800dfbe:	1d23      	adds	r3, r4, #4
 800dfc0:	f020 0007 	bic.w	r0, r0, #7
 800dfc4:	1ac2      	subs	r2, r0, r3
 800dfc6:	bf1c      	itt	ne
 800dfc8:	1a1b      	subne	r3, r3, r0
 800dfca:	50a3      	strne	r3, [r4, r2]
 800dfcc:	e7af      	b.n	800df2e <_malloc_r+0x22>
 800dfce:	6862      	ldr	r2, [r4, #4]
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	bf0c      	ite	eq
 800dfd4:	f8c8 2000 	streq.w	r2, [r8]
 800dfd8:	605a      	strne	r2, [r3, #4]
 800dfda:	e7eb      	b.n	800dfb4 <_malloc_r+0xa8>
 800dfdc:	4623      	mov	r3, r4
 800dfde:	6864      	ldr	r4, [r4, #4]
 800dfe0:	e7ae      	b.n	800df40 <_malloc_r+0x34>
 800dfe2:	463c      	mov	r4, r7
 800dfe4:	687f      	ldr	r7, [r7, #4]
 800dfe6:	e7b6      	b.n	800df56 <_malloc_r+0x4a>
 800dfe8:	461a      	mov	r2, r3
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	42a3      	cmp	r3, r4
 800dfee:	d1fb      	bne.n	800dfe8 <_malloc_r+0xdc>
 800dff0:	2300      	movs	r3, #0
 800dff2:	6053      	str	r3, [r2, #4]
 800dff4:	e7de      	b.n	800dfb4 <_malloc_r+0xa8>
 800dff6:	230c      	movs	r3, #12
 800dff8:	6033      	str	r3, [r6, #0]
 800dffa:	4630      	mov	r0, r6
 800dffc:	f000 f80c 	bl	800e018 <__malloc_unlock>
 800e000:	e794      	b.n	800df2c <_malloc_r+0x20>
 800e002:	6005      	str	r5, [r0, #0]
 800e004:	e7d6      	b.n	800dfb4 <_malloc_r+0xa8>
 800e006:	bf00      	nop
 800e008:	2400047c 	.word	0x2400047c

0800e00c <__malloc_lock>:
 800e00c:	4801      	ldr	r0, [pc, #4]	@ (800e014 <__malloc_lock+0x8>)
 800e00e:	f7ff bf0f 	b.w	800de30 <__retarget_lock_acquire_recursive>
 800e012:	bf00      	nop
 800e014:	24000474 	.word	0x24000474

0800e018 <__malloc_unlock>:
 800e018:	4801      	ldr	r0, [pc, #4]	@ (800e020 <__malloc_unlock+0x8>)
 800e01a:	f7ff bf0a 	b.w	800de32 <__retarget_lock_release_recursive>
 800e01e:	bf00      	nop
 800e020:	24000474 	.word	0x24000474

0800e024 <__ssputs_r>:
 800e024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e028:	688e      	ldr	r6, [r1, #8]
 800e02a:	461f      	mov	r7, r3
 800e02c:	42be      	cmp	r6, r7
 800e02e:	680b      	ldr	r3, [r1, #0]
 800e030:	4682      	mov	sl, r0
 800e032:	460c      	mov	r4, r1
 800e034:	4690      	mov	r8, r2
 800e036:	d82d      	bhi.n	800e094 <__ssputs_r+0x70>
 800e038:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e03c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e040:	d026      	beq.n	800e090 <__ssputs_r+0x6c>
 800e042:	6965      	ldr	r5, [r4, #20]
 800e044:	6909      	ldr	r1, [r1, #16]
 800e046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e04a:	eba3 0901 	sub.w	r9, r3, r1
 800e04e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e052:	1c7b      	adds	r3, r7, #1
 800e054:	444b      	add	r3, r9
 800e056:	106d      	asrs	r5, r5, #1
 800e058:	429d      	cmp	r5, r3
 800e05a:	bf38      	it	cc
 800e05c:	461d      	movcc	r5, r3
 800e05e:	0553      	lsls	r3, r2, #21
 800e060:	d527      	bpl.n	800e0b2 <__ssputs_r+0x8e>
 800e062:	4629      	mov	r1, r5
 800e064:	f7ff ff52 	bl	800df0c <_malloc_r>
 800e068:	4606      	mov	r6, r0
 800e06a:	b360      	cbz	r0, 800e0c6 <__ssputs_r+0xa2>
 800e06c:	6921      	ldr	r1, [r4, #16]
 800e06e:	464a      	mov	r2, r9
 800e070:	f000 fae8 	bl	800e644 <memcpy>
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e07a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e07e:	81a3      	strh	r3, [r4, #12]
 800e080:	6126      	str	r6, [r4, #16]
 800e082:	6165      	str	r5, [r4, #20]
 800e084:	444e      	add	r6, r9
 800e086:	eba5 0509 	sub.w	r5, r5, r9
 800e08a:	6026      	str	r6, [r4, #0]
 800e08c:	60a5      	str	r5, [r4, #8]
 800e08e:	463e      	mov	r6, r7
 800e090:	42be      	cmp	r6, r7
 800e092:	d900      	bls.n	800e096 <__ssputs_r+0x72>
 800e094:	463e      	mov	r6, r7
 800e096:	6820      	ldr	r0, [r4, #0]
 800e098:	4632      	mov	r2, r6
 800e09a:	4641      	mov	r1, r8
 800e09c:	f000 faa8 	bl	800e5f0 <memmove>
 800e0a0:	68a3      	ldr	r3, [r4, #8]
 800e0a2:	1b9b      	subs	r3, r3, r6
 800e0a4:	60a3      	str	r3, [r4, #8]
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	4433      	add	r3, r6
 800e0aa:	6023      	str	r3, [r4, #0]
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0b2:	462a      	mov	r2, r5
 800e0b4:	f000 fad4 	bl	800e660 <_realloc_r>
 800e0b8:	4606      	mov	r6, r0
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d1e0      	bne.n	800e080 <__ssputs_r+0x5c>
 800e0be:	6921      	ldr	r1, [r4, #16]
 800e0c0:	4650      	mov	r0, sl
 800e0c2:	f7ff feb7 	bl	800de34 <_free_r>
 800e0c6:	230c      	movs	r3, #12
 800e0c8:	f8ca 3000 	str.w	r3, [sl]
 800e0cc:	89a3      	ldrh	r3, [r4, #12]
 800e0ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0d2:	81a3      	strh	r3, [r4, #12]
 800e0d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d8:	e7e9      	b.n	800e0ae <__ssputs_r+0x8a>
	...

0800e0dc <_svfiprintf_r>:
 800e0dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e0:	4698      	mov	r8, r3
 800e0e2:	898b      	ldrh	r3, [r1, #12]
 800e0e4:	061b      	lsls	r3, r3, #24
 800e0e6:	b09d      	sub	sp, #116	@ 0x74
 800e0e8:	4607      	mov	r7, r0
 800e0ea:	460d      	mov	r5, r1
 800e0ec:	4614      	mov	r4, r2
 800e0ee:	d510      	bpl.n	800e112 <_svfiprintf_r+0x36>
 800e0f0:	690b      	ldr	r3, [r1, #16]
 800e0f2:	b973      	cbnz	r3, 800e112 <_svfiprintf_r+0x36>
 800e0f4:	2140      	movs	r1, #64	@ 0x40
 800e0f6:	f7ff ff09 	bl	800df0c <_malloc_r>
 800e0fa:	6028      	str	r0, [r5, #0]
 800e0fc:	6128      	str	r0, [r5, #16]
 800e0fe:	b930      	cbnz	r0, 800e10e <_svfiprintf_r+0x32>
 800e100:	230c      	movs	r3, #12
 800e102:	603b      	str	r3, [r7, #0]
 800e104:	f04f 30ff 	mov.w	r0, #4294967295
 800e108:	b01d      	add	sp, #116	@ 0x74
 800e10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e10e:	2340      	movs	r3, #64	@ 0x40
 800e110:	616b      	str	r3, [r5, #20]
 800e112:	2300      	movs	r3, #0
 800e114:	9309      	str	r3, [sp, #36]	@ 0x24
 800e116:	2320      	movs	r3, #32
 800e118:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e11c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e120:	2330      	movs	r3, #48	@ 0x30
 800e122:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e2c0 <_svfiprintf_r+0x1e4>
 800e126:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e12a:	f04f 0901 	mov.w	r9, #1
 800e12e:	4623      	mov	r3, r4
 800e130:	469a      	mov	sl, r3
 800e132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e136:	b10a      	cbz	r2, 800e13c <_svfiprintf_r+0x60>
 800e138:	2a25      	cmp	r2, #37	@ 0x25
 800e13a:	d1f9      	bne.n	800e130 <_svfiprintf_r+0x54>
 800e13c:	ebba 0b04 	subs.w	fp, sl, r4
 800e140:	d00b      	beq.n	800e15a <_svfiprintf_r+0x7e>
 800e142:	465b      	mov	r3, fp
 800e144:	4622      	mov	r2, r4
 800e146:	4629      	mov	r1, r5
 800e148:	4638      	mov	r0, r7
 800e14a:	f7ff ff6b 	bl	800e024 <__ssputs_r>
 800e14e:	3001      	adds	r0, #1
 800e150:	f000 80a7 	beq.w	800e2a2 <_svfiprintf_r+0x1c6>
 800e154:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e156:	445a      	add	r2, fp
 800e158:	9209      	str	r2, [sp, #36]	@ 0x24
 800e15a:	f89a 3000 	ldrb.w	r3, [sl]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 809f 	beq.w	800e2a2 <_svfiprintf_r+0x1c6>
 800e164:	2300      	movs	r3, #0
 800e166:	f04f 32ff 	mov.w	r2, #4294967295
 800e16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e16e:	f10a 0a01 	add.w	sl, sl, #1
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	9307      	str	r3, [sp, #28]
 800e176:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e17a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e17c:	4654      	mov	r4, sl
 800e17e:	2205      	movs	r2, #5
 800e180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e184:	484e      	ldr	r0, [pc, #312]	@ (800e2c0 <_svfiprintf_r+0x1e4>)
 800e186:	f7f2 f8ab 	bl	80002e0 <memchr>
 800e18a:	9a04      	ldr	r2, [sp, #16]
 800e18c:	b9d8      	cbnz	r0, 800e1c6 <_svfiprintf_r+0xea>
 800e18e:	06d0      	lsls	r0, r2, #27
 800e190:	bf44      	itt	mi
 800e192:	2320      	movmi	r3, #32
 800e194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e198:	0711      	lsls	r1, r2, #28
 800e19a:	bf44      	itt	mi
 800e19c:	232b      	movmi	r3, #43	@ 0x2b
 800e19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1a8:	d015      	beq.n	800e1d6 <_svfiprintf_r+0xfa>
 800e1aa:	9a07      	ldr	r2, [sp, #28]
 800e1ac:	4654      	mov	r4, sl
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f04f 0c0a 	mov.w	ip, #10
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1ba:	3b30      	subs	r3, #48	@ 0x30
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	d94b      	bls.n	800e258 <_svfiprintf_r+0x17c>
 800e1c0:	b1b0      	cbz	r0, 800e1f0 <_svfiprintf_r+0x114>
 800e1c2:	9207      	str	r2, [sp, #28]
 800e1c4:	e014      	b.n	800e1f0 <_svfiprintf_r+0x114>
 800e1c6:	eba0 0308 	sub.w	r3, r0, r8
 800e1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	46a2      	mov	sl, r4
 800e1d4:	e7d2      	b.n	800e17c <_svfiprintf_r+0xa0>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	1d19      	adds	r1, r3, #4
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9103      	str	r1, [sp, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	bfbb      	ittet	lt
 800e1e2:	425b      	neglt	r3, r3
 800e1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e8:	9307      	strge	r3, [sp, #28]
 800e1ea:	9307      	strlt	r3, [sp, #28]
 800e1ec:	bfb8      	it	lt
 800e1ee:	9204      	strlt	r2, [sp, #16]
 800e1f0:	7823      	ldrb	r3, [r4, #0]
 800e1f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1f4:	d10a      	bne.n	800e20c <_svfiprintf_r+0x130>
 800e1f6:	7863      	ldrb	r3, [r4, #1]
 800e1f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1fa:	d132      	bne.n	800e262 <_svfiprintf_r+0x186>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	1d1a      	adds	r2, r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	9203      	str	r2, [sp, #12]
 800e204:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e208:	3402      	adds	r4, #2
 800e20a:	9305      	str	r3, [sp, #20]
 800e20c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e2d0 <_svfiprintf_r+0x1f4>
 800e210:	7821      	ldrb	r1, [r4, #0]
 800e212:	2203      	movs	r2, #3
 800e214:	4650      	mov	r0, sl
 800e216:	f7f2 f863 	bl	80002e0 <memchr>
 800e21a:	b138      	cbz	r0, 800e22c <_svfiprintf_r+0x150>
 800e21c:	9b04      	ldr	r3, [sp, #16]
 800e21e:	eba0 000a 	sub.w	r0, r0, sl
 800e222:	2240      	movs	r2, #64	@ 0x40
 800e224:	4082      	lsls	r2, r0
 800e226:	4313      	orrs	r3, r2
 800e228:	3401      	adds	r4, #1
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e230:	4824      	ldr	r0, [pc, #144]	@ (800e2c4 <_svfiprintf_r+0x1e8>)
 800e232:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e236:	2206      	movs	r2, #6
 800e238:	f7f2 f852 	bl	80002e0 <memchr>
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d036      	beq.n	800e2ae <_svfiprintf_r+0x1d2>
 800e240:	4b21      	ldr	r3, [pc, #132]	@ (800e2c8 <_svfiprintf_r+0x1ec>)
 800e242:	bb1b      	cbnz	r3, 800e28c <_svfiprintf_r+0x1b0>
 800e244:	9b03      	ldr	r3, [sp, #12]
 800e246:	3307      	adds	r3, #7
 800e248:	f023 0307 	bic.w	r3, r3, #7
 800e24c:	3308      	adds	r3, #8
 800e24e:	9303      	str	r3, [sp, #12]
 800e250:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e252:	4433      	add	r3, r6
 800e254:	9309      	str	r3, [sp, #36]	@ 0x24
 800e256:	e76a      	b.n	800e12e <_svfiprintf_r+0x52>
 800e258:	fb0c 3202 	mla	r2, ip, r2, r3
 800e25c:	460c      	mov	r4, r1
 800e25e:	2001      	movs	r0, #1
 800e260:	e7a8      	b.n	800e1b4 <_svfiprintf_r+0xd8>
 800e262:	2300      	movs	r3, #0
 800e264:	3401      	adds	r4, #1
 800e266:	9305      	str	r3, [sp, #20]
 800e268:	4619      	mov	r1, r3
 800e26a:	f04f 0c0a 	mov.w	ip, #10
 800e26e:	4620      	mov	r0, r4
 800e270:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e274:	3a30      	subs	r2, #48	@ 0x30
 800e276:	2a09      	cmp	r2, #9
 800e278:	d903      	bls.n	800e282 <_svfiprintf_r+0x1a6>
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d0c6      	beq.n	800e20c <_svfiprintf_r+0x130>
 800e27e:	9105      	str	r1, [sp, #20]
 800e280:	e7c4      	b.n	800e20c <_svfiprintf_r+0x130>
 800e282:	fb0c 2101 	mla	r1, ip, r1, r2
 800e286:	4604      	mov	r4, r0
 800e288:	2301      	movs	r3, #1
 800e28a:	e7f0      	b.n	800e26e <_svfiprintf_r+0x192>
 800e28c:	ab03      	add	r3, sp, #12
 800e28e:	9300      	str	r3, [sp, #0]
 800e290:	462a      	mov	r2, r5
 800e292:	4b0e      	ldr	r3, [pc, #56]	@ (800e2cc <_svfiprintf_r+0x1f0>)
 800e294:	a904      	add	r1, sp, #16
 800e296:	4638      	mov	r0, r7
 800e298:	f3af 8000 	nop.w
 800e29c:	1c42      	adds	r2, r0, #1
 800e29e:	4606      	mov	r6, r0
 800e2a0:	d1d6      	bne.n	800e250 <_svfiprintf_r+0x174>
 800e2a2:	89ab      	ldrh	r3, [r5, #12]
 800e2a4:	065b      	lsls	r3, r3, #25
 800e2a6:	f53f af2d 	bmi.w	800e104 <_svfiprintf_r+0x28>
 800e2aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2ac:	e72c      	b.n	800e108 <_svfiprintf_r+0x2c>
 800e2ae:	ab03      	add	r3, sp, #12
 800e2b0:	9300      	str	r3, [sp, #0]
 800e2b2:	462a      	mov	r2, r5
 800e2b4:	4b05      	ldr	r3, [pc, #20]	@ (800e2cc <_svfiprintf_r+0x1f0>)
 800e2b6:	a904      	add	r1, sp, #16
 800e2b8:	4638      	mov	r0, r7
 800e2ba:	f000 f879 	bl	800e3b0 <_printf_i>
 800e2be:	e7ed      	b.n	800e29c <_svfiprintf_r+0x1c0>
 800e2c0:	0800e7d8 	.word	0x0800e7d8
 800e2c4:	0800e7e2 	.word	0x0800e7e2
 800e2c8:	00000000 	.word	0x00000000
 800e2cc:	0800e025 	.word	0x0800e025
 800e2d0:	0800e7de 	.word	0x0800e7de

0800e2d4 <_printf_common>:
 800e2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d8:	4616      	mov	r6, r2
 800e2da:	4698      	mov	r8, r3
 800e2dc:	688a      	ldr	r2, [r1, #8]
 800e2de:	690b      	ldr	r3, [r1, #16]
 800e2e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e2e4:	4293      	cmp	r3, r2
 800e2e6:	bfb8      	it	lt
 800e2e8:	4613      	movlt	r3, r2
 800e2ea:	6033      	str	r3, [r6, #0]
 800e2ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e2f0:	4607      	mov	r7, r0
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	b10a      	cbz	r2, 800e2fa <_printf_common+0x26>
 800e2f6:	3301      	adds	r3, #1
 800e2f8:	6033      	str	r3, [r6, #0]
 800e2fa:	6823      	ldr	r3, [r4, #0]
 800e2fc:	0699      	lsls	r1, r3, #26
 800e2fe:	bf42      	ittt	mi
 800e300:	6833      	ldrmi	r3, [r6, #0]
 800e302:	3302      	addmi	r3, #2
 800e304:	6033      	strmi	r3, [r6, #0]
 800e306:	6825      	ldr	r5, [r4, #0]
 800e308:	f015 0506 	ands.w	r5, r5, #6
 800e30c:	d106      	bne.n	800e31c <_printf_common+0x48>
 800e30e:	f104 0a19 	add.w	sl, r4, #25
 800e312:	68e3      	ldr	r3, [r4, #12]
 800e314:	6832      	ldr	r2, [r6, #0]
 800e316:	1a9b      	subs	r3, r3, r2
 800e318:	42ab      	cmp	r3, r5
 800e31a:	dc26      	bgt.n	800e36a <_printf_common+0x96>
 800e31c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e320:	6822      	ldr	r2, [r4, #0]
 800e322:	3b00      	subs	r3, #0
 800e324:	bf18      	it	ne
 800e326:	2301      	movne	r3, #1
 800e328:	0692      	lsls	r2, r2, #26
 800e32a:	d42b      	bmi.n	800e384 <_printf_common+0xb0>
 800e32c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e330:	4641      	mov	r1, r8
 800e332:	4638      	mov	r0, r7
 800e334:	47c8      	blx	r9
 800e336:	3001      	adds	r0, #1
 800e338:	d01e      	beq.n	800e378 <_printf_common+0xa4>
 800e33a:	6823      	ldr	r3, [r4, #0]
 800e33c:	6922      	ldr	r2, [r4, #16]
 800e33e:	f003 0306 	and.w	r3, r3, #6
 800e342:	2b04      	cmp	r3, #4
 800e344:	bf02      	ittt	eq
 800e346:	68e5      	ldreq	r5, [r4, #12]
 800e348:	6833      	ldreq	r3, [r6, #0]
 800e34a:	1aed      	subeq	r5, r5, r3
 800e34c:	68a3      	ldr	r3, [r4, #8]
 800e34e:	bf0c      	ite	eq
 800e350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e354:	2500      	movne	r5, #0
 800e356:	4293      	cmp	r3, r2
 800e358:	bfc4      	itt	gt
 800e35a:	1a9b      	subgt	r3, r3, r2
 800e35c:	18ed      	addgt	r5, r5, r3
 800e35e:	2600      	movs	r6, #0
 800e360:	341a      	adds	r4, #26
 800e362:	42b5      	cmp	r5, r6
 800e364:	d11a      	bne.n	800e39c <_printf_common+0xc8>
 800e366:	2000      	movs	r0, #0
 800e368:	e008      	b.n	800e37c <_printf_common+0xa8>
 800e36a:	2301      	movs	r3, #1
 800e36c:	4652      	mov	r2, sl
 800e36e:	4641      	mov	r1, r8
 800e370:	4638      	mov	r0, r7
 800e372:	47c8      	blx	r9
 800e374:	3001      	adds	r0, #1
 800e376:	d103      	bne.n	800e380 <_printf_common+0xac>
 800e378:	f04f 30ff 	mov.w	r0, #4294967295
 800e37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e380:	3501      	adds	r5, #1
 800e382:	e7c6      	b.n	800e312 <_printf_common+0x3e>
 800e384:	18e1      	adds	r1, r4, r3
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	2030      	movs	r0, #48	@ 0x30
 800e38a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e38e:	4422      	add	r2, r4
 800e390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e398:	3302      	adds	r3, #2
 800e39a:	e7c7      	b.n	800e32c <_printf_common+0x58>
 800e39c:	2301      	movs	r3, #1
 800e39e:	4622      	mov	r2, r4
 800e3a0:	4641      	mov	r1, r8
 800e3a2:	4638      	mov	r0, r7
 800e3a4:	47c8      	blx	r9
 800e3a6:	3001      	adds	r0, #1
 800e3a8:	d0e6      	beq.n	800e378 <_printf_common+0xa4>
 800e3aa:	3601      	adds	r6, #1
 800e3ac:	e7d9      	b.n	800e362 <_printf_common+0x8e>
	...

0800e3b0 <_printf_i>:
 800e3b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3b4:	7e0f      	ldrb	r7, [r1, #24]
 800e3b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e3b8:	2f78      	cmp	r7, #120	@ 0x78
 800e3ba:	4691      	mov	r9, r2
 800e3bc:	4680      	mov	r8, r0
 800e3be:	460c      	mov	r4, r1
 800e3c0:	469a      	mov	sl, r3
 800e3c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e3c6:	d807      	bhi.n	800e3d8 <_printf_i+0x28>
 800e3c8:	2f62      	cmp	r7, #98	@ 0x62
 800e3ca:	d80a      	bhi.n	800e3e2 <_printf_i+0x32>
 800e3cc:	2f00      	cmp	r7, #0
 800e3ce:	f000 80d2 	beq.w	800e576 <_printf_i+0x1c6>
 800e3d2:	2f58      	cmp	r7, #88	@ 0x58
 800e3d4:	f000 80b9 	beq.w	800e54a <_printf_i+0x19a>
 800e3d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e3dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e3e0:	e03a      	b.n	800e458 <_printf_i+0xa8>
 800e3e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e3e6:	2b15      	cmp	r3, #21
 800e3e8:	d8f6      	bhi.n	800e3d8 <_printf_i+0x28>
 800e3ea:	a101      	add	r1, pc, #4	@ (adr r1, 800e3f0 <_printf_i+0x40>)
 800e3ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e3f0:	0800e449 	.word	0x0800e449
 800e3f4:	0800e45d 	.word	0x0800e45d
 800e3f8:	0800e3d9 	.word	0x0800e3d9
 800e3fc:	0800e3d9 	.word	0x0800e3d9
 800e400:	0800e3d9 	.word	0x0800e3d9
 800e404:	0800e3d9 	.word	0x0800e3d9
 800e408:	0800e45d 	.word	0x0800e45d
 800e40c:	0800e3d9 	.word	0x0800e3d9
 800e410:	0800e3d9 	.word	0x0800e3d9
 800e414:	0800e3d9 	.word	0x0800e3d9
 800e418:	0800e3d9 	.word	0x0800e3d9
 800e41c:	0800e55d 	.word	0x0800e55d
 800e420:	0800e487 	.word	0x0800e487
 800e424:	0800e517 	.word	0x0800e517
 800e428:	0800e3d9 	.word	0x0800e3d9
 800e42c:	0800e3d9 	.word	0x0800e3d9
 800e430:	0800e57f 	.word	0x0800e57f
 800e434:	0800e3d9 	.word	0x0800e3d9
 800e438:	0800e487 	.word	0x0800e487
 800e43c:	0800e3d9 	.word	0x0800e3d9
 800e440:	0800e3d9 	.word	0x0800e3d9
 800e444:	0800e51f 	.word	0x0800e51f
 800e448:	6833      	ldr	r3, [r6, #0]
 800e44a:	1d1a      	adds	r2, r3, #4
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	6032      	str	r2, [r6, #0]
 800e450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e458:	2301      	movs	r3, #1
 800e45a:	e09d      	b.n	800e598 <_printf_i+0x1e8>
 800e45c:	6833      	ldr	r3, [r6, #0]
 800e45e:	6820      	ldr	r0, [r4, #0]
 800e460:	1d19      	adds	r1, r3, #4
 800e462:	6031      	str	r1, [r6, #0]
 800e464:	0606      	lsls	r6, r0, #24
 800e466:	d501      	bpl.n	800e46c <_printf_i+0xbc>
 800e468:	681d      	ldr	r5, [r3, #0]
 800e46a:	e003      	b.n	800e474 <_printf_i+0xc4>
 800e46c:	0645      	lsls	r5, r0, #25
 800e46e:	d5fb      	bpl.n	800e468 <_printf_i+0xb8>
 800e470:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e474:	2d00      	cmp	r5, #0
 800e476:	da03      	bge.n	800e480 <_printf_i+0xd0>
 800e478:	232d      	movs	r3, #45	@ 0x2d
 800e47a:	426d      	negs	r5, r5
 800e47c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e480:	4859      	ldr	r0, [pc, #356]	@ (800e5e8 <_printf_i+0x238>)
 800e482:	230a      	movs	r3, #10
 800e484:	e011      	b.n	800e4aa <_printf_i+0xfa>
 800e486:	6821      	ldr	r1, [r4, #0]
 800e488:	6833      	ldr	r3, [r6, #0]
 800e48a:	0608      	lsls	r0, r1, #24
 800e48c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e490:	d402      	bmi.n	800e498 <_printf_i+0xe8>
 800e492:	0649      	lsls	r1, r1, #25
 800e494:	bf48      	it	mi
 800e496:	b2ad      	uxthmi	r5, r5
 800e498:	2f6f      	cmp	r7, #111	@ 0x6f
 800e49a:	4853      	ldr	r0, [pc, #332]	@ (800e5e8 <_printf_i+0x238>)
 800e49c:	6033      	str	r3, [r6, #0]
 800e49e:	bf14      	ite	ne
 800e4a0:	230a      	movne	r3, #10
 800e4a2:	2308      	moveq	r3, #8
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e4aa:	6866      	ldr	r6, [r4, #4]
 800e4ac:	60a6      	str	r6, [r4, #8]
 800e4ae:	2e00      	cmp	r6, #0
 800e4b0:	bfa2      	ittt	ge
 800e4b2:	6821      	ldrge	r1, [r4, #0]
 800e4b4:	f021 0104 	bicge.w	r1, r1, #4
 800e4b8:	6021      	strge	r1, [r4, #0]
 800e4ba:	b90d      	cbnz	r5, 800e4c0 <_printf_i+0x110>
 800e4bc:	2e00      	cmp	r6, #0
 800e4be:	d04b      	beq.n	800e558 <_printf_i+0x1a8>
 800e4c0:	4616      	mov	r6, r2
 800e4c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800e4c6:	fb03 5711 	mls	r7, r3, r1, r5
 800e4ca:	5dc7      	ldrb	r7, [r0, r7]
 800e4cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e4d0:	462f      	mov	r7, r5
 800e4d2:	42bb      	cmp	r3, r7
 800e4d4:	460d      	mov	r5, r1
 800e4d6:	d9f4      	bls.n	800e4c2 <_printf_i+0x112>
 800e4d8:	2b08      	cmp	r3, #8
 800e4da:	d10b      	bne.n	800e4f4 <_printf_i+0x144>
 800e4dc:	6823      	ldr	r3, [r4, #0]
 800e4de:	07df      	lsls	r7, r3, #31
 800e4e0:	d508      	bpl.n	800e4f4 <_printf_i+0x144>
 800e4e2:	6923      	ldr	r3, [r4, #16]
 800e4e4:	6861      	ldr	r1, [r4, #4]
 800e4e6:	4299      	cmp	r1, r3
 800e4e8:	bfde      	ittt	le
 800e4ea:	2330      	movle	r3, #48	@ 0x30
 800e4ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e4f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e4f4:	1b92      	subs	r2, r2, r6
 800e4f6:	6122      	str	r2, [r4, #16]
 800e4f8:	f8cd a000 	str.w	sl, [sp]
 800e4fc:	464b      	mov	r3, r9
 800e4fe:	aa03      	add	r2, sp, #12
 800e500:	4621      	mov	r1, r4
 800e502:	4640      	mov	r0, r8
 800e504:	f7ff fee6 	bl	800e2d4 <_printf_common>
 800e508:	3001      	adds	r0, #1
 800e50a:	d14a      	bne.n	800e5a2 <_printf_i+0x1f2>
 800e50c:	f04f 30ff 	mov.w	r0, #4294967295
 800e510:	b004      	add	sp, #16
 800e512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e516:	6823      	ldr	r3, [r4, #0]
 800e518:	f043 0320 	orr.w	r3, r3, #32
 800e51c:	6023      	str	r3, [r4, #0]
 800e51e:	4833      	ldr	r0, [pc, #204]	@ (800e5ec <_printf_i+0x23c>)
 800e520:	2778      	movs	r7, #120	@ 0x78
 800e522:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e526:	6823      	ldr	r3, [r4, #0]
 800e528:	6831      	ldr	r1, [r6, #0]
 800e52a:	061f      	lsls	r7, r3, #24
 800e52c:	f851 5b04 	ldr.w	r5, [r1], #4
 800e530:	d402      	bmi.n	800e538 <_printf_i+0x188>
 800e532:	065f      	lsls	r7, r3, #25
 800e534:	bf48      	it	mi
 800e536:	b2ad      	uxthmi	r5, r5
 800e538:	6031      	str	r1, [r6, #0]
 800e53a:	07d9      	lsls	r1, r3, #31
 800e53c:	bf44      	itt	mi
 800e53e:	f043 0320 	orrmi.w	r3, r3, #32
 800e542:	6023      	strmi	r3, [r4, #0]
 800e544:	b11d      	cbz	r5, 800e54e <_printf_i+0x19e>
 800e546:	2310      	movs	r3, #16
 800e548:	e7ac      	b.n	800e4a4 <_printf_i+0xf4>
 800e54a:	4827      	ldr	r0, [pc, #156]	@ (800e5e8 <_printf_i+0x238>)
 800e54c:	e7e9      	b.n	800e522 <_printf_i+0x172>
 800e54e:	6823      	ldr	r3, [r4, #0]
 800e550:	f023 0320 	bic.w	r3, r3, #32
 800e554:	6023      	str	r3, [r4, #0]
 800e556:	e7f6      	b.n	800e546 <_printf_i+0x196>
 800e558:	4616      	mov	r6, r2
 800e55a:	e7bd      	b.n	800e4d8 <_printf_i+0x128>
 800e55c:	6833      	ldr	r3, [r6, #0]
 800e55e:	6825      	ldr	r5, [r4, #0]
 800e560:	6961      	ldr	r1, [r4, #20]
 800e562:	1d18      	adds	r0, r3, #4
 800e564:	6030      	str	r0, [r6, #0]
 800e566:	062e      	lsls	r6, r5, #24
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	d501      	bpl.n	800e570 <_printf_i+0x1c0>
 800e56c:	6019      	str	r1, [r3, #0]
 800e56e:	e002      	b.n	800e576 <_printf_i+0x1c6>
 800e570:	0668      	lsls	r0, r5, #25
 800e572:	d5fb      	bpl.n	800e56c <_printf_i+0x1bc>
 800e574:	8019      	strh	r1, [r3, #0]
 800e576:	2300      	movs	r3, #0
 800e578:	6123      	str	r3, [r4, #16]
 800e57a:	4616      	mov	r6, r2
 800e57c:	e7bc      	b.n	800e4f8 <_printf_i+0x148>
 800e57e:	6833      	ldr	r3, [r6, #0]
 800e580:	1d1a      	adds	r2, r3, #4
 800e582:	6032      	str	r2, [r6, #0]
 800e584:	681e      	ldr	r6, [r3, #0]
 800e586:	6862      	ldr	r2, [r4, #4]
 800e588:	2100      	movs	r1, #0
 800e58a:	4630      	mov	r0, r6
 800e58c:	f7f1 fea8 	bl	80002e0 <memchr>
 800e590:	b108      	cbz	r0, 800e596 <_printf_i+0x1e6>
 800e592:	1b80      	subs	r0, r0, r6
 800e594:	6060      	str	r0, [r4, #4]
 800e596:	6863      	ldr	r3, [r4, #4]
 800e598:	6123      	str	r3, [r4, #16]
 800e59a:	2300      	movs	r3, #0
 800e59c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5a0:	e7aa      	b.n	800e4f8 <_printf_i+0x148>
 800e5a2:	6923      	ldr	r3, [r4, #16]
 800e5a4:	4632      	mov	r2, r6
 800e5a6:	4649      	mov	r1, r9
 800e5a8:	4640      	mov	r0, r8
 800e5aa:	47d0      	blx	sl
 800e5ac:	3001      	adds	r0, #1
 800e5ae:	d0ad      	beq.n	800e50c <_printf_i+0x15c>
 800e5b0:	6823      	ldr	r3, [r4, #0]
 800e5b2:	079b      	lsls	r3, r3, #30
 800e5b4:	d413      	bmi.n	800e5de <_printf_i+0x22e>
 800e5b6:	68e0      	ldr	r0, [r4, #12]
 800e5b8:	9b03      	ldr	r3, [sp, #12]
 800e5ba:	4298      	cmp	r0, r3
 800e5bc:	bfb8      	it	lt
 800e5be:	4618      	movlt	r0, r3
 800e5c0:	e7a6      	b.n	800e510 <_printf_i+0x160>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	4632      	mov	r2, r6
 800e5c6:	4649      	mov	r1, r9
 800e5c8:	4640      	mov	r0, r8
 800e5ca:	47d0      	blx	sl
 800e5cc:	3001      	adds	r0, #1
 800e5ce:	d09d      	beq.n	800e50c <_printf_i+0x15c>
 800e5d0:	3501      	adds	r5, #1
 800e5d2:	68e3      	ldr	r3, [r4, #12]
 800e5d4:	9903      	ldr	r1, [sp, #12]
 800e5d6:	1a5b      	subs	r3, r3, r1
 800e5d8:	42ab      	cmp	r3, r5
 800e5da:	dcf2      	bgt.n	800e5c2 <_printf_i+0x212>
 800e5dc:	e7eb      	b.n	800e5b6 <_printf_i+0x206>
 800e5de:	2500      	movs	r5, #0
 800e5e0:	f104 0619 	add.w	r6, r4, #25
 800e5e4:	e7f5      	b.n	800e5d2 <_printf_i+0x222>
 800e5e6:	bf00      	nop
 800e5e8:	0800e7e9 	.word	0x0800e7e9
 800e5ec:	0800e7fa 	.word	0x0800e7fa

0800e5f0 <memmove>:
 800e5f0:	4288      	cmp	r0, r1
 800e5f2:	b510      	push	{r4, lr}
 800e5f4:	eb01 0402 	add.w	r4, r1, r2
 800e5f8:	d902      	bls.n	800e600 <memmove+0x10>
 800e5fa:	4284      	cmp	r4, r0
 800e5fc:	4623      	mov	r3, r4
 800e5fe:	d807      	bhi.n	800e610 <memmove+0x20>
 800e600:	1e43      	subs	r3, r0, #1
 800e602:	42a1      	cmp	r1, r4
 800e604:	d008      	beq.n	800e618 <memmove+0x28>
 800e606:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e60a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e60e:	e7f8      	b.n	800e602 <memmove+0x12>
 800e610:	4402      	add	r2, r0
 800e612:	4601      	mov	r1, r0
 800e614:	428a      	cmp	r2, r1
 800e616:	d100      	bne.n	800e61a <memmove+0x2a>
 800e618:	bd10      	pop	{r4, pc}
 800e61a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e61e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e622:	e7f7      	b.n	800e614 <memmove+0x24>

0800e624 <_sbrk_r>:
 800e624:	b538      	push	{r3, r4, r5, lr}
 800e626:	4d06      	ldr	r5, [pc, #24]	@ (800e640 <_sbrk_r+0x1c>)
 800e628:	2300      	movs	r3, #0
 800e62a:	4604      	mov	r4, r0
 800e62c:	4608      	mov	r0, r1
 800e62e:	602b      	str	r3, [r5, #0]
 800e630:	f7f4 fa1e 	bl	8002a70 <_sbrk>
 800e634:	1c43      	adds	r3, r0, #1
 800e636:	d102      	bne.n	800e63e <_sbrk_r+0x1a>
 800e638:	682b      	ldr	r3, [r5, #0]
 800e63a:	b103      	cbz	r3, 800e63e <_sbrk_r+0x1a>
 800e63c:	6023      	str	r3, [r4, #0]
 800e63e:	bd38      	pop	{r3, r4, r5, pc}
 800e640:	24000470 	.word	0x24000470

0800e644 <memcpy>:
 800e644:	440a      	add	r2, r1
 800e646:	4291      	cmp	r1, r2
 800e648:	f100 33ff 	add.w	r3, r0, #4294967295
 800e64c:	d100      	bne.n	800e650 <memcpy+0xc>
 800e64e:	4770      	bx	lr
 800e650:	b510      	push	{r4, lr}
 800e652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e65a:	4291      	cmp	r1, r2
 800e65c:	d1f9      	bne.n	800e652 <memcpy+0xe>
 800e65e:	bd10      	pop	{r4, pc}

0800e660 <_realloc_r>:
 800e660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e664:	4680      	mov	r8, r0
 800e666:	4615      	mov	r5, r2
 800e668:	460c      	mov	r4, r1
 800e66a:	b921      	cbnz	r1, 800e676 <_realloc_r+0x16>
 800e66c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e670:	4611      	mov	r1, r2
 800e672:	f7ff bc4b 	b.w	800df0c <_malloc_r>
 800e676:	b92a      	cbnz	r2, 800e684 <_realloc_r+0x24>
 800e678:	f7ff fbdc 	bl	800de34 <_free_r>
 800e67c:	2400      	movs	r4, #0
 800e67e:	4620      	mov	r0, r4
 800e680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e684:	f000 f81a 	bl	800e6bc <_malloc_usable_size_r>
 800e688:	4285      	cmp	r5, r0
 800e68a:	4606      	mov	r6, r0
 800e68c:	d802      	bhi.n	800e694 <_realloc_r+0x34>
 800e68e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e692:	d8f4      	bhi.n	800e67e <_realloc_r+0x1e>
 800e694:	4629      	mov	r1, r5
 800e696:	4640      	mov	r0, r8
 800e698:	f7ff fc38 	bl	800df0c <_malloc_r>
 800e69c:	4607      	mov	r7, r0
 800e69e:	2800      	cmp	r0, #0
 800e6a0:	d0ec      	beq.n	800e67c <_realloc_r+0x1c>
 800e6a2:	42b5      	cmp	r5, r6
 800e6a4:	462a      	mov	r2, r5
 800e6a6:	4621      	mov	r1, r4
 800e6a8:	bf28      	it	cs
 800e6aa:	4632      	movcs	r2, r6
 800e6ac:	f7ff ffca 	bl	800e644 <memcpy>
 800e6b0:	4621      	mov	r1, r4
 800e6b2:	4640      	mov	r0, r8
 800e6b4:	f7ff fbbe 	bl	800de34 <_free_r>
 800e6b8:	463c      	mov	r4, r7
 800e6ba:	e7e0      	b.n	800e67e <_realloc_r+0x1e>

0800e6bc <_malloc_usable_size_r>:
 800e6bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6c0:	1f18      	subs	r0, r3, #4
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	bfbc      	itt	lt
 800e6c6:	580b      	ldrlt	r3, [r1, r0]
 800e6c8:	18c0      	addlt	r0, r0, r3
 800e6ca:	4770      	bx	lr

0800e6cc <_init>:
 800e6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ce:	bf00      	nop
 800e6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6d2:	bc08      	pop	{r3}
 800e6d4:	469e      	mov	lr, r3
 800e6d6:	4770      	bx	lr

0800e6d8 <_fini>:
 800e6d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6da:	bf00      	nop
 800e6dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6de:	bc08      	pop	{r3}
 800e6e0:	469e      	mov	lr, r3
 800e6e2:	4770      	bx	lr
